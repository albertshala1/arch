service: ${file(resources/config.common.yaml):serviceName}

# Pin service to only deploy with a specific Serverless version
frameworkVersion: ">=3.0.0 <4.0.0"

plugins:
  - serverless-offline
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.awsRegion}
  timeout: 3
  tags:
    project: bridge-frontend-web-app
  logRetentionInDays: 30
  memorySize: 1024
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  logs:
    httpApi: true

package:
  excludeDevDependencies: false
  patterns:
    - "!*"
    - "!*/**"
    - "server/**"
    - "dist/**"

custom:
  serverless-offline:
    httpPort: 4000

  configFileNameStage:
    prod: resources/config.prod.yaml
    staging: resources/config.staging.yaml
    alpha: resources/config.alpha.yaml
    dev: resources/config.dev.yaml

  stageConfigFileName: ${self:custom.configFileNameStage.${self:provider.stage}, self:custom.configFileNameStage.dev}
  stageConfig: ${file(${self:custom.stageConfigFileName}),self:custom.configFileNameStage.dev}
  commonConfig: ${file(resources/config.common.yaml)}

  certificate:
    name: ${self:custom.stageConfig.domainName}
    hostedZoneId: ${self:custom.stageConfig.bridgeCloudHostedZoneId}

  serviceName: ${self:custom.commonConfig.serviceName}
  awsRegion: ${self:custom.stageConfig.awsRegion}
  bucketReferer: ${self:custom.commonConfig.bucketReferer}

  s3Sync:
    - bucketNameKey: S3BucketName # required
      #bucketPrefix: # optional
      localDir: dist/ # required
      params: # optional
        - index.html:
            CacheControl: "no-store,max-age=0"
        - "*.js":
            CacheControl: "public, max-age=0, must-revalidate"
        - "*.json":
            CacheControl: "public, max-age=0, must-revalidate"
        - "*.svg":
            CacheControl: "public, max-age=31536000, immutable"
        - "*.jp*g":
            CacheControl: "public, max-age=31536000, immutable"
        - "*.png":
            CacheControl: "public, max-age=31536000, immutable"
      bucketTags:
        team: bridge-frontend

# Lambda functions
functions:
  bridgeWebSSR:
    handler: server/entry_aws-lambda.bridgeApp
    description: HTTP Requests Handler for Qwik Bridge App
    role: SsrRole
    events:
      - httpApi: "*"

resources:
  - Description: Bridge Web App for - ${self:provider.stage}
  - Conditions:
      IsDev:
        Fn::Equals:
          - ${self:custom.stageConfigFileName}
          - ${self:custom.configFileNameStage.dev}
      IsAlpha:
        Fn::Equals:
          - ${self:custom.stageConfigFileName}
          - ${self:custom.configFileNameStage.alpha}
      IsNotDev:
        Fn::Not:
          - Condition: IsDev

  - Resources:
      Certificate:
        Type: AWS::CertificateManager::Certificate
        Condition: IsNotDev
        Properties:
          DomainName: ${self:custom.certificate.name}
          DomainValidationOptions:
            - DomainName: ${self:custom.certificate.name}
              HostedZoneId: ${self:custom.certificate.hostedZoneId}
          ValidationMethod: DNS

      ### S3 Bucket #######
      StaticContent:
        Type: AWS::S3::Bucket
        Properties:
          PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            IgnorePublicAcls: true
            BlockPublicPolicy: false
            RestrictPublicBuckets: false
          WebsiteConfiguration:
            IndexDocument: index.html
            ErrorDocument: 404.html

      ### CloudFront #######
      BridgeWebAppCDN:
        Type: AWS::CloudFront::Distribution
        Properties:
          Tags:
            - Key: Stack Name
              Value: !Ref AWS::StackName
            - Key: Purpose
              Value: ${self:custom.stageConfig.cloudFrontCommentPurpose}
          DistributionConfig:
            Aliases:
              - Fn::If:
                  - IsDev
                  - Ref: AWS::NoValue
                  - ${self:custom.stageConfig.aliases}
            Comment:
              Fn::Join:
                - ""
                - - "CDN for "
                  - ${self:custom.serviceName}
                  - " ("
                  - ${self:provider.stage}
                  - ") - "
                  - ${self:custom.stageConfig.cloudFrontCommentPurpose}
            #Restrictions:
            ViewerCertificate:
              Fn::If:
                - IsDev
                - CloudFrontDefaultCertificate: true
                - AcmCertificateArn: !Ref Certificate
                  MinimumProtocolVersion: TLSv1.2_2021
                  SslSupportMethod: sni-only
            Origins:
              - Id: web-app-bridge-express-lambda
                DomainName:
                  Fn::Join:
                    - ""
                    - - "Ref": "HttpApi"
                      - ".execute-api.${self:provider.region}.amazonaws.com"
                CustomOriginConfig:
                  OriginProtocolPolicy: https-only
                  OriginSSLProtocols:
                    - TLSv1.2
                  OriginReadTimeout: 60
                  OriginKeepaliveTimeout: 60

              - Id: web-app-bridge-s3-site
                DomainName: !GetAtt StaticContent.DomainName
                OriginCustomHeaders:
                  - HeaderName: Referer
                    HeaderValue: ${self:custom.bucketReferer}
                OriginPath: /static
                CustomOriginConfig:
                  OriginProtocolPolicy: https-only

            DefaultRootObject: ""
            Enabled: true
            HttpVersion: http2
            IPV6Enabled: true
            PriceClass: ${self:custom.stageConfig.priceClass}
            CustomErrorResponses:
              - ErrorCachingMinTTL: 300
                ErrorCode: 404
                ResponseCode: 404
                ResponsePagePath: /404.html
              - ErrorCachingMinTTL: 300
                ErrorCode: 403
                ResponseCode: 200
                ResponsePagePath: /

            DefaultCacheBehavior: # cache behaviour for web app bridge
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - PATCH
                - POST
                - DELETE
              CachedMethods:
                - GET
                - HEAD
              CachePolicyId: !Ref BridgeCloudFrontCachePolicyForWebAssets
              Compress: true
              SmoothStreaming: false
              TargetOriginId: web-app-bridge-express-lambda
              ViewerProtocolPolicy: redirect-to-https

  - ${file(serverless.yml.d/policies.yml)}
  - ${file(serverless.yml.d/roles.yml)}
  - Outputs:
      S3BucketName:
        Value:
          Ref: StaticContent
        Description: S3 Bucket Name
      StackId:
        Value: !Ref "AWS::StackId"
      StackName:
        Value: !Ref "AWS::StackName"
      S3BucketWebSiteURL:
        Value: !GetAtt [ StaticContent, WebsiteURL ]
        Description: URL for website hosted on S3
      HttpApiEndpoint:
        Description: URL for the Bridge Express HTTP API endpoint.
        Value: !GetAtt HttpApi.ApiEndpoint
      CloudFrontURL:
        Description: "CloudFront URL for Bridge.Cloud Website"
        Value:
          {
            "Fn::Join":
              [
                "",
                [ "https://", { "Fn::GetAtt": [ BridgeWebAppCDN, DomainName ] } ],
              ],
          }
