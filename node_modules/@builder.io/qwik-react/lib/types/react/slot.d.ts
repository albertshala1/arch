import { Component } from 'react';
import type { QwikifyOptions, QwikifyProps } from './types';
interface SlotState {
    el?: Element;
    scopeId: string;
    attachedEl?: Element;
}
declare const SlotCtx: import("react").Context<SlotState>;
export declare function main(slotEl: Element | undefined, scopeId: string, RootCmp: any, props: any): import("react").FunctionComponentElement<import("react").ProviderProps<SlotState>>;
export declare function mainExactProps(slotEl: Element | undefined, scopeId: string, RootCmp: any, props: any): import("react").FunctionComponentElement<import("react").ProviderProps<SlotState>>;
export declare class SlotElement extends Component {
    static contextType: import("react").Context<SlotState>;
    context: React.ContextType<typeof SlotCtx>;
    slotC: import("react").RefObject<Element>;
    shouldComponentUpdate(): boolean;
    componentDidMount(): void;
    render(): import("react").DOMElement<{
        class: string;
        suppressHydrationWarning: boolean;
        dangerouslySetInnerHTML: {
            __html: string;
        };
        ref: import("react").RefObject<Element>;
    }, Element>;
}
export declare const getReactProps: (props: Record<string, any>) => Record<string, any>;
export declare const getHostProps: (props: Record<string, any>) => Record<string, any>;
export declare const useWakeupSignal: (props: QwikifyProps<{}>, opts?: QwikifyOptions) => readonly [import("@builder.io/qwik").Signal<boolean>, boolean, import("@builder.io/qwik").QRL<() => true>];
export {};
