import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol2 = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol2(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol2("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable2;
    }
    function isObservable(x) {
      return x instanceof Observable2;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m)
              m.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m)
              m.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m)
              m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable2 = function() {
      function Observable3(subscriber) {
        _classCallCheck(this, Observable3);
        if (!(this instanceof Observable3))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass(Observable3, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v) {
                  observer.next(v);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }
                var inner = C.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0)
                      subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x) {
          var C = typeof this === "function" ? this : Observable3;
          if (x == null)
            throw new TypeError(x + " is not an object");
          var method = getMethod(x, SymbolObservable);
          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C)
              return observable;
            return new C(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol2("iterator")) {
            method = getMethod(x, SymbolIterator);
            if (method) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x)) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C = typeof this === "function" ? this : Observable3;
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable3;
    }();
    exports.Observable = Observable2;
    if (hasSymbols()) {
      Object.defineProperty(Observable2, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "node_modules/zen-observable/index.js"(exports, module) {
    module.exports = require_Observable().Observable;
  }
});

// node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign4,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter4,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends4,
  __generator: () => __generator4,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read7,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values4
});
function __extends4(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter4(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator4(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values4(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read7(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read7(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values4 === "function" ? __values4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign4;
var init_tslib_es6 = __esm({
  "node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js"() {
    extendStatics2 = function(d, b) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics2(d, b);
    };
    __assign4 = function() {
      __assign4 = Object.assign || function __assign28(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign4.apply(this, arguments);
    };
  }
});

// node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants();
    var RawSha256 = (
      /** @class */
      function() {
        function RawSha2562() {
          this.state = Int32Array.from(constants_1.INIT);
          this.temp = new Int32Array(64);
          this.buffer = new Uint8Array(64);
          this.bufferLength = 0;
          this.bytesHashed = 0;
          this.finished = false;
        }
        RawSha2562.prototype.update = function(data) {
          if (this.finished) {
            throw new Error("Attempted to update an already finished hash.");
          }
          var position = 0;
          var byteLength = data.byteLength;
          this.bytesHashed += byteLength;
          if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
            throw new Error("Cannot hash more than 2^53 - 1 bits");
          }
          while (byteLength > 0) {
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
              this.hashBuffer();
              this.bufferLength = 0;
            }
          }
        };
        RawSha2562.prototype.digest = function() {
          if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 128);
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
              for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
                bufferView.setUint8(i, 0);
              }
              this.hashBuffer();
              this.bufferLength = 0;
            }
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
              bufferView.setUint8(i, 0);
            }
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
          }
          var out = new Uint8Array(constants_1.DIGEST_LENGTH);
          for (var i = 0; i < 8; i++) {
            out[i * 4] = this.state[i] >>> 24 & 255;
            out[i * 4 + 1] = this.state[i] >>> 16 & 255;
            out[i * 4 + 2] = this.state[i] >>> 8 & 255;
            out[i * 4 + 3] = this.state[i] >>> 0 & 255;
          }
          return out;
        };
        RawSha2562.prototype.hashBuffer = function() {
          var _a = this, buffer = _a.buffer, state = _a.state;
          var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            if (i < 16) {
              this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
            } else {
              var u = this.temp[i - 2];
              var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
              u = this.temp[i - 15];
              var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
              this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
          }
          state[0] += state0;
          state[1] += state1;
          state[2] += state2;
          state[3] += state3;
          state[4] += state4;
          state[5] += state5;
          state[6] += state6;
          state[7] += state7;
        };
        return RawSha2562;
      }()
    );
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf8, toUtf8;
var init_pureJs = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js"() {
    fromUtf8 = function(input) {
      var bytes = [];
      for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf8 = function(input) {
      var decoded = "";
      for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i], input[++i], input[++i]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf82(input) {
  return new TextEncoder().encode(input);
}
function toUtf82(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var es_exports = {};
__export(es_exports, {
  fromUtf8: () => fromUtf83,
  toUtf8: () => toUtf83
});
var fromUtf83, toUtf83;
var init_es = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js"() {
    init_pureJs();
    init_whatwgEncodingApi();
    fromUtf83 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf82(input) : fromUtf8(input);
    };
    toUtf83 = function(input) {
      return typeof TextDecoder === "function" ? toUtf82(input) : toUtf8(input);
    };
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_es(), __toCommonJS(es_exports));
    var fromUtf84 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf84(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var constants_1 = require_constants();
    var RawSha256_1 = require_RawSha256();
    var util_1 = require_build();
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          this.hash = new RawSha256_1.RawSha256();
          if (secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
              inner[i] ^= 54;
              outer[i] ^= 92;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            for (var i = 0; i < inner.byteLength; i++) {
              inner[i] = 0;
            }
          }
        }
        Sha2567.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash) || this.error) {
            return;
          }
          try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
          } catch (e) {
            this.error = e;
          }
        };
        Sha2567.prototype.digestSync = function() {
          if (this.error) {
            throw this.error;
          }
          if (this.outer) {
            if (!this.outer.finished) {
              this.outer.update(this.hash.digest());
            }
            return this.outer.digest();
          }
          return this.hash.digest();
        };
        Sha2567.prototype.digest = function() {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
            return (0, tslib_1.__generator)(this, function(_a) {
              return [2, this.digestSync()];
            });
          });
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-crypto/sha256-js/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    (0, tslib_1.__exportStar)(require_jsSha256(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js
var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign10,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues2,
  __await: () => __await2,
  __awaiter: () => __awaiter6,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends6,
  __generator: () => __generator6,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read12,
  __rest: () => __rest3,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values5
});
function __extends6(d, b) {
  extendStatics4(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate2(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter6(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator6(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar2(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values5(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read12(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread2() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read12(arguments[i]));
  return ar;
}
function __spreadArrays2() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await2(v) {
  return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator2(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues2(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values5 === "function" ? __values5(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault2(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics4, __assign10;
var init_tslib_es62 = __esm({
  "node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js"() {
    extendStatics4 = function(d, b) {
      extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics4(d, b);
    };
    __assign10 = function() {
      __assign10 = Object.assign || function __assign28(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign10.apply(this, arguments);
    };
  }
});

// node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/util-locate-window/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  locateWindow: () => locateWindow
});
function locateWindow() {
  if (typeof window !== "undefined") {
    return window;
  } else if (typeof self !== "undefined") {
    return self;
  }
  return fallbackWindow;
}
var fallbackWindow;
var init_dist_es = __esm({
  "node_modules/@aws-sdk/util-locate-window/dist-es/index.js"() {
    fallbackWindow = {};
  }
});

// node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData2();
    var constants_1 = require_constants2();
    var util_utf8_browser_1 = (init_es(), __toCommonJS(es_exports));
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          if (secret) {
            this.operation = getKeyPromise(secret).then(function(keyData) {
              return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {
            });
          } else {
            this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
          }
        }
        Sha2567.prototype.update = function(toHash) {
          var _this = this;
          if ((0, isEmptyData_1.isEmptyData)(toHash)) {
            return;
          }
          this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
              _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
          });
          this.operation.catch(function() {
          });
        };
        Sha2567.prototype.digest = function() {
          return this.operation.then(function(operation) {
            return new Promise(function(resolve, reject) {
              operation.onerror = function() {
                reject(new Error("Error encountered finalizing hash"));
              };
              operation.oncomplete = function() {
                if (operation.result) {
                  resolve(new Uint8Array(operation.result));
                }
                reject(new Error("Error encountered finalizing hash"));
              };
              operation.finish();
            });
          });
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
    function getKeyPromise(secret) {
      return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build();
    var constants_1 = require_constants2();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          this.toHash = new Uint8Array(0);
          if (secret !== void 0) {
            this.key = new Promise(function(resolve, reject) {
              (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
            });
            this.key.catch(function() {
            });
          }
        }
        Sha2567.prototype.update = function(data) {
          if ((0, util_1.isEmptyData)(data)) {
            return;
          }
          var update = (0, util_1.convertToBuffer)(data);
          var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
          typedArray.set(this.toHash, 0);
          typedArray.set(update, this.toHash.byteLength);
          this.toHash = typedArray;
        };
        Sha2567.prototype.digest = function() {
          var _this = this;
          if (this.key) {
            return this.key.then(function(key) {
              return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
              });
            });
          }
          if ((0, util_1.isEmptyData)(this.toHash)) {
            return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
          }
          return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
          }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
          });
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js
var tslib_es6_exports3 = {};
__export(tslib_es6_exports3, {
  __assign: () => __assign11,
  __asyncDelegator: () => __asyncDelegator3,
  __asyncGenerator: () => __asyncGenerator3,
  __asyncValues: () => __asyncValues3,
  __await: () => __await3,
  __awaiter: () => __awaiter7,
  __classPrivateFieldGet: () => __classPrivateFieldGet3,
  __classPrivateFieldSet: () => __classPrivateFieldSet3,
  __createBinding: () => __createBinding3,
  __decorate: () => __decorate3,
  __exportStar: () => __exportStar3,
  __extends: () => __extends7,
  __generator: () => __generator7,
  __importDefault: () => __importDefault3,
  __importStar: () => __importStar3,
  __makeTemplateObject: () => __makeTemplateObject3,
  __metadata: () => __metadata3,
  __param: () => __param3,
  __read: () => __read13,
  __rest: () => __rest4,
  __spread: () => __spread3,
  __spreadArrays: () => __spreadArrays3,
  __values: () => __values6
});
function __extends7(d, b) {
  extendStatics5(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest4(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate3(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param3(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata3(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter7(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator7(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding3(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar3(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values6(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read13(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread3() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read13(arguments[i]));
  return ar;
}
function __spreadArrays3() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await3(v) {
  return this instanceof __await3 ? (this.v = v, this) : new __await3(v);
}
function __asyncGenerator3(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator3(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await3(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues3(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject3(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar3(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault3(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet3(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet3(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics5, __assign11;
var init_tslib_es63 = __esm({
  "node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js"() {
    extendStatics5 = function(d, b) {
      extendStatics5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics5(d, b);
    };
    __assign11 = function() {
      __assign11 = Object.assign || function __assign28(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign11.apply(this, arguments);
    };
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = (init_tslib_es63(), __toCommonJS(tslib_es6_exports3));
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues = window2.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es63(), __toCommonJS(tslib_es6_exports3));
    tslib_1.__exportStar(require_supportsWebCrypto(), exports);
  }
});

// node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js
var tslib_es6_exports4 = {};
__export(tslib_es6_exports4, {
  __assign: () => __assign12,
  __asyncDelegator: () => __asyncDelegator4,
  __asyncGenerator: () => __asyncGenerator4,
  __asyncValues: () => __asyncValues4,
  __await: () => __await4,
  __awaiter: () => __awaiter8,
  __classPrivateFieldGet: () => __classPrivateFieldGet4,
  __classPrivateFieldSet: () => __classPrivateFieldSet4,
  __createBinding: () => __createBinding4,
  __decorate: () => __decorate4,
  __exportStar: () => __exportStar4,
  __extends: () => __extends8,
  __generator: () => __generator8,
  __importDefault: () => __importDefault4,
  __importStar: () => __importStar4,
  __makeTemplateObject: () => __makeTemplateObject4,
  __metadata: () => __metadata4,
  __param: () => __param4,
  __read: () => __read14,
  __rest: () => __rest5,
  __spread: () => __spread4,
  __spreadArrays: () => __spreadArrays4,
  __values: () => __values7
});
function __extends8(d, b) {
  extendStatics6(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest5(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate4(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param4(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata4(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter8(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator8(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding4(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar4(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values7(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read14(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread4() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read14(arguments[i]));
  return ar;
}
function __spreadArrays4() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await4(v) {
  return this instanceof __await4 ? (this.v = v, this) : new __await4(v);
}
function __asyncGenerator4(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator4(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await4(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues4(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values7 === "function" ? __values7(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject4(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar4(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault4(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet4(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet4(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics6, __assign12;
var init_tslib_es64 = __esm({
  "node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js"() {
    extendStatics6 = function(d, b) {
      extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics6(d, b);
    };
    __assign12 = function() {
      __assign12 = Object.assign || function __assign28(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign12.apply(this, arguments);
    };
  }
});

// node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build4 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es64(), __toCommonJS(tslib_es6_exports4));
    tslib_1.__exportStar(require_CryptoOperation(), exports);
    tslib_1.__exportStar(require_Key(), exports);
    tslib_1.__exportStar(require_KeyOperation(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto(), exports);
    tslib_1.__exportStar(require_MsWindow(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha256();
    var webCryptoSha256_1 = require_webCryptoSha256();
    var sha256_js_1 = require_build2();
    var supports_web_crypto_1 = require_build3();
    var ie11_detection_1 = require_build4();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new webCryptoSha256_1.Sha256(secret);
          } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new ie11Sha256_1.Sha256(secret);
          } else {
            this.hash = new sha256_js_1.Sha256(secret);
          }
        }
        Sha2567.prototype.update = function(data, encoding) {
          this.hash.update(data, encoding);
        };
        Sha2567.prototype.digest = function() {
          return this.hash.digest();
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build5 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    (0, tslib_1.__exportStar)(require_crossPlatformSha256(), exports);
    var ie11Sha256_1 = require_ie11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        "-",
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]],
        bth[buf[i2++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/v1.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : (/* @__PURE__ */ new Date()).getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf ? buf : bytesToUuid(b);
    }
    module.exports = v1;
  }
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v42(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v42;
  }
});

// node_modules/uuid/index.js
var require_uuid = __commonJS({
  "node_modules/uuid/index.js"(exports, module) {
    var v1 = require_v1();
    var v42 = require_v4();
    var uuid = v42;
    uuid.v1 = v1;
    uuid.v4 = v42;
    module.exports = uuid;
  }
});

// node_modules/unfetch/dist/unfetch.module.js
var unfetch_module_exports = {};
__export(unfetch_module_exports, {
  default: () => unfetch_module_default
});
function unfetch_module_default(e, n) {
  return n = n || {}, new Promise(function(t, r) {
    var s = new XMLHttpRequest(), o = [], u = [], i = {}, a = function() {
      return { ok: 2 == (s.status / 100 | 0), statusText: s.statusText, status: s.status, url: s.responseURL, text: function() {
        return Promise.resolve(s.responseText);
      }, json: function() {
        return Promise.resolve(s.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([s.response]));
      }, clone: a, headers: { keys: function() {
        return o;
      }, entries: function() {
        return u;
      }, get: function(e2) {
        return i[e2.toLowerCase()];
      }, has: function(e2) {
        return e2.toLowerCase() in i;
      } } };
    };
    for (var l in s.open(n.method || "get", e, true), s.onload = function() {
      s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e2, n2, t2) {
        o.push(n2 = n2.toLowerCase()), u.push([n2, t2]), i[n2] = i[n2] ? i[n2] + "," + t2 : t2;
      }), t(a());
    }, s.onerror = r, s.withCredentials = "include" == n.credentials, n.headers)
      s.setRequestHeader(l, n.headers[l]);
    s.send(n.body || null);
  });
}
var init_unfetch_module = __esm({
  "node_modules/unfetch/dist/unfetch.module.js"() {
  }
});

// node_modules/isomorphic-unfetch/browser.js
var require_browser = __commonJS({
  "node_modules/isomorphic-unfetch/browser.js"(exports, module) {
    module.exports = self.fetch || (self.fetch = (init_unfetch_module(), __toCommonJS(unfetch_module_exports)).default || (init_unfetch_module(), __toCommonJS(unfetch_module_exports)));
  }
});

// node_modules/universal-cookie/node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/universal-cookie/node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse5;
    exports.serialize = serialize2;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse5(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var pairs = str.split(";");
      var dec = opt.decode || decode;
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var index = pair.indexOf("=");
        if (index < 0) {
          continue;
        }
        var key = pair.substring(0, index).trim();
        if (void 0 == obj[key]) {
          var val = pair.substring(index + 1, pair.length).trim();
          if (val[0] === '"') {
            val = val.slice(1, -1);
          }
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports, module) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var isArray = require_isarray();
    exports.Buffer = Buffer6;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    Buffer6.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== void 0 ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
    exports.kMaxLength = kMaxLength();
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
          return 42;
        } };
        return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0;
      } catch (e) {
        return false;
      }
    }
    function kMaxLength() {
      return Buffer6.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    }
    function createBuffer(that, length) {
      if (kMaxLength() < length) {
        throw new RangeError("Invalid typed array length");
      }
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        that = new Uint8Array(length);
        that.__proto__ = Buffer6.prototype;
      } else {
        if (that === null) {
          that = new Buffer6(length);
        }
        that.length = length;
      }
      return that;
    }
    function Buffer6(arg, encodingOrOffset, length) {
      if (!Buffer6.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer6)) {
        return new Buffer6(arg, encodingOrOffset, length);
      }
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new Error(
            "If encoding is specified then the first argument must be a string"
          );
        }
        return allocUnsafe(this, arg);
      }
      return from(this, arg, encodingOrOffset, length);
    }
    Buffer6.poolSize = 8192;
    Buffer6._augment = function(arr) {
      arr.__proto__ = Buffer6.prototype;
      return arr;
    };
    function from(that, value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length);
      }
      if (typeof value === "string") {
        return fromString(that, value, encodingOrOffset);
      }
      return fromObject(that, value);
    }
    Buffer6.from = function(value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };
    if (Buffer6.TYPED_ARRAY_SUPPORT) {
      Buffer6.prototype.__proto__ = Uint8Array.prototype;
      Buffer6.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer6[Symbol.species] === Buffer6) {
        Object.defineProperty(Buffer6, Symbol.species, {
          value: null,
          configurable: true
        });
      }
    }
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be a number');
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
    }
    function alloc(that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
      }
      return createBuffer(that, size);
    }
    Buffer6.alloc = function(size, fill, encoding) {
      return alloc(null, size, fill, encoding);
    };
    function allocUnsafe(that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer6.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that;
    }
    Buffer6.allocUnsafe = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer6.allocUnsafeSlow = function(size) {
      return allocUnsafe(null, size);
    };
    function fromString(that, string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer6.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }
      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);
      var actual = that.write(string, encoding);
      if (actual !== length) {
        that = that.slice(0, actual);
      }
      return that;
    }
    function fromArrayLike(that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that;
    }
    function fromArrayBuffer(that, array, byteOffset, length) {
      array.byteLength;
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError("'length' is out of bounds");
      }
      if (byteOffset === void 0 && length === void 0) {
        array = new Uint8Array(array);
      } else if (length === void 0) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        that = array;
        that.__proto__ = Buffer6.prototype;
      } else {
        that = fromArrayLike(that, array);
      }
      return that;
    }
    function fromObject(that, obj) {
      if (Buffer6.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) {
          return that;
        }
        obj.copy(that, 0, 0, len);
        return that;
      }
      if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
          if (typeof obj.length !== "number" || isnan(obj.length)) {
            return createBuffer(that, 0);
          }
          return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function checked(length) {
      if (length >= kMaxLength()) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer6.alloc(+length);
    }
    Buffer6.isBuffer = function isBuffer(b) {
      return !!(b != null && b._isBuffer);
    };
    Buffer6.compare = function compare(a, b) {
      if (!Buffer6.isBuffer(a) || !Buffer6.isBuffer(b)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer6.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer6.concat = function concat(list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer6.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer6.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!Buffer6.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer6.isBuffer(string)) {
        return string.length;
      }
      if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        string = "" + string;
      }
      var len = string.length;
      if (len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
          case void 0:
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase)
              return utf8ToBytes(string).length;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer6.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer6.prototype._isBuffer = true;
    function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer6.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer6.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer6.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer6.prototype.toString = function toString() {
      var length = this.length | 0;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer6.prototype.equals = function equals(b) {
      if (!Buffer6.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer6.compare(this, b) === 0;
    };
    Buffer6.prototype.inspect = function inspect() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max)
          str += " ... ";
      }
      return "<Buffer " + str + ">";
    };
    Buffer6.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (!Buffer6.isBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (isNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer6.from(val, encoding);
      }
      if (Buffer6.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (Buffer6.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer6.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer6.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer6.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string.length;
      if (strLen % 2 !== 0)
        throw new TypeError("Invalid hex string");
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function latin1Write(buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer6.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
            return asciiWrite(this, string, offset, length);
          case "latin1":
          case "binary":
            return latin1Write(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer6.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i = start; i < end; ++i) {
        out += toHex2(buf[i]);
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer6.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf;
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer6.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer6(sliceLen, void 0);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer6.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer6.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer6.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer6.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer6.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer6.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer6.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer6.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer6.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer6.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer6.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer6.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer6.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer6.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer6.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer6.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer6.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer6.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer6.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer6.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer6.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer6.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      if (!Buffer6.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      this[offset] = value & 255;
      return offset + 1;
    };
    function objectWriteUInt16(buf, value, offset, littleEndian) {
      if (value < 0)
        value = 65535 + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
      }
    }
    Buffer6.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer6.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    function objectWriteUInt32(buf, value, offset, littleEndian) {
      if (value < 0)
        value = 4294967295 + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
      }
    }
    Buffer6.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer6.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer6.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer6.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer6.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (!Buffer6.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer6.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer6.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer6.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer6.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      if (Buffer6.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer6.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer6.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer6.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer6.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer6.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i;
      if (this === target && start < targetStart && targetStart < end) {
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1e3 || !Buffer6.TYPED_ARRAY_SUPPORT) {
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer6.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer6.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer6.isBuffer(val) ? val : utf8ToBytes(new Buffer6(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = stringtrim(str).replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function stringtrim(str) {
      if (str.trim)
        return str.trim();
      return str.replace(/^\s+|\s+$/g, "");
    }
    function toHex2(n) {
      if (n < 16)
        return "0" + n.toString(16);
      return n.toString(16);
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isnan(val) {
      return val !== val;
    }
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports, module) {
    (function(factory) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
      }
      if (typeof exports === "object") {
        module.exports = factory();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init(converter) {
        function api() {
        }
        function set2(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(/* @__PURE__ */ new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get2(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split("=");
            var cookie3 = parts.slice(1).join("=");
            if (!json && cookie3.charAt(0) === '"') {
              cookie3 = cookie3.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie3 = (converter.read || converter)(cookie3, name) || decode(cookie3);
              if (json) {
                try {
                  cookie3 = JSON.parse(cookie3);
                } catch (e) {
                }
              }
              jar[name] = cookie3;
              if (key === name) {
                break;
              }
            } catch (e) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set2;
        api.get = function(key) {
          return get2(
            key,
            false
            /* read as raw */
          );
        };
        api.getJSON = function(key) {
          return get2(
            key,
            true
            /* read as json */
          );
        };
        api.remove = function(key, attributes) {
          set2(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
      }
      return init(function() {
      });
    });
  }
});

// node_modules/url/node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
      function error(type) {
        throw RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.3.2",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/url/util.js
var require_util = __commonJS({
  "node_modules/url/util.js"(exports, module) {
    "use strict";
    module.exports = {
      isString: function(arg) {
        return typeof arg === "string";
      },
      isObject: function(arg) {
        return typeof arg === "object" && arg !== null;
      },
      isNull: function(arg) {
        return arg === null;
      },
      isNullOrUndefined: function(arg) {
        return arg == null;
      }
    };
  }
});

// node_modules/url/node_modules/querystring/decode.js
var require_decode = __commonJS({
  "node_modules/url/node_modules/querystring/decode.js"(exports, module) {
    "use strict";
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = function(qs, sep, eq, options) {
      sep = sep || "&";
      eq = eq || "=";
      var obj = {};
      if (typeof qs !== "string" || qs.length === 0) {
        return obj;
      }
      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1e3;
      if (options && typeof options.maxKeys === "number") {
        maxKeys = options.maxKeys;
      }
      var len = qs.length;
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (Array.isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }
      return obj;
    };
  }
});

// node_modules/url/node_modules/querystring/encode.js
var require_encode = __commonJS({
  "node_modules/url/node_modules/querystring/encode.js"(exports, module) {
    "use strict";
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
        case "string":
          return v;
        case "boolean":
          return v ? "true" : "false";
        case "number":
          return isFinite(v) ? v : "";
        default:
          return "";
      }
    };
    module.exports = function(obj, sep, eq, name) {
      sep = sep || "&";
      eq = eq || "=";
      if (obj === null) {
        obj = void 0;
      }
      if (typeof obj === "object") {
        return Object.keys(obj).map(function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (Array.isArray(obj[k])) {
            return obj[k].map(function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }
      if (!name)
        return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };
  }
});

// node_modules/url/node_modules/querystring/index.js
var require_querystring = __commonJS({
  "node_modules/url/node_modules/querystring/index.js"(exports) {
    "use strict";
    exports.decode = exports.parse = require_decode();
    exports.encode = exports.stringify = require_encode();
  }
});

// node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    var util = require_util();
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    var hostEndingChars = ["/", "?", "#"];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_querystring();
    function urlParse(url, parseQueryString2, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url)
        return url;
      var u = new Url();
      u.parse(url, parseQueryString2, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString2, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
      var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url = uSplit.join(splitter);
      var rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString2) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString2) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        if (hostEnd === -1)
          hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part)
              continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash = rest.indexOf("#");
      if (hash !== -1) {
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString2) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString2) {
        this.search = "";
        this.query = {};
      }
      if (rest)
        this.pathname = rest;
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (util.isString(obj))
        obj = urlParse(obj);
      if (!(obj instanceof Url))
        return Url.prototype.format.call(obj);
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":")
        protocol += ":";
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/")
          pathname = "/" + pathname;
      } else if (!host) {
        host = "";
      }
      if (hash && hash.charAt(0) !== "#")
        hash = "#" + hash;
      if (search && search.charAt(0) !== "?")
        search = "?" + search;
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source)
        return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol")
            result[rkey] = relative[rkey];
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = "/";
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift()))
            ;
          if (!relative.host)
            relative.host = "";
          if (!relative.hostname)
            relative.hostname = "";
          if (relPath[0] !== "")
            relPath.unshift("");
          if (relPath.length < 2)
            relPath.unshift("");
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "")
            srcPath[0] = result.host;
          else
            srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "")
              relPath[0] = relative.host;
            else
              relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath)
          srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join("/");
      }
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host)
        this.hostname = host;
    };
  }
});

// node_modules/@aws-amplify/auth/node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-amplify/auth/lib-esm/types/Auth.js
var CognitoHostedUIIdentityProvider;
(function(CognitoHostedUIIdentityProvider2) {
  CognitoHostedUIIdentityProvider2["Cognito"] = "COGNITO";
  CognitoHostedUIIdentityProvider2["Google"] = "Google";
  CognitoHostedUIIdentityProvider2["Facebook"] = "Facebook";
  CognitoHostedUIIdentityProvider2["Amazon"] = "LoginWithAmazon";
  CognitoHostedUIIdentityProvider2["Apple"] = "SignInWithApple";
})(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
function isFederatedSignInOptions(obj) {
  var keys = ["provider"];
  return obj && !!keys.find(function(k) {
    return obj.hasOwnProperty(k);
  });
}
function isFederatedSignInOptionsCustom(obj) {
  var keys = ["customProvider"];
  return obj && !!keys.find(function(k) {
    return obj.hasOwnProperty(k);
  });
}
function hasCustomState(obj) {
  var keys = ["customState"];
  return obj && !!keys.find(function(k) {
    return obj.hasOwnProperty(k);
  });
}
function isCognitoHostedOpts(oauth) {
  return oauth.redirectSignIn !== void 0;
}
var AuthErrorTypes;
(function(AuthErrorTypes2) {
  AuthErrorTypes2["NoConfig"] = "noConfig";
  AuthErrorTypes2["MissingAuthConfig"] = "missingAuthConfig";
  AuthErrorTypes2["EmptyUsername"] = "emptyUsername";
  AuthErrorTypes2["InvalidUsername"] = "invalidUsername";
  AuthErrorTypes2["EmptyPassword"] = "emptyPassword";
  AuthErrorTypes2["EmptyCode"] = "emptyCode";
  AuthErrorTypes2["SignUpError"] = "signUpError";
  AuthErrorTypes2["NoMFA"] = "noMFA";
  AuthErrorTypes2["InvalidMFA"] = "invalidMFA";
  AuthErrorTypes2["EmptyChallengeResponse"] = "emptyChallengeResponse";
  AuthErrorTypes2["NoUserSession"] = "noUserSession";
  AuthErrorTypes2["Default"] = "default";
  AuthErrorTypes2["DeviceConfig"] = "deviceConfig";
  AuthErrorTypes2["NetworkError"] = "networkError";
  AuthErrorTypes2["AutoSignInError"] = "autoSignInError";
})(AuthErrorTypes || (AuthErrorTypes = {}));
function isUsernamePasswordOpts(obj) {
  return !!obj.username;
}
var GRAPHQL_AUTH_MODE;
(function(GRAPHQL_AUTH_MODE2) {
  GRAPHQL_AUTH_MODE2["API_KEY"] = "API_KEY";
  GRAPHQL_AUTH_MODE2["AWS_IAM"] = "AWS_IAM";
  GRAPHQL_AUTH_MODE2["OPENID_CONNECT"] = "OPENID_CONNECT";
  GRAPHQL_AUTH_MODE2["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
  GRAPHQL_AUTH_MODE2["AWS_LAMBDA"] = "AWS_LAMBDA";
})(GRAPHQL_AUTH_MODE || (GRAPHQL_AUTH_MODE = {}));

// node_modules/@aws-amplify/core/lib-esm/Util/Constants.js
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256e3;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
  "ResourceNotFoundException",
  "InvalidSequenceTokenException"
];

// node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE2) {
  LOG_TYPE2["DEBUG"] = "DEBUG";
  LOG_TYPE2["ERROR"] = "ERROR";
  LOG_TYPE2["INFO"] = "INFO";
  LOG_TYPE2["WARN"] = "WARN";
  LOG_TYPE2["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
var ConsoleLogger = (
  /** @class */
  function() {
    function ConsoleLogger2(name, level) {
      if (level === void 0) {
        level = LOG_TYPE.WARN;
      }
      this.name = name;
      this.level = level;
      this._pluggables = [];
    }
    ConsoleLogger2.prototype._padding = function(n) {
      return n < 10 ? "0" + n : "" + n;
    };
    ConsoleLogger2.prototype._ts = function() {
      var dt = /* @__PURE__ */ new Date();
      return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") + "." + dt.getMilliseconds();
    };
    ConsoleLogger2.prototype.configure = function(config) {
      if (!config)
        return this._config;
      this._config = config;
      return this._config;
    };
    ConsoleLogger2.prototype._log = function(type) {
      var e_1, _a;
      var msg = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        msg[_i - 1] = arguments[_i];
      }
      var logger_level_name = this.level;
      if (ConsoleLogger2.LOG_LEVEL) {
        logger_level_name = ConsoleLogger2.LOG_LEVEL;
      }
      if (typeof window !== "undefined" && window.LOG_LEVEL) {
        logger_level_name = window.LOG_LEVEL;
      }
      var logger_level = LOG_LEVELS[logger_level_name];
      var type_level = LOG_LEVELS[type];
      if (!(type_level >= logger_level)) {
        return;
      }
      var log = console.log.bind(console);
      if (type === LOG_TYPE.ERROR && console.error) {
        log = console.error.bind(console);
      }
      if (type === LOG_TYPE.WARN && console.warn) {
        log = console.warn.bind(console);
      }
      var prefix = "[".concat(type, "] ").concat(this._ts(), " ").concat(this.name);
      var message = "";
      if (msg.length === 1 && typeof msg[0] === "string") {
        message = "".concat(prefix, " - ").concat(msg[0]);
        log(message);
      } else if (msg.length === 1) {
        message = "".concat(prefix, " ").concat(msg[0]);
        log(prefix, msg[0]);
      } else if (typeof msg[0] === "string") {
        var obj = msg.slice(1);
        if (obj.length === 1) {
          obj = obj[0];
        }
        message = "".concat(prefix, " - ").concat(msg[0], " ").concat(obj);
        log("".concat(prefix, " - ").concat(msg[0]), obj);
      } else {
        message = "".concat(prefix, " ").concat(msg);
        log(prefix, msg);
      }
      try {
        for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {
          var plugin = _c.value;
          var logEvent = { message, timestamp: Date.now() };
          plugin.pushLogs([logEvent]);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    ConsoleLogger2.prototype.log = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spreadArray([LOG_TYPE.INFO], __read2(msg), false));
    };
    ConsoleLogger2.prototype.info = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spreadArray([LOG_TYPE.INFO], __read2(msg), false));
    };
    ConsoleLogger2.prototype.warn = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spreadArray([LOG_TYPE.WARN], __read2(msg), false));
    };
    ConsoleLogger2.prototype.error = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spreadArray([LOG_TYPE.ERROR], __read2(msg), false));
    };
    ConsoleLogger2.prototype.debug = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spreadArray([LOG_TYPE.DEBUG], __read2(msg), false));
    };
    ConsoleLogger2.prototype.verbose = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spreadArray([LOG_TYPE.VERBOSE], __read2(msg), false));
    };
    ConsoleLogger2.prototype.addPluggable = function(pluggable) {
      if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
        this._pluggables.push(pluggable);
        pluggable.configure(this._config);
      }
    };
    ConsoleLogger2.prototype.listPluggables = function() {
      return this._pluggables;
    };
    ConsoleLogger2.LOG_LEVEL = null;
    return ConsoleLogger2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/Amplify.js
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var logger = new ConsoleLogger("Amplify");
var AmplifyClass = (
  /** @class */
  function() {
    function AmplifyClass2() {
      this._components = [];
      this._config = {};
      this._modules = {};
      this.Auth = null;
      this.Analytics = null;
      this.API = null;
      this.Credentials = null;
      this.Storage = null;
      this.I18n = null;
      this.Cache = null;
      this.PubSub = null;
      this.Interactions = null;
      this.Pushnotification = null;
      this.UI = null;
      this.XR = null;
      this.Predictions = null;
      this.DataStore = null;
      this.Geo = null;
      this.Notifications = null;
      this.Logger = ConsoleLogger;
      this.ServiceWorker = null;
    }
    AmplifyClass2.prototype.register = function(comp) {
      logger.debug("component registered in amplify", comp);
      this._components.push(comp);
      if (typeof comp.getModuleName === "function") {
        this._modules[comp.getModuleName()] = comp;
        this[comp.getModuleName()] = comp;
      } else {
        logger.debug("no getModuleName method for component", comp);
      }
      comp.configure(this._config);
    };
    AmplifyClass2.prototype.configure = function(config) {
      var _this = this;
      if (!config)
        return this._config;
      this._config = Object.assign(this._config, config);
      logger.debug("amplify config", this._config);
      Object.entries(this._modules).forEach(function(_a) {
        var _b = __read3(_a, 2), Name = _b[0], comp = _b[1];
        Object.keys(comp).forEach(function(property) {
          if (_this._modules[property]) {
            comp[property] = _this._modules[property];
          }
        });
      });
      this._components.map(function(comp) {
        comp.configure(_this._config);
      });
      return this._config;
    };
    AmplifyClass2.prototype.addPluggable = function(pluggable) {
      if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") {
        this._components.map(function(comp) {
          if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") {
            comp.addPluggable(pluggable);
          }
        });
      }
    };
    return AmplifyClass2;
  }()
);
var Amplify = new AmplifyClass();

// node_modules/@aws-amplify/core/lib-esm/Platform/version.js
var version = "5.2.5";

// node_modules/@aws-amplify/core/lib-esm/Platform/index.js
var BASE_USER_AGENT = "aws-amplify/".concat(version);
var Platform = {
  userAgent: "".concat(BASE_USER_AGENT, " js"),
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform.product = navigator.product || "";
  Platform.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform.userAgent = "".concat(BASE_USER_AGENT, " react-native");
      Platform.isReactNative = true;
      break;
    default:
      Platform.userAgent = "".concat(BASE_USER_AGENT, " js");
      Platform.isReactNative = false;
      break;
  }
}
var getAmplifyUserAgent = function(content) {
  return "".concat(Platform.userAgent).concat(content ? content : "");
};

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/browser.js
var logger2 = new ConsoleLogger("ClientDevice_Browser");
function clientInfo() {
  if (typeof window === "undefined") {
    return {};
  }
  return browserClientInfo();
}
function browserClientInfo() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return {};
  }
  var nav = window.navigator;
  if (!nav) {
    logger2.warn("No navigator object available to get browser client info");
    return {};
  }
  var platform = nav.platform, product = nav.product, vendor = nav.vendor, userAgent2 = nav.userAgent, language = nav.language;
  var type = browserType(userAgent2);
  var timezone = browserTimezone();
  return {
    platform,
    make: product || vendor,
    model: type.type,
    version: type.version,
    appVersion: [type.type, type.version].join("/"),
    language,
    timezone
  };
}
function dimension() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return { width: 320, height: 320 };
  }
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
}
function browserTimezone() {
  var tzMatch = /\(([A-Za-z\s].*)\)/.exec((/* @__PURE__ */ new Date()).toString());
  return tzMatch ? tzMatch[1] || "" : "";
}
function browserType(userAgent2) {
  var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent2);
  if (operaMatch) {
    return { type: operaMatch[1], version: operaMatch[2] };
  }
  var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent2);
  if (ieMatch) {
    return { type: ieMatch[1], version: ieMatch[2] };
  }
  var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent2);
  if (cfMatch) {
    return { type: cfMatch[1], version: cfMatch[2] };
  }
  var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent2);
  if (sMatch) {
    return { type: sMatch[1], version: sMatch[2] };
  }
  var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent2);
  if (awkMatch) {
    return { type: awkMatch[1], version: awkMatch[2] };
  }
  var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent2);
  if (anyMatch) {
    return { type: anyMatch[1], version: anyMatch[2] };
  }
  return { type: "", version: "" };
}

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/index.js
var ClientDevice = (
  /** @class */
  function() {
    function ClientDevice2() {
    }
    ClientDevice2.clientInfo = function() {
      return clientInfo();
    };
    ClientDevice2.dimension = function() {
      return dimension();
    };
    return ClientDevice2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/Hub.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var logger3 = new ConsoleLogger("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
  return callback.onHubCapsule !== void 0;
}
var HubClass = (
  /** @class */
  function() {
    function HubClass2(name) {
      this.listeners = [];
      this.patterns = [];
      this.protectedChannels = [
        "core",
        "auth",
        "api",
        "analytics",
        "interactions",
        "pubsub",
        "storage",
        "ui",
        "xr"
      ];
      this.name = name;
    }
    HubClass2.prototype._remove = function(channel, listener) {
      if (channel instanceof RegExp) {
        var pattern_1 = this.patterns.find(function(_a) {
          var pattern = _a.pattern;
          return pattern.source === channel.source;
        });
        if (!pattern_1) {
          logger3.warn("No listeners for ".concat(channel));
          return;
        }
        this.patterns = __spreadArray2([], __read4(this.patterns.filter(function(x) {
          return x !== pattern_1;
        })), false);
      } else {
        var holder = this.listeners[channel];
        if (!holder) {
          logger3.warn("No listeners for ".concat(channel));
          return;
        }
        this.listeners[channel] = __spreadArray2([], __read4(holder.filter(function(_a) {
          var callback = _a.callback;
          return callback !== listener;
        })), false);
      }
    };
    HubClass2.prototype.remove = function(channel, listener) {
      this._remove(channel, listener);
    };
    HubClass2.prototype.dispatch = function(channel, payload, source, ampSymbol) {
      if (source === void 0) {
        source = "";
      }
      if (this.protectedChannels.indexOf(channel) > -1) {
        var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
        if (!hasAccess) {
          logger3.warn("WARNING: ".concat(channel, " is protected and dispatching on it can have unintended consequences"));
        }
      }
      var capsule = {
        channel,
        payload: __assign2({}, payload),
        source,
        patternInfo: []
      };
      try {
        this._toListeners(capsule);
      } catch (e) {
        logger3.error(e);
      }
    };
    HubClass2.prototype.listen = function(channel, callback, listenerName) {
      var _this = this;
      if (listenerName === void 0) {
        listenerName = "noname";
      }
      var cb;
      if (isLegacyCallback(callback)) {
        logger3.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
        cb = callback.onHubCapsule.bind(callback);
      } else if (typeof callback !== "function") {
        throw new Error("No callback supplied to Hub");
      } else {
        cb = callback;
      }
      if (channel instanceof RegExp) {
        this.patterns.push({
          pattern: channel,
          callback: cb
        });
      } else {
        var holder = this.listeners[channel];
        if (!holder) {
          holder = [];
          this.listeners[channel] = holder;
        }
        holder.push({
          name: listenerName,
          callback: cb
        });
      }
      return function() {
        _this._remove(channel, cb);
      };
    };
    HubClass2.prototype._toListeners = function(capsule) {
      var channel = capsule.channel, payload = capsule.payload;
      var holder = this.listeners[channel];
      if (holder) {
        holder.forEach(function(listener) {
          logger3.debug("Dispatching to ".concat(channel, " with "), payload);
          try {
            listener.callback(capsule);
          } catch (e) {
            logger3.error(e);
          }
        });
      }
      if (this.patterns.length > 0) {
        if (!payload.message) {
          logger3.warn("Cannot perform pattern matching without a message key");
          return;
        }
        var payloadStr_1 = payload.message;
        this.patterns.forEach(function(pattern) {
          var match = payloadStr_1.match(pattern.pattern);
          if (match) {
            var _a = __read4(match), groups = _a.slice(1);
            var dispatchingCapsule = __assign2(__assign2({}, capsule), { patternInfo: groups });
            try {
              pattern.callback(dispatchingCapsule);
            } catch (e) {
              logger3.error(e);
            }
          }
        });
      }
    };
    return HubClass2;
  }()
);
var Hub = new HubClass("__default__");

// node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var logger4 = new ConsoleLogger("I18n");
var I18n = (
  /** @class */
  function() {
    function I18n3(options) {
      this._options = null;
      this._lang = null;
      this._dict = {};
      this._options = Object.assign({}, options);
      this._lang = this._options.language;
      if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
        this._lang = window.navigator.language;
      }
      logger4.debug(this._lang);
    }
    I18n3.prototype.setLanguage = function(lang) {
      this._lang = lang;
    };
    I18n3.prototype.get = function(key, defVal) {
      if (defVal === void 0) {
        defVal = void 0;
      }
      if (!this._lang) {
        return typeof defVal !== "undefined" ? defVal : key;
      }
      var lang = this._lang;
      var val = this.getByLanguage(key, lang);
      if (val) {
        return val;
      }
      if (lang.indexOf("-") > 0) {
        val = this.getByLanguage(key, lang.split("-")[0]);
      }
      if (val) {
        return val;
      }
      return typeof defVal !== "undefined" ? defVal : key;
    };
    I18n3.prototype.getByLanguage = function(key, language, defVal) {
      if (defVal === void 0) {
        defVal = null;
      }
      if (!language) {
        return defVal;
      }
      var lang_dict = this._dict[language];
      if (!lang_dict) {
        return defVal;
      }
      return lang_dict[key];
    };
    I18n3.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
      var lang_dict = this._dict[language];
      if (!lang_dict) {
        lang_dict = this._dict[language] = {};
      }
      this._dict[language] = __assign3(__assign3({}, lang_dict), vocabularies);
    };
    I18n3.prototype.putVocabularies = function(vocabularies) {
      var _this = this;
      Object.keys(vocabularies).map(function(key) {
        _this.putVocabulariesForLanguage(key, vocabularies[key]);
      });
    };
    return I18n3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/I18n/index.js
var logger5 = new ConsoleLogger("I18n");
var _config = null;
var _i18n = null;
var I18n2 = (
  /** @class */
  function() {
    function I18n3() {
    }
    I18n3.configure = function(config) {
      logger5.debug("configure I18n");
      if (!config) {
        return _config;
      }
      _config = Object.assign({}, _config, config.I18n || config);
      I18n3.createInstance();
      return _config;
    };
    I18n3.getModuleName = function() {
      return "I18n";
    };
    I18n3.createInstance = function() {
      logger5.debug("create I18n instance");
      if (_i18n) {
        return;
      }
      _i18n = new I18n(_config);
    };
    I18n3.setLanguage = function(lang) {
      I18n3.checkConfig();
      return _i18n.setLanguage(lang);
    };
    I18n3.get = function(key, defVal) {
      if (!I18n3.checkConfig()) {
        return typeof defVal === "undefined" ? key : defVal;
      }
      return _i18n.get(key, defVal);
    };
    I18n3.putVocabulariesForLanguage = function(language, vocabularies) {
      I18n3.checkConfig();
      return _i18n.putVocabulariesForLanguage(language, vocabularies);
    };
    I18n3.putVocabularies = function(vocabularies) {
      I18n3.checkConfig();
      return _i18n.putVocabularies(vocabularies);
    };
    I18n3.checkConfig = function() {
      if (!_i18n) {
        _i18n = new I18n(_config);
      }
      return true;
    };
    return I18n3;
  }()
);
Amplify.register(I18n2);

// node_modules/@aws-amplify/core/lib-esm/JS.js
var makeQuerablePromise = function(promise) {
  if (promise.isResolved)
    return promise;
  var isPending = true;
  var isRejected = false;
  var isFullfilled = false;
  var result = promise.then(function(data) {
    isFullfilled = true;
    isPending = false;
    return data;
  }, function(e) {
    isRejected = true;
    isPending = false;
    throw e;
  });
  result.isFullfilled = function() {
    return isFullfilled;
  };
  result.isPending = function() {
    return isPending;
  };
  result.isRejected = function() {
    return isRejected;
  };
  return result;
};
var isWebWorker = function() {
  if (typeof self === "undefined") {
    return false;
  }
  var selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined";
  var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
  return {
    isBrowser: isBrowser2,
    isNode
  };
};

// node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
var __extends2 = function() {
  var extendStatics8 = function(d, b) {
    extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics8(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics8(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var logger6 = new ConsoleLogger("Util");
var NonRetryableError = (
  /** @class */
  function(_super) {
    __extends2(NonRetryableError3, _super);
    function NonRetryableError3(message) {
      var _this = _super.call(this, message) || this;
      _this.nonRetryable = true;
      return _this;
    }
    return NonRetryableError3;
  }(Error)
);
var isNonRetryableError = function(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, onTerminate) {
  return __awaiter2(this, void 0, void 0, function() {
    var _this = this;
    return __generator2(this, function(_a) {
      if (typeof functionToRetry !== "function") {
        throw Error("functionToRetry must be a function");
      }
      return [2, new Promise(function(resolve, reject) {
        return __awaiter2(_this, void 0, void 0, function() {
          var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;
          return __generator2(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                attempt = 0;
                terminated = false;
                wakeUp = function() {
                };
                onTerminate && onTerminate.then(function() {
                  terminated = true;
                  clearTimeout(timeout);
                  wakeUp();
                });
                _loop_1 = function() {
                  var _b, _c, err_1, retryIn_1;
                  return __generator2(this, function(_d) {
                    switch (_d.label) {
                      case 0:
                        attempt++;
                        logger6.debug("".concat(functionToRetry.name, " attempt #").concat(attempt, " with this vars: ").concat(JSON.stringify(args)));
                        _d.label = 1;
                      case 1:
                        _d.trys.push([1, 3, , 7]);
                        _b = {};
                        _c = resolve;
                        return [4, functionToRetry.apply(void 0, __spreadArray3([], __read5(args), false))];
                      case 2:
                        return [2, (_b.value = _c.apply(void 0, [_d.sent()]), _b)];
                      case 3:
                        err_1 = _d.sent();
                        lastError = err_1;
                        logger6.debug("error on ".concat(functionToRetry.name), err_1);
                        if (isNonRetryableError(err_1)) {
                          logger6.debug("".concat(functionToRetry.name, " non retryable error"), err_1);
                          return [2, { value: reject(err_1) }];
                        }
                        retryIn_1 = delayFn(attempt, args, err_1);
                        logger6.debug("".concat(functionToRetry.name, " retrying in ").concat(retryIn_1, " ms"));
                        if (!(retryIn_1 === false || terminated))
                          return [3, 4];
                        return [2, { value: reject(err_1) }];
                      case 4:
                        return [4, new Promise(function(r) {
                          wakeUp = r;
                          timeout = setTimeout(wakeUp, retryIn_1);
                        })];
                      case 5:
                        _d.sent();
                        _d.label = 6;
                      case 6:
                        return [3, 7];
                      case 7:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                };
                _a2.label = 1;
              case 1:
                if (!!terminated)
                  return [3, 3];
                return [5, _loop_1()];
              case 2:
                state_1 = _a2.sent();
                if (typeof state_1 === "object")
                  return [2, state_1.value];
                return [3, 1];
              case 3:
                reject(lastError);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      })];
    });
  });
}
var MAX_DELAY_MS = 5 * 60 * 1e3;
function jitteredBackoff(maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs, onTerminate) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);
};

// node_modules/@aws-amplify/core/lib-esm/Util/Mutex.js
var Mutex = (
  /** @class */
  function() {
    function Mutex2() {
      this._queue = [];
      this._pending = false;
    }
    Mutex2.prototype.isLocked = function() {
      return this._pending;
    };
    Mutex2.prototype.acquire = function() {
      var _this = this;
      var ticket = new Promise(function(resolve) {
        return _this._queue.push(resolve);
      });
      if (!this._pending) {
        this._dispatchNext();
      }
      return ticket;
    };
    Mutex2.prototype.runExclusive = function(callback) {
      return this.acquire().then(function(release) {
        var result;
        try {
          result = callback();
        } catch (e) {
          release();
          throw e;
        }
        return Promise.resolve(result).then(function(x) {
          return release(), x;
        }, function(e) {
          release();
          throw e;
        });
      });
    };
    Mutex2.prototype._dispatchNext = function() {
      if (this._queue.length > 0) {
        this._pending = true;
        this._queue.shift()(this._dispatchNext.bind(this));
      } else {
        this._pending = false;
      }
    };
    return Mutex2;
  }()
);

// node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable = __toESM(require_zen_observable());
var Observable = import_zen_observable.default;
var bundle_esm_default = Observable;

// node_modules/@aws-amplify/core/lib-esm/Util/Reachability.js
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ReachabilityNavigator = (
  /** @class */
  function() {
    function ReachabilityNavigator2() {
    }
    ReachabilityNavigator2.prototype.networkMonitor = function(netInfo) {
      if (browserOrNode().isNode) {
        return bundle_esm_default.from([{ online: true }]);
      }
      var globalObj = isWebWorker() ? self : window;
      return new bundle_esm_default(function(observer) {
        observer.next({ online: globalObj.navigator.onLine });
        var notifyOnline = function() {
          return observer.next({ online: true });
        };
        var notifyOffline = function() {
          return observer.next({ online: false });
        };
        globalObj.addEventListener("online", notifyOnline);
        globalObj.addEventListener("offline", notifyOffline);
        ReachabilityNavigator2._observers.push(observer);
        return function() {
          globalObj.removeEventListener("online", notifyOnline);
          globalObj.removeEventListener("offline", notifyOffline);
          ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
            return _observer !== observer;
          });
        };
      });
    };
    ReachabilityNavigator2._observerOverride = function(status) {
      var e_1, _a;
      var _loop_1 = function(observer2) {
        if (observer2.closed) {
          ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
            return _observer !== observer2;
          });
          return "continue";
        }
        observer2.next(status);
      };
      try {
        for (var _b = __values2(ReachabilityNavigator2._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
          var observer = _c.value;
          _loop_1(observer);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    ReachabilityNavigator2._observers = [];
    return ReachabilityNavigator2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/Util/DateUtils.js
var __read6 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;
var DateUtils = {
  /**
   * Milliseconds to offset the date to compensate for clock skew between device & services
   */
  clockOffset: 0,
  getDateWithClockOffset: function() {
    if (DateUtils.clockOffset) {
      return new Date((/* @__PURE__ */ new Date()).getTime() + DateUtils.clockOffset);
    } else {
      return /* @__PURE__ */ new Date();
    }
  },
  /**
   * @returns {number} Clock offset in milliseconds
   */
  getClockOffset: function() {
    return DateUtils.clockOffset;
  },
  getHeaderStringFromDate: function(date) {
    if (date === void 0) {
      date = DateUtils.getDateWithClockOffset();
    }
    return date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  },
  getDateFromHeaderString: function(header) {
    var _a = __read6(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
  },
  isClockSkewed: function(serverDate) {
    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
  },
  isClockSkewError: function(error) {
    if (!error.response || !error.response.headers) {
      return false;
    }
    var headers = error.response.headers;
    return Boolean(["BadRequestException", "InvalidSignatureException"].includes(headers["x-amzn-errortype"]) && (headers.date || headers.Date));
  },
  /**
   * @param {number} offset Clock offset in milliseconds
   */
  setClockOffset: function(offset) {
    DateUtils.clockOffset = offset;
  }
};

// node_modules/@aws-amplify/core/lib-esm/Util/StringUtils.js
function urlSafeEncode(str) {
  return str.split("").map(function(char) {
    return char.charCodeAt(0).toString(16).padStart(2, "0");
  }).join("");
}
function urlSafeDecode(hex) {
  return hex.match(/.{2}/g).map(function(char) {
    return String.fromCharCode(parseInt(char, 16));
  }).join("");
}

// node_modules/@aws-amplify/core/lib-esm/Util/BackgroundProcessManager.js
var __extends3 = function() {
  var extendStatics8 = function(d, b) {
    extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics8(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics8(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator3 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __values3 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var BackgroundProcessManager = (
  /** @class */
  function() {
    function BackgroundProcessManager2() {
      this._state = BackgroundProcessManagerState.Open;
      this.jobs = /* @__PURE__ */ new Set();
    }
    BackgroundProcessManager2.prototype.add = function(jobOrDescription, optionalDescription) {
      var job;
      var description;
      if (typeof jobOrDescription === "string") {
        job = void 0;
        description = jobOrDescription;
      } else {
        job = jobOrDescription;
        description = optionalDescription;
      }
      var error = this.closedFailure(description);
      if (error)
        return error;
      if (job === void 0) {
        return this.addHook(description);
      } else if (typeof job === "function") {
        return this.addFunction(job, description);
      } else if (job instanceof BackgroundProcessManager2) {
        return this.addManager(job, description);
      } else {
        throw new Error("If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.");
      }
    };
    BackgroundProcessManager2.prototype.addCleaner = function(clean, description) {
      var _this = this;
      var _a = this.addHook(description), resolve = _a.resolve, onTerminate = _a.onTerminate;
      var proxy = function() {
        return __awaiter3(_this, void 0, void 0, function() {
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, clean()];
              case 1:
                _a2.sent();
                resolve();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      onTerminate.then(proxy);
      return proxy;
    };
    BackgroundProcessManager2.prototype.addFunction = function(job, description) {
      var terminate;
      var onTerminate = new Promise(function(resolve) {
        terminate = resolve;
      });
      var jobResult = job(onTerminate);
      if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === "function") {
        this.registerPromise(jobResult, terminate, description);
      }
      return jobResult;
    };
    BackgroundProcessManager2.prototype.addManager = function(manager, description) {
      var _this = this;
      this.addCleaner(function() {
        return __awaiter3(_this, void 0, void 0, function() {
          return __generator3(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, manager.close()];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      }, description);
    };
    BackgroundProcessManager2.prototype.addHook = function(description) {
      var resolve;
      var reject;
      var promise = new Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      var terminate;
      var onTerminate = new Promise(function(resolveTerminate) {
        terminate = resolveTerminate;
      });
      this.registerPromise(promise, terminate, description);
      return {
        resolve,
        reject,
        onTerminate
      };
    };
    BackgroundProcessManager2.prototype.registerPromise = function(promise, terminate, description) {
      var _this = this;
      var jobEntry = { promise, terminate, description };
      this.jobs.add(jobEntry);
      promise.then(function() {
        _this.jobs.delete(jobEntry);
      }).catch(function() {
        _this.jobs.delete(jobEntry);
      });
    };
    Object.defineProperty(BackgroundProcessManager2.prototype, "length", {
      /**
       * The number of jobs being waited on.
       *
       * We don't use this for anything. It's just informational for the caller,
       * and can be used in logging and testing.
       *
       * @returns the number of jobs.
       */
      get: function() {
        return this.jobs.size;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "state", {
      /**
       * The execution state of the manager. One of:
       *
       * 1. "Open" -> Accepting new jobs
       * 1. "Closing" -> Not accepting new work. Waiting for jobs to complete.
       * 1. "Closed" -> Not accepting new work. All submitted jobs are complete.
       */
      get: function() {
        return this._state;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "pending", {
      /**
       * The registered `description` of all still-pending jobs.
       *
       * @returns descriptions as an array.
       */
      get: function() {
        return Array.from(this.jobs).map(function(job) {
          return job.description;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "isOpen", {
      /**
       * Whether the manager is accepting new jobs.
       */
      get: function() {
        return this._state === BackgroundProcessManagerState.Open;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "isClosing", {
      /**
       * Whether the manager is rejecting new work, but still waiting for
       * submitted work to complete.
       */
      get: function() {
        return this._state === BackgroundProcessManagerState.Closing;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "isClosed", {
      /**
       * Whether the manager is rejecting work and done waiting for submitted
       * work to complete.
       */
      get: function() {
        return this._state === BackgroundProcessManagerState.Closed;
      },
      enumerable: false,
      configurable: true
    });
    BackgroundProcessManager2.prototype.closedFailure = function(description) {
      if (!this.isOpen) {
        return Promise.reject(new BackgroundManagerNotOpenError([
          "The manager is ".concat(this.state, "."),
          'You tried to add "'.concat(description, '".'),
          "Pending jobs: [\n".concat(this.pending.map(function(t) {
            return "    " + t;
          }).join(",\n"), "\n]")
        ].join("\n")));
      }
    };
    BackgroundProcessManager2.prototype.close = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var _a, _b, job;
        var e_1, _c;
        return __generator3(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!this.isOpen)
                return [3, 2];
              this._state = BackgroundProcessManagerState.Closing;
              try {
                for (_a = __values3(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {
                  job = _b.value;
                  try {
                    job.terminate();
                  } catch (error) {
                    console.warn("Failed to send termination signal to job. Error: ".concat(error.message), job);
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_b && !_b.done && (_c = _a.return))
                    _c.call(_a);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function(j) {
                return j.promise;
              }));
              return [4, this._closingPromise];
            case 1:
              _d.sent();
              this._state = BackgroundProcessManagerState.Closed;
              _d.label = 2;
            case 2:
              return [2, this._closingPromise];
          }
        });
      });
    };
    BackgroundProcessManager2.prototype.open = function() {
      return __awaiter3(this, void 0, void 0, function() {
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.isClosing)
                return [3, 2];
              return [4, this.close()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              this._state = BackgroundProcessManagerState.Open;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return BackgroundProcessManager2;
  }()
);
var BackgroundManagerNotOpenError = (
  /** @class */
  function(_super) {
    __extends3(BackgroundManagerNotOpenError2, _super);
    function BackgroundManagerNotOpenError2(message) {
      return _super.call(this, "BackgroundManagerNotOpenError: ".concat(message)) || this;
    }
    return BackgroundManagerNotOpenError2;
  }(Error)
);
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState2) {
  BackgroundProcessManagerState2["Open"] = "Open";
  BackgroundProcessManagerState2["Closing"] = "Closing";
  BackgroundProcessManagerState2["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSignedHeaders.js
var getSignedHeaders = function(headers) {
  return Object.keys(headers).map(function(key) {
    return key.toLowerCase();
  }).sort().join(";");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/constants.js
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var HOST_HEADER = "host";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var KEY_TYPE_IDENTIFIER = "aws4_request";
var SHA256_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var SIGNATURE_IDENTIFIER = "AWS4";
var EMPTY_HASH = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCredentialScope.js
var getCredentialScope = function(date, region, service) {
  return "".concat(date, "/").concat(region, "/").concat(service, "/").concat(KEY_TYPE_IDENTIFIER);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getFormattedDates.js
var getFormattedDates = function(date) {
  var longDate = date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  return {
    longDate,
    shortDate: longDate.slice(0, 8)
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSigningValues.js
var getSigningValues = function(_a) {
  var credentials = _a.credentials, _b = _a.signingDate, signingDate = _b === void 0 ? /* @__PURE__ */ new Date() : _b, signingRegion = _a.signingRegion, signingService = _a.signingService;
  var accessKeyId = credentials.accessKeyId, secretAccessKey = credentials.secretAccessKey, sessionToken = credentials.sessionToken;
  var _c = getFormattedDates(signingDate), longDate = _c.longDate, shortDate = _c.shortDate;
  var credentialScope = getCredentialScope(shortDate, signingRegion, signingService);
  return {
    accessKeyId,
    credentialScope,
    longDate,
    secretAccessKey,
    sessionToken,
    shortDate,
    signingRegion,
    signingService
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/dataHashHelpers.js
var import_sha256_js = __toESM(require_build2());

// node_modules/@aws-sdk/util-hex-encoding/dist/es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (i = 0; i < 256; i++) {
  encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX[i] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i;
}
var encodedByte;
var i;
function toHex(bytes) {
  var out = "";
  for (var i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX[bytes[i]];
  }
  return out;
}

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/dataHashHelpers.js
var getHashedData = function(key, data) {
  var sha256 = new import_sha256_js.Sha256(key);
  sha256.update(data);
  var hashedData = sha256.digestSync();
  return hashedData;
};
var getHashedDataAsHex = function(key, data) {
  var hashedData = getHashedData(key, data);
  return toHex(hashedData);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.js
var __read8 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var getCanonicalHeaders = function(headers) {
  return Object.entries(headers).map(function(_a) {
    var _b;
    var _c = __read8(_a, 2), key = _c[0], value = _c[1];
    return {
      key: key.toLowerCase(),
      value: (_b = value === null || value === void 0 ? void 0 : value.trim().replace(/\s+/g, " ")) !== null && _b !== void 0 ? _b : ""
    };
  }).sort(function(a, b) {
    return a.key < b.key ? -1 : 1;
  }).map(function(entry) {
    return "".concat(entry.key, ":").concat(entry.value, "\n");
  }).join("");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalQueryString.js
var __read9 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var getCanonicalQueryString = function(searchParams) {
  return Array.from(searchParams).sort(function(_a, _b) {
    var _c = __read9(_a, 2), keyA = _c[0], valA = _c[1];
    var _d = __read9(_b, 2), keyB = _d[0], valB = _d[1];
    if (keyA === keyB) {
      return valA < valB ? -1 : 1;
    }
    return keyA < keyB ? -1 : 1;
  }).map(function(_a) {
    var _b = __read9(_a, 2), key = _b[0], val = _b[1];
    return "".concat(escapeUri(key), "=").concat(escapeUri(val));
  }).join("&");
};
var escapeUri = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
  return "%".concat(c.charCodeAt(0).toString(16).toUpperCase());
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalUri.js
var getCanonicalUri = function(pathname) {
  return pathname ? encodeURIComponent(pathname).replace(/%2F/g, "/") : "/";
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getHashedPayload.js
var getHashedPayload = function(body) {
  if (body == null) {
    return EMPTY_HASH;
  }
  if (isSourceData(body)) {
    var hashedData = getHashedDataAsHex(null, body);
    return hashedData;
  }
  return UNSIGNED_PAYLOAD;
};
var isSourceData = function(body) {
  return typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body);
};
var isArrayBuffer = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.js
var getCanonicalRequest = function(_a) {
  var body = _a.body, headers = _a.headers, method = _a.method, url = _a.url;
  return [
    method,
    getCanonicalUri(url.pathname),
    getCanonicalQueryString(url.searchParams),
    getCanonicalHeaders(headers),
    getSignedHeaders(headers),
    getHashedPayload(body)
  ].join("\n");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSigningKey.js
var getSigningKey = function(secretAccessKey, date, region, service) {
  var key = "".concat(SIGNATURE_IDENTIFIER).concat(secretAccessKey);
  var dateKey = getHashedData(key, date);
  var regionKey = getHashedData(dateKey, region);
  var serviceKey = getHashedData(regionKey, service);
  var signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);
  return signingKey;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getStringToSign.js
var getStringToSign = function(date, credentialScope, hashedRequest) {
  return [SHA256_ALGORITHM_IDENTIFIER, date, credentialScope, hashedRequest].join("\n");
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSignature.js
var getSignature = function(request, _a) {
  var credentialScope = _a.credentialScope, longDate = _a.longDate, secretAccessKey = _a.secretAccessKey, shortDate = _a.shortDate, signingRegion = _a.signingRegion, signingService = _a.signingService;
  var canonicalRequest = getCanonicalRequest(request);
  var hashedRequest = getHashedDataAsHex(null, canonicalRequest);
  var stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);
  var signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);
  return signature;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/signRequest.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var signRequest = function(request, options) {
  var signingValues = getSigningValues(options);
  var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;
  var headers = __assign5({}, request.headers);
  headers[HOST_HEADER] = request.url.host;
  headers[AMZ_DATE_HEADER] = longDate;
  if (sessionToken) {
    headers[TOKEN_HEADER] = sessionToken;
  }
  var requestToSign = __assign5(__assign5({}, request), { headers });
  var signature = getSignature(requestToSign, signingValues);
  var credentialEntry = "Credential=".concat(accessKeyId, "/").concat(credentialScope);
  var signedHeadersEntry = "SignedHeaders=".concat(getSignedHeaders(headers));
  var signatureEntry = "Signature=".concat(signature);
  headers[AUTH_HEADER] = "".concat(SHA256_ALGORITHM_IDENTIFIER, " ").concat(credentialEntry, ", ").concat(signedHeadersEntry, ", ").concat(signatureEntry);
  return requestToSign;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/presignUrl.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __read10 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var presignUrl = function(_a, _b) {
  var _c, _d, _e, _f;
  var body = _a.body, _g = _a.method, method = _g === void 0 ? "GET" : _g, url = _a.url;
  var expiration = _b.expiration, options = __rest2(_b, ["expiration"]);
  var signingValues = getSigningValues(options);
  var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;
  var presignedUrl = new URL(url);
  Object.entries(__assign6(__assign6((_c = {}, _c[ALGORITHM_QUERY_PARAM] = SHA256_ALGORITHM_IDENTIFIER, _c[CREDENTIAL_QUERY_PARAM] = "".concat(accessKeyId, "/").concat(credentialScope), _c[AMZ_DATE_QUERY_PARAM] = longDate, _c[SIGNED_HEADERS_QUERY_PARAM] = HOST_HEADER, _c), expiration && (_d = {}, _d[EXPIRES_QUERY_PARAM] = expiration.toString(), _d)), sessionToken && (_e = {}, _e[TOKEN_QUERY_PARAM] = sessionToken, _e))).forEach(function(_a2) {
    var _b2 = __read10(_a2, 2), key = _b2[0], value = _b2[1];
    presignedUrl.searchParams.append(key, value);
  });
  var requestToSign = {
    body,
    headers: (_f = {}, _f[HOST_HEADER] = url.host, _f),
    method,
    url: presignedUrl
  };
  var signature = getSignature(requestToSign, signingValues);
  presignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);
  return presignedUrl;
};

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var IOT_SERVICE_NAME = "iotdevicegateway";
var AWS_ENDPOINT_REGEX = /([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(.cn)?$/;
var Signer = (
  /** @class */
  function() {
    function Signer2() {
    }
    Signer2.sign = function(request, accessInfo, serviceInfo) {
      request.headers = request.headers || {};
      if (request.body && !request.data) {
        throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
      }
      var requestToSign = __assign7(__assign7({}, request), { body: request.data, url: new URL(request.url) });
      var options = getOptions(requestToSign, accessInfo, serviceInfo);
      var signedRequest = signRequest(requestToSign, options);
      signedRequest.url = signedRequest.url.toString();
      signedRequest.headers.Authorization = signedRequest.headers.authorization;
      signedRequest.headers["X-Amz-Security-Token"] = signedRequest.headers["x-amz-security-token"];
      delete signedRequest.headers.authorization;
      delete signedRequest.headers["x-amz-security-token"];
      return signedRequest;
    };
    Signer2.signUrl = function(urlOrRequest, accessInfo, serviceInfo, expiration) {
      var urlToSign = typeof urlOrRequest === "object" ? urlOrRequest.url : urlOrRequest;
      var method = typeof urlOrRequest === "object" ? urlOrRequest.method : "GET";
      var body = typeof urlOrRequest === "object" ? urlOrRequest.body : void 0;
      var presignable = {
        body,
        method,
        url: new URL(urlToSign)
      };
      var options = getOptions(presignable, accessInfo, serviceInfo, expiration);
      var signedUrl = presignUrl(presignable, options);
      if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) {
        signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);
      }
      return signedUrl.toString();
    };
    return Signer2;
  }()
);
var getOptions = function(request, accessInfo, serviceInfo, expiration) {
  var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {}, access_key = _a.access_key, secret_key = _a.secret_key, session_token = _a.session_token;
  var _b = parseServiceInfo(request.url), urlRegion = _b.region, urlService = _b.service;
  var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {}, _d = _c.region, region = _d === void 0 ? urlRegion : _d, _e = _c.service, service = _e === void 0 ? urlService : _e;
  var credentials = __assign7({ accessKeyId: access_key, secretAccessKey: secret_key }, sessionTokenRequiredInSigning(service) ? { sessionToken: session_token } : {});
  return __assign7({ credentials, signingDate: DateUtils.getDateWithClockOffset(), signingRegion: region, signingService: service }, expiration && { expiration });
};
var parseServiceInfo = function(url) {
  var _a;
  var host = url.host;
  var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];
  var parsed = matched.slice(1, 3);
  if (parsed[1] === "es") {
    parsed = parsed.reverse();
  }
  return {
    service: parsed[0],
    region: parsed[1]
  };
};
var sessionTokenRequiredInSigning = function(service) {
  return service !== IOT_SERVICE_NAME;
};

// node_modules/@aws-amplify/core/lib-esm/parseAWSExports.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var logger7 = new ConsoleLogger("Parser");
var parseAWSExports = function(config) {
  var amplifyConfig = {};
  if (config["aws_mobile_analytics_app_id"]) {
    var Analytics = {
      AWSPinpoint: {
        appId: config["aws_mobile_analytics_app_id"],
        region: config["aws_mobile_analytics_app_region"]
      }
    };
    amplifyConfig.Analytics = Analytics;
  }
  if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) {
    amplifyConfig.Auth = {
      userPoolId: config["aws_user_pools_id"],
      userPoolWebClientId: config["aws_user_pools_web_client_id"],
      region: config["aws_cognito_region"],
      identityPoolId: config["aws_cognito_identity_pool_id"],
      identityPoolRegion: config["aws_cognito_region"],
      mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
      signUpVerificationMethod: config["aws_cognito_sign_up_verification_method"] || "code"
    };
  }
  var storageConfig;
  if (config["aws_user_files_s3_bucket"]) {
    storageConfig = {
      AWSS3: {
        bucket: config["aws_user_files_s3_bucket"],
        region: config["aws_user_files_s3_bucket_region"],
        dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
      }
    };
  } else {
    storageConfig = config ? config.Storage || config : {};
  }
  if (config["Logging"]) {
    amplifyConfig.Logging = __assign8(__assign8({}, config["Logging"]), { region: config["aws_project_region"] });
  }
  if (config["geo"]) {
    amplifyConfig.Geo = Object.assign({}, config.geo);
    if (config.geo["amazon_location_service"]) {
      amplifyConfig.Geo = {
        AmazonLocationService: config.geo["amazon_location_service"]
      };
    }
  }
  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
  amplifyConfig.Storage = Object.assign({}, storageConfig);
  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
  logger7.debug("parse config", config, "to amplifyconfig", amplifyConfig);
  return amplifyConfig;
};

// node_modules/tslib/tslib.es6.mjs
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends5(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign9 = function() {
  __assign9 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
function __awaiter5(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator5(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read11(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/package.json
var package_default = {
  name: "@aws-sdk/client-cloudwatch-logs",
  description: "AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    test: "exit 0",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cloudwatch-logs"
  }
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build5());

// node_modules/@aws-sdk/fetch-http-handler/node_modules/tslib/tslib.es6.js
function __awaiter9(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator9(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values8(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpResponse.js
var HttpResponse = (
  /** @class */
  function() {
    function HttpResponse2(options) {
      this.statusCode = options.statusCode;
      this.headers = options.headers || {};
      this.body = options.body;
    }
    HttpResponse2.isInstance = function(response) {
      if (!response)
        return false;
      var resp = response;
      return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    };
    return HttpResponse2;
  }()
);

// node_modules/@aws-sdk/protocol-http/node_modules/tslib/tslib.es6.js
var __assign13 = function() {
  __assign13 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
function __read15(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread5() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read15(arguments[i]));
  return ar;
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpRequest.js
var HttpRequest = (
  /** @class */
  function() {
    function HttpRequest2(options) {
      this.method = options.method || "GET";
      this.hostname = options.hostname || "localhost";
      this.port = options.port;
      this.query = options.query || {};
      this.headers = options.headers || {};
      this.body = options.body;
      this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
      this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
    }
    HttpRequest2.isInstance = function(request) {
      if (!request)
        return false;
      var req = request;
      return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    };
    HttpRequest2.prototype.clone = function() {
      var cloned = new HttpRequest2(__assign13(__assign13({}, this), { headers: __assign13({}, this.headers) }));
      if (cloned.query)
        cloned.query = cloneQuery(cloned.query);
      return cloned;
    };
    return HttpRequest2;
  }()
);
function cloneQuery(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign13(__assign13({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread5(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/querystring-builder/node_modules/tslib/tslib.es6.js
function __values9(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

// node_modules/@aws-sdk/util-uri-escape/dist/es/escape-uri.js
var escapeUri2 = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode2);
};
var hexEncode2 = function(c) {
  return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/querystring-builder/dist/es/index.js
function buildQueryString(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values9(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri2(key);
      if (Array.isArray(value)) {
        for (var i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(key + "=" + escapeUri2(value[i]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri2(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/request-timeout.js
function requestTimeout(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/fetch-http-handler.js
var FetchHttpHandler = (
  /** @class */
  function() {
    function FetchHttpHandler2(_a) {
      var _b = _a === void 0 ? {} : _a, requestTimeout2 = _b.requestTimeout;
      this.requestTimeout = requestTimeout2;
    }
    FetchHttpHandler2.prototype.destroy = function() {
    };
    FetchHttpHandler2.prototype.handle = function(request, _a) {
      var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
      var requestTimeoutInMs = this.requestTimeout;
      if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
        var abortError = new Error("Request aborted");
        abortError.name = "AbortError";
        return Promise.reject(abortError);
      }
      var path = request.path;
      if (request.query) {
        var queryString = buildQueryString(request.query);
        if (queryString) {
          path += "?" + queryString;
        }
      }
      var port = request.port, method = request.method;
      var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
      var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
      var requestOptions = {
        body,
        headers: new Headers(request.headers),
        method
      };
      if (typeof AbortController !== "undefined") {
        requestOptions["signal"] = abortSignal;
      }
      var fetchRequest = new Request(url, requestOptions);
      var raceOfPromises = [
        fetch(fetchRequest).then(function(response) {
          var e_1, _a2;
          var fetchHeaders = response.headers;
          var transformedHeaders = {};
          try {
            for (var _b2 = __values8(fetchHeaders.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
              var pair = _c.value;
              transformedHeaders[pair[0]] = pair[1];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b2.return))
                _a2.call(_b2);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          var hasReadableStream = response.body !== void 0;
          if (!hasReadableStream) {
            return response.blob().then(function(body2) {
              return {
                response: new HttpResponse({
                  headers: transformedHeaders,
                  statusCode: response.status,
                  body: body2
                })
              };
            });
          }
          return {
            response: new HttpResponse({
              headers: transformedHeaders,
              statusCode: response.status,
              body: response.body
            })
          };
        }),
        requestTimeout(requestTimeoutInMs)
      ];
      if (abortSignal) {
        raceOfPromises.push(new Promise(function(resolve, reject) {
          abortSignal.onabort = function() {
            var abortError2 = new Error("Request aborted");
            abortError2.name = "AbortError";
            reject(abortError2);
          };
        }));
      }
      return Promise.race(raceOfPromises);
    };
    return FetchHttpHandler2;
  }()
);

// node_modules/@aws-sdk/util-base64-browser/dist/es/index.js
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for (i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  alphabetByEncoding[char] = i;
  alphabetByValue[i] = char;
}
var char;
var i;
var start;
var limit;
for (i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
  char = String.fromCharCode(i + start);
  index = i + 26;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
var start;
var limit;
for (i = 0; i < 10; i++) {
  alphabetByEncoding[i.toString(10)] = i + 52;
  char = i.toString(10);
  index = i + 52;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i;
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i = 0; i < input.length; i += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = i + 3; j <= limit; j++) {
      if (input[j] !== "=") {
        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
        bitLength += bitsPerLetter;
      } else {
        bits >>= bitsPerLetter;
      }
    }
    var chunkOffset = i / 4 * 3;
    bits >>= bitLength % bitsPerByte;
    var byteLength = Math.floor(bitLength / bitsPerByte);
    for (var k = 0; k < byteLength; k++) {
      var offset = (byteLength - k - 1) * bitsPerByte;
      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase64(input) {
  var str = "";
  for (var i = 0; i < input.length; i += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
      bits |= input[j] << (limit - j - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (var k = 1; k <= bitClusterCount; k++) {
      var offset = (bitClusterCount - k) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/stream-collector.js
var streamCollector = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob(stream);
  }
  return collectStream(stream);
};
function collectBlob(blob) {
  return __awaiter9(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator9(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase64(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase64(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream(stream) {
  return __awaiter9(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator9(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase64(blob) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/invalid-dependency/dist/es/invalidProvider.js
var invalidProvider = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/middleware-retry/node_modules/tslib/tslib.es6.js
var __assign14 = function() {
  __assign14 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
function __awaiter10(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator10(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read16(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread6() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read16(arguments[i]));
  return ar;
}

// node_modules/@aws-sdk/middleware-retry/dist/es/retryMiddleware.js
var retryMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter10(void 0, void 0, void 0, function() {
        var _a;
        return __generator10(this, function(_b) {
          if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode)
            context.userAgent = __spread6(context.userAgent || [], [["cfg/retry-mode", options.retryStrategy.mode]]);
          return [2, options.retryStrategy.retry(next, args)];
        });
      });
    };
  };
};
var retryMiddlewareOptions = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/constants.js
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

// node_modules/@aws-sdk/service-error-classification/dist/es/constants.js
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

// node_modules/@aws-sdk/service-error-classification/dist/es/index.js
var isRetryableByTrait = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError = function(error) {
  return CLOCK_SKEW_ERROR_CODES.includes(error.name);
};
var isThrottlingError = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var import_uuid = __toESM(require_uuid());

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultRetryQuota.js
var getDefaultRetryQuota = function(initialRetryTokens) {
  var MAX_CAPACITY = initialRetryTokens;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/middleware-retry/dist/es/delayDecider.js
var defaultDelayDecider = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryDecider.js
var defaultRetryDecider = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = "standard";
var StandardRetryStrategy = (
  /** @class */
  function() {
    function StandardRetryStrategy2(maxAttemptsProvider, options) {
      var _a, _b, _c;
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = DEFAULT_RETRY_MODE;
      this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
      this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
      this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
    }
    StandardRetryStrategy2.prototype.shouldRetry = function(error, attempts, maxAttempts) {
      return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    };
    StandardRetryStrategy2.prototype.getMaxAttempts = function() {
      return __awaiter10(this, void 0, void 0, function() {
        var maxAttempts, error_1;
        return __generator10(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.maxAttemptsProvider()];
            case 1:
              maxAttempts = _a.sent();
              return [3, 3];
            case 2:
              error_1 = _a.sent();
              maxAttempts = DEFAULT_MAX_ATTEMPTS;
              return [3, 3];
            case 3:
              return [2, maxAttempts];
          }
        });
      });
    };
    StandardRetryStrategy2.prototype.retry = function(next, args) {
      return __awaiter10(this, void 0, void 0, function() {
        var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
        return __generator10(this, function(_a) {
          switch (_a.label) {
            case 0:
              attempts = 0;
              totalDelay = 0;
              return [4, this.getMaxAttempts()];
            case 1:
              maxAttempts = _a.sent();
              request = args.request;
              if (HttpRequest.isInstance(request)) {
                request.headers[INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
              }
              _loop_1 = function() {
                var _a2, response, output, err_1, delay_1;
                return __generator10(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      _b.trys.push([0, 2, , 5]);
                      if (HttpRequest.isInstance(request)) {
                        request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                      }
                      return [4, next(args)];
                    case 1:
                      _a2 = _b.sent(), response = _a2.response, output = _a2.output;
                      this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                      output.$metadata.attempts = attempts + 1;
                      output.$metadata.totalRetryDelay = totalDelay;
                      return [2, { value: { response, output } }];
                    case 2:
                      err_1 = _b.sent();
                      attempts++;
                      if (!this_1.shouldRetry(err_1, attempts, maxAttempts))
                        return [3, 4];
                      retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                      delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                      totalDelay += delay_1;
                      return [4, new Promise(function(resolve) {
                        return setTimeout(resolve, delay_1);
                      })];
                    case 3:
                      _b.sent();
                      return [2, "continue"];
                    case 4:
                      if (!err_1.$metadata) {
                        err_1.$metadata = {};
                      }
                      err_1.$metadata.attempts = attempts;
                      err_1.$metadata.totalRetryDelay = totalDelay;
                      throw err_1;
                    case 5:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              };
              this_1 = this;
              _a.label = 2;
            case 2:
              if (false)
                return [3, 4];
              return [5, _loop_1()];
            case 3:
              state_1 = _a.sent();
              if (typeof state_1 === "object")
                return [2, state_1.value];
              return [3, 2];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return StandardRetryStrategy2;
  }()
);

// node_modules/@aws-sdk/middleware-retry/dist/es/configurations.js
var resolveRetryConfig = function(input) {
  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
  return __assign14(__assign14({}, input), { maxAttempts, retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts) });
};
var normalizeMaxAttempts = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/util-body-length-browser/dist/es/index.js
function calculateBodyLength(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i = len - 1; i >= 0; i--) {
      var code = body.charCodeAt(i);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/@aws-sdk/util-user-agent-browser/node_modules/tslib/tslib.es6.js
function __awaiter11(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator11(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/bowser/src/constants.js
var BROWSER_ALIASES_MAP = {
  "Amazon Silk": "amazon_silk",
  "Android Browser": "android",
  Bada: "bada",
  BlackBerry: "blackberry",
  Chrome: "chrome",
  Chromium: "chromium",
  Electron: "electron",
  Epiphany: "epiphany",
  Firefox: "firefox",
  Focus: "focus",
  Generic: "generic",
  "Google Search": "google_search",
  Googlebot: "googlebot",
  "Internet Explorer": "ie",
  "K-Meleon": "k_meleon",
  Maxthon: "maxthon",
  "Microsoft Edge": "edge",
  "MZ Browser": "mz",
  "NAVER Whale Browser": "naver",
  Opera: "opera",
  "Opera Coast": "opera_coast",
  PhantomJS: "phantomjs",
  Puffin: "puffin",
  QupZilla: "qupzilla",
  QQ: "qq",
  QQLite: "qqlite",
  Safari: "safari",
  Sailfish: "sailfish",
  "Samsung Internet for Android": "samsung_internet",
  SeaMonkey: "seamonkey",
  Sleipnir: "sleipnir",
  Swing: "swing",
  Tizen: "tizen",
  "UC Browser": "uc",
  Vivaldi: "vivaldi",
  "WebOS Browser": "webos",
  WeChat: "wechat",
  "Yandex Browser": "yandex",
  Roku: "roku"
};
var BROWSER_MAP = {
  amazon_silk: "Amazon Silk",
  android: "Android Browser",
  bada: "Bada",
  blackberry: "BlackBerry",
  chrome: "Chrome",
  chromium: "Chromium",
  electron: "Electron",
  epiphany: "Epiphany",
  firefox: "Firefox",
  focus: "Focus",
  generic: "Generic",
  googlebot: "Googlebot",
  google_search: "Google Search",
  ie: "Internet Explorer",
  k_meleon: "K-Meleon",
  maxthon: "Maxthon",
  edge: "Microsoft Edge",
  mz: "MZ Browser",
  naver: "NAVER Whale Browser",
  opera: "Opera",
  opera_coast: "Opera Coast",
  phantomjs: "PhantomJS",
  puffin: "Puffin",
  qupzilla: "QupZilla",
  qq: "QQ Browser",
  qqlite: "QQ Browser Lite",
  safari: "Safari",
  sailfish: "Sailfish",
  samsung_internet: "Samsung Internet for Android",
  seamonkey: "SeaMonkey",
  sleipnir: "Sleipnir",
  swing: "Swing",
  tizen: "Tizen",
  uc: "UC Browser",
  vivaldi: "Vivaldi",
  webos: "WebOS Browser",
  wechat: "WeChat",
  yandex: "Yandex Browser"
};
var PLATFORMS_MAP = {
  tablet: "tablet",
  mobile: "mobile",
  desktop: "desktop",
  tv: "tv"
};
var OS_MAP = {
  WindowsPhone: "Windows Phone",
  Windows: "Windows",
  MacOS: "macOS",
  iOS: "iOS",
  Android: "Android",
  WebOS: "WebOS",
  BlackBerry: "BlackBerry",
  Bada: "Bada",
  Tizen: "Tizen",
  Linux: "Linux",
  ChromeOS: "Chrome OS",
  PlayStation4: "PlayStation 4",
  Roku: "Roku"
};
var ENGINE_MAP = {
  EdgeHTML: "EdgeHTML",
  Blink: "Blink",
  Trident: "Trident",
  Presto: "Presto",
  Gecko: "Gecko",
  WebKit: "WebKit"
};

// node_modules/bowser/src/utils.js
var Utils = class _Utils {
  /**
   * Get first matched item for a string
   * @param {RegExp} regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */
  static getFirstMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 0 && match[1] || "";
  }
  /**
   * Get second matched item for a string
   * @param regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */
  static getSecondMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 1 && match[2] || "";
  }
  /**
   * Match a regexp and return a constant or undefined
   * @param {RegExp} regexp
   * @param {String} ua
   * @param {*} _const Any const that will be returned if regexp matches the string
   * @return {*}
   */
  static matchAndReturnConst(regexp, ua, _const) {
    if (regexp.test(ua)) {
      return _const;
    }
    return void 0;
  }
  static getWindowsVersionName(version3) {
    switch (version3) {
      case "NT":
        return "NT";
      case "XP":
        return "XP";
      case "NT 5.0":
        return "2000";
      case "NT 5.1":
        return "XP";
      case "NT 5.2":
        return "2003";
      case "NT 6.0":
        return "Vista";
      case "NT 6.1":
        return "7";
      case "NT 6.2":
        return "8";
      case "NT 6.3":
        return "8.1";
      case "NT 10.0":
        return "10";
      default:
        return void 0;
    }
  }
  /**
   * Get macOS version name
   *    10.5 - Leopard
   *    10.6 - Snow Leopard
   *    10.7 - Lion
   *    10.8 - Mountain Lion
   *    10.9 - Mavericks
   *    10.10 - Yosemite
   *    10.11 - El Capitan
   *    10.12 - Sierra
   *    10.13 - High Sierra
   *    10.14 - Mojave
   *    10.15 - Catalina
   *
   * @example
   *   getMacOSVersionName("10.14") // 'Mojave'
   *
   * @param  {string} version
   * @return {string} versionName
   */
  static getMacOSVersionName(version3) {
    const v = version3.split(".").splice(0, 2).map((s) => parseInt(s, 10) || 0);
    v.push(0);
    if (v[0] !== 10)
      return void 0;
    switch (v[1]) {
      case 5:
        return "Leopard";
      case 6:
        return "Snow Leopard";
      case 7:
        return "Lion";
      case 8:
        return "Mountain Lion";
      case 9:
        return "Mavericks";
      case 10:
        return "Yosemite";
      case 11:
        return "El Capitan";
      case 12:
        return "Sierra";
      case 13:
        return "High Sierra";
      case 14:
        return "Mojave";
      case 15:
        return "Catalina";
      default:
        return void 0;
    }
  }
  /**
   * Get Android version name
   *    1.5 - Cupcake
   *    1.6 - Donut
   *    2.0 - Eclair
   *    2.1 - Eclair
   *    2.2 - Froyo
   *    2.x - Gingerbread
   *    3.x - Honeycomb
   *    4.0 - Ice Cream Sandwich
   *    4.1 - Jelly Bean
   *    4.4 - KitKat
   *    5.x - Lollipop
   *    6.x - Marshmallow
   *    7.x - Nougat
   *    8.x - Oreo
   *    9.x - Pie
   *
   * @example
   *   getAndroidVersionName("7.0") // 'Nougat'
   *
   * @param  {string} version
   * @return {string} versionName
   */
  static getAndroidVersionName(version3) {
    const v = version3.split(".").splice(0, 2).map((s) => parseInt(s, 10) || 0);
    v.push(0);
    if (v[0] === 1 && v[1] < 5)
      return void 0;
    if (v[0] === 1 && v[1] < 6)
      return "Cupcake";
    if (v[0] === 1 && v[1] >= 6)
      return "Donut";
    if (v[0] === 2 && v[1] < 2)
      return "Eclair";
    if (v[0] === 2 && v[1] === 2)
      return "Froyo";
    if (v[0] === 2 && v[1] > 2)
      return "Gingerbread";
    if (v[0] === 3)
      return "Honeycomb";
    if (v[0] === 4 && v[1] < 1)
      return "Ice Cream Sandwich";
    if (v[0] === 4 && v[1] < 4)
      return "Jelly Bean";
    if (v[0] === 4 && v[1] >= 4)
      return "KitKat";
    if (v[0] === 5)
      return "Lollipop";
    if (v[0] === 6)
      return "Marshmallow";
    if (v[0] === 7)
      return "Nougat";
    if (v[0] === 8)
      return "Oreo";
    if (v[0] === 9)
      return "Pie";
    return void 0;
  }
  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */
  static getVersionPrecision(version3) {
    return version3.split(".").length;
  }
  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1
   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1
   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0
   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1
   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0
   *
   * @param {String} versionA versions versions to compare
   * @param {String} versionB versions versions to compare
   * @param {boolean} [isLoose] enable loose comparison
   * @return {Number} comparison result: -1 when versionA is lower,
   * 1 when versionA is bigger, 0 when both equal
   */
  /* eslint consistent-return: 1 */
  static compareVersions(versionA, versionB, isLoose = false) {
    const versionAPrecision = _Utils.getVersionPrecision(versionA);
    const versionBPrecision = _Utils.getVersionPrecision(versionB);
    let precision = Math.max(versionAPrecision, versionBPrecision);
    let lastPrecision = 0;
    const chunks = _Utils.map([versionA, versionB], (version3) => {
      const delta = precision - _Utils.getVersionPrecision(version3);
      const _version = version3 + new Array(delta + 1).join(".0");
      return _Utils.map(_version.split("."), (chunk) => new Array(20 - chunk.length).join("0") + chunk).reverse();
    });
    if (isLoose) {
      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
    }
    precision -= 1;
    while (precision >= lastPrecision) {
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }
      if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === lastPrecision) {
          return 0;
        }
        precision -= 1;
      } else if (chunks[0][precision] < chunks[1][precision]) {
        return -1;
      }
    }
    return void 0;
  }
  /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */
  static map(arr, iterator) {
    const result = [];
    let i;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i = 0; i < arr.length; i += 1) {
      result.push(iterator(arr[i]));
    }
    return result;
  }
  /**
   * Array::find polyfill
   *
   * @param  {Array} arr
   * @param  {Function} predicate
   * @return {Array}
   */
  static find(arr, predicate) {
    let i;
    let l;
    if (Array.prototype.find) {
      return Array.prototype.find.call(arr, predicate);
    }
    for (i = 0, l = arr.length; i < l; i += 1) {
      const value = arr[i];
      if (predicate(value, i)) {
        return value;
      }
    }
    return void 0;
  }
  /**
   * Object::assign polyfill
   *
   * @param  {Object} obj
   * @param  {Object} ...objs
   * @return {Object}
   */
  static assign(obj, ...assigners) {
    const result = obj;
    let i;
    let l;
    if (Object.assign) {
      return Object.assign(obj, ...assigners);
    }
    for (i = 0, l = assigners.length; i < l; i += 1) {
      const assigner = assigners[i];
      if (typeof assigner === "object" && assigner !== null) {
        const keys = Object.keys(assigner);
        keys.forEach((key) => {
          result[key] = assigner[key];
        });
      }
    }
    return obj;
  }
  /**
   * Get short version/alias for a browser name
   *
   * @example
   *   getBrowserAlias('Microsoft Edge') // edge
   *
   * @param  {string} browserName
   * @return {string}
   */
  static getBrowserAlias(browserName) {
    return BROWSER_ALIASES_MAP[browserName];
  }
  /**
   * Get short version/alias for a browser name
   *
   * @example
   *   getBrowserAlias('edge') // Microsoft Edge
   *
   * @param  {string} browserAlias
   * @return {string}
   */
  static getBrowserTypeByAlias(browserAlias) {
    return BROWSER_MAP[browserAlias] || "";
  }
};

// node_modules/bowser/src/parser-browsers.js
var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
var browsersList = [
  /* Googlebot */
  {
    test: [/googlebot/i],
    describe(ua) {
      const browser = {
        name: "Googlebot"
      };
      const version3 = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  /* Opera < 13.0 */
  {
    test: [/opera/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  /* Opera > 13.0 */
  {
    test: [/opr\/|opios/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version3 = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/SamsungBrowser/i],
    describe(ua) {
      const browser = {
        name: "Samsung Internet for Android"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/Whale/i],
    describe(ua) {
      const browser = {
        name: "NAVER Whale Browser"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/MZBrowser/i],
    describe(ua) {
      const browser = {
        name: "MZ Browser"
      };
      const version3 = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/focus/i],
    describe(ua) {
      const browser = {
        name: "Focus"
      };
      const version3 = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/swing/i],
    describe(ua) {
      const browser = {
        name: "Swing"
      };
      const version3 = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/coast/i],
    describe(ua) {
      const browser = {
        name: "Opera Coast"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/opt\/\d+(?:.?_?\d+)+/i],
    describe(ua) {
      const browser = {
        name: "Opera Touch"
      };
      const version3 = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/yabrowser/i],
    describe(ua) {
      const browser = {
        name: "Yandex Browser"
      };
      const version3 = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/ucbrowser/i],
    describe(ua) {
      const browser = {
        name: "UC Browser"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/Maxthon|mxios/i],
    describe(ua) {
      const browser = {
        name: "Maxthon"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/epiphany/i],
    describe(ua) {
      const browser = {
        name: "Epiphany"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/puffin/i],
    describe(ua) {
      const browser = {
        name: "Puffin"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/sleipnir/i],
    describe(ua) {
      const browser = {
        name: "Sleipnir"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/k-meleon/i],
    describe(ua) {
      const browser = {
        name: "K-Meleon"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/micromessenger/i],
    describe(ua) {
      const browser = {
        name: "WeChat"
      };
      const version3 = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/qqbrowser/i],
    describe(ua) {
      const browser = {
        name: /qqbrowserlite/i.test(ua) ? "QQ Browser Lite" : "QQ Browser"
      };
      const version3 = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/msie|trident/i],
    describe(ua) {
      const browser = {
        name: "Internet Explorer"
      };
      const version3 = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/\sedg\//i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version3 = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/edg([ea]|ios)/i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version3 = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/vivaldi/i],
    describe(ua) {
      const browser = {
        name: "Vivaldi"
      };
      const version3 = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/seamonkey/i],
    describe(ua) {
      const browser = {
        name: "SeaMonkey"
      };
      const version3 = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/sailfish/i],
    describe(ua) {
      const browser = {
        name: "Sailfish"
      };
      const version3 = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/silk/i],
    describe(ua) {
      const browser = {
        name: "Amazon Silk"
      };
      const version3 = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/phantom/i],
    describe(ua) {
      const browser = {
        name: "PhantomJS"
      };
      const version3 = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/slimerjs/i],
    describe(ua) {
      const browser = {
        name: "SlimerJS"
      };
      const version3 = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const browser = {
        name: "BlackBerry"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const browser = {
        name: "WebOS Browser"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/bada/i],
    describe(ua) {
      const browser = {
        name: "Bada"
      };
      const version3 = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/tizen/i],
    describe(ua) {
      const browser = {
        name: "Tizen"
      };
      const version3 = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/qupzilla/i],
    describe(ua) {
      const browser = {
        name: "QupZilla"
      };
      const version3 = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/firefox|iceweasel|fxios/i],
    describe(ua) {
      const browser = {
        name: "Firefox"
      };
      const version3 = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/electron/i],
    describe(ua) {
      const browser = {
        name: "Electron"
      };
      const version3 = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/MiuiBrowser/i],
    describe(ua) {
      const browser = {
        name: "Miui"
      };
      const version3 = Utils.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/chromium/i],
    describe(ua) {
      const browser = {
        name: "Chromium"
      };
      const version3 = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/chrome|crios|crmo/i],
    describe(ua) {
      const browser = {
        name: "Chrome"
      };
      const version3 = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  {
    test: [/GSA/i],
    describe(ua) {
      const browser = {
        name: "Google Search"
      };
      const version3 = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  /* Android Browser */
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const browser = {
        name: "Android Browser"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  /* PlayStation 4 */
  {
    test: [/playstation 4/i],
    describe(ua) {
      const browser = {
        name: "PlayStation 4"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  /* Safari */
  {
    test: [/safari|applewebkit/i],
    describe(ua) {
      const browser = {
        name: "Safari"
      };
      const version3 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version3) {
        browser.version = version3;
      }
      return browser;
    }
  },
  /* Something else */
  {
    test: [/.*/i],
    describe(ua) {
      const regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
      const regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
      const hasDeviceSpec = ua.search("\\(") !== -1;
      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
      return {
        name: Utils.getFirstMatch(regexp, ua),
        version: Utils.getSecondMatch(regexp, ua)
      };
    }
  }
];
var parser_browsers_default = browsersList;

// node_modules/bowser/src/parser-os.js
var parser_os_default = [
  /* Roku */
  {
    test: [/Roku\/DVP/],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
      return {
        name: OS_MAP.Roku,
        version: version3
      };
    }
  },
  /* Windows Phone */
  {
    test: [/windows phone/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.WindowsPhone,
        version: version3
      };
    }
  },
  /* Windows */
  {
    test: [/windows /i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
      const versionName = Utils.getWindowsVersionName(version3);
      return {
        name: OS_MAP.Windows,
        version: version3,
        versionName
      };
    }
  },
  /* Firefox on iPad */
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe(ua) {
      const result = {
        name: OS_MAP.iOS
      };
      const version3 = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, ua);
      if (version3) {
        result.version = version3;
      }
      return result;
    }
  },
  /* macOS */
  {
    test: [/macintosh/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, ".");
      const versionName = Utils.getMacOSVersionName(version3);
      const os = {
        name: OS_MAP.MacOS,
        version: version3
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  /* iOS */
  {
    test: [/(ipod|iphone|ipad)/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, ".");
      return {
        name: OS_MAP.iOS,
        version: version3
      };
    }
  },
  /* Android */
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const version3 = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
      const versionName = Utils.getAndroidVersionName(version3);
      const os = {
        name: OS_MAP.Android,
        version: version3
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  /* WebOS */
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
      const os = {
        name: OS_MAP.WebOS
      };
      if (version3 && version3.length) {
        os.version = version3;
      }
      return os;
    }
  },
  /* BlackBerry */
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || Utils.getFirstMatch(/\bbb(\d+)/i, ua);
      return {
        name: OS_MAP.BlackBerry,
        version: version3
      };
    }
  },
  /* Bada */
  {
    test: [/bada/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Bada,
        version: version3
      };
    }
  },
  /* Tizen */
  {
    test: [/tizen/i],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Tizen,
        version: version3
      };
    }
  },
  /* Linux */
  {
    test: [/linux/i],
    describe() {
      return {
        name: OS_MAP.Linux
      };
    }
  },
  /* Chrome OS */
  {
    test: [/CrOS/],
    describe() {
      return {
        name: OS_MAP.ChromeOS
      };
    }
  },
  /* Playstation 4 */
  {
    test: [/PlayStation 4/],
    describe(ua) {
      const version3 = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.PlayStation4,
        version: version3
      };
    }
  }
];

// node_modules/bowser/src/parser-platforms.js
var parser_platforms_default = [
  /* Googlebot */
  {
    test: [/googlebot/i],
    describe() {
      return {
        type: "bot",
        vendor: "Google"
      };
    }
  },
  /* Huawei */
  {
    test: [/huawei/i],
    describe(ua) {
      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && "Nova";
      const platform = {
        type: PLATFORMS_MAP.mobile,
        vendor: "Huawei"
      };
      if (model) {
        platform.model = model;
      }
      return platform;
    }
  },
  /* Nexus Tablet */
  {
    test: [/nexus\s*(?:7|8|9|10).*/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Nexus"
      };
    }
  },
  /* iPad */
  {
    test: [/ipad/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  /* Firefox on iPad */
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  /* Amazon Kindle Fire */
  {
    test: [/kftt build/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon",
        model: "Kindle Fire HD 7"
      };
    }
  },
  /* Another Amazon Tablet with Silk */
  {
    test: [/silk/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon"
      };
    }
  },
  /* Tablet */
  {
    test: [/tablet(?! pc)/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  /* iPod/iPhone */
  {
    test(parser) {
      const iDevice = parser.test(/ipod|iphone/i);
      const likeIDevice = parser.test(/like (ipod|iphone)/i);
      return iDevice && !likeIDevice;
    },
    describe(ua) {
      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Apple",
        model
      };
    }
  },
  /* Nexus Mobile */
  {
    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Nexus"
      };
    }
  },
  /* Mobile */
  {
    test: [/[^-]mobi/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  /* BlackBerry */
  {
    test(parser) {
      return parser.getBrowserName(true) === "blackberry";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "BlackBerry"
      };
    }
  },
  /* Bada */
  {
    test(parser) {
      return parser.getBrowserName(true) === "bada";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  /* Windows Phone */
  {
    test(parser) {
      return parser.getBrowserName() === "windows phone";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Microsoft"
      };
    }
  },
  /* Android Tablet */
  {
    test(parser) {
      const osMajorVersion = Number(String(parser.getOSVersion()).split(".")[0]);
      return parser.getOSName(true) === "android" && osMajorVersion >= 3;
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  /* Android Mobile */
  {
    test(parser) {
      return parser.getOSName(true) === "android";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  /* desktop */
  {
    test(parser) {
      return parser.getOSName(true) === "macos";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop,
        vendor: "Apple"
      };
    }
  },
  /* Windows */
  {
    test(parser) {
      return parser.getOSName(true) === "windows";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  /* Linux */
  {
    test(parser) {
      return parser.getOSName(true) === "linux";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  /* PlayStation 4 */
  {
    test(parser) {
      return parser.getOSName(true) === "playstation 4";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  },
  /* Roku */
  {
    test(parser) {
      return parser.getOSName(true) === "roku";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  }
];

// node_modules/bowser/src/parser-engines.js
var parser_engines_default = [
  /* EdgeHTML */
  {
    test(parser) {
      return parser.getBrowserName(true) === "microsoft edge";
    },
    describe(ua) {
      const isBlinkBased = /\sedg\//i.test(ua);
      if (isBlinkBased) {
        return {
          name: ENGINE_MAP.Blink
        };
      }
      const version3 = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);
      return {
        name: ENGINE_MAP.EdgeHTML,
        version: version3
      };
    }
  },
  /* Trident */
  {
    test: [/trident/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Trident
      };
      const version3 = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        engine.version = version3;
      }
      return engine;
    }
  },
  /* Presto */
  {
    test(parser) {
      return parser.test(/presto/i);
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Presto
      };
      const version3 = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        engine.version = version3;
      }
      return engine;
    }
  },
  /* Gecko */
  {
    test(parser) {
      const isGecko = parser.test(/gecko/i);
      const likeGecko = parser.test(/like gecko/i);
      return isGecko && !likeGecko;
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Gecko
      };
      const version3 = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        engine.version = version3;
      }
      return engine;
    }
  },
  /* Blink */
  {
    test: [/(apple)?webkit\/537\.36/i],
    describe() {
      return {
        name: ENGINE_MAP.Blink
      };
    }
  },
  /* WebKit */
  {
    test: [/(apple)?webkit/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.WebKit
      };
      const version3 = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);
      if (version3) {
        engine.version = version3;
      }
      return engine;
    }
  }
];

// node_modules/bowser/src/parser.js
var Parser = class {
  /**
   * Create instance of Parser
   *
   * @param {String} UA User-Agent string
   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance
   * improvements if you need to make a more particular parsing
   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}
   *
   * @throw {Error} in case of empty UA String
   *
   * @constructor
   */
  constructor(UA, skipParsing = false) {
    if (UA === void 0 || UA === null || UA === "") {
      throw new Error("UserAgent parameter can't be empty");
    }
    this._ua = UA;
    this.parsedResult = {};
    if (skipParsing !== true) {
      this.parse();
    }
  }
  /**
   * Get UserAgent string of current Parser instance
   * @return {String} User-Agent String of the current <Parser> object
   *
   * @public
   */
  getUA() {
    return this._ua;
  }
  /**
   * Test a UA string for a regexp
   * @param {RegExp} regex
   * @return {Boolean}
   */
  test(regex) {
    return regex.test(this._ua);
  }
  /**
   * Get parsed browser object
   * @return {Object}
   */
  parseBrowser() {
    this.parsedResult.browser = {};
    const browserDescriptor = Utils.find(parser_browsers_default, (_browser) => {
      if (typeof _browser.test === "function") {
        return _browser.test(this);
      }
      if (_browser.test instanceof Array) {
        return _browser.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (browserDescriptor) {
      this.parsedResult.browser = browserDescriptor.describe(this.getUA());
    }
    return this.parsedResult.browser;
  }
  /**
   * Get parsed browser object
   * @return {Object}
   *
   * @public
   */
  getBrowser() {
    if (this.parsedResult.browser) {
      return this.parsedResult.browser;
    }
    return this.parseBrowser();
  }
  /**
   * Get browser's name
   * @return {String} Browser's name or an empty string
   *
   * @public
   */
  getBrowserName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getBrowser().name).toLowerCase() || "";
    }
    return this.getBrowser().name || "";
  }
  /**
   * Get browser's version
   * @return {String} version of browser
   *
   * @public
   */
  getBrowserVersion() {
    return this.getBrowser().version;
  }
  /**
   * Get OS
   * @return {Object}
   *
   * @example
   * this.getOS();
   * {
   *   name: 'macOS',
   *   version: '10.11.12'
   * }
   */
  getOS() {
    if (this.parsedResult.os) {
      return this.parsedResult.os;
    }
    return this.parseOS();
  }
  /**
   * Parse OS and save it to this.parsedResult.os
   * @return {*|{}}
   */
  parseOS() {
    this.parsedResult.os = {};
    const os = Utils.find(parser_os_default, (_os) => {
      if (typeof _os.test === "function") {
        return _os.test(this);
      }
      if (_os.test instanceof Array) {
        return _os.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (os) {
      this.parsedResult.os = os.describe(this.getUA());
    }
    return this.parsedResult.os;
  }
  /**
   * Get OS name
   * @param {Boolean} [toLowerCase] return lower-cased value
   * @return {String} name of the OS — macOS, Windows, Linux, etc.
   */
  getOSName(toLowerCase) {
    const { name } = this.getOS();
    if (toLowerCase) {
      return String(name).toLowerCase() || "";
    }
    return name || "";
  }
  /**
   * Get OS version
   * @return {String} full version with dots ('10.11.12', '5.6', etc)
   */
  getOSVersion() {
    return this.getOS().version;
  }
  /**
   * Get parsed platform
   * @return {{}}
   */
  getPlatform() {
    if (this.parsedResult.platform) {
      return this.parsedResult.platform;
    }
    return this.parsePlatform();
  }
  /**
   * Get platform name
   * @param {Boolean} [toLowerCase=false]
   * @return {*}
   */
  getPlatformType(toLowerCase = false) {
    const { type } = this.getPlatform();
    if (toLowerCase) {
      return String(type).toLowerCase() || "";
    }
    return type || "";
  }
  /**
   * Get parsed platform
   * @return {{}}
   */
  parsePlatform() {
    this.parsedResult.platform = {};
    const platform = Utils.find(parser_platforms_default, (_platform) => {
      if (typeof _platform.test === "function") {
        return _platform.test(this);
      }
      if (_platform.test instanceof Array) {
        return _platform.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (platform) {
      this.parsedResult.platform = platform.describe(this.getUA());
    }
    return this.parsedResult.platform;
  }
  /**
   * Get parsed engine
   * @return {{}}
   */
  getEngine() {
    if (this.parsedResult.engine) {
      return this.parsedResult.engine;
    }
    return this.parseEngine();
  }
  /**
   * Get engines's name
   * @return {String} Engines's name or an empty string
   *
   * @public
   */
  getEngineName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getEngine().name).toLowerCase() || "";
    }
    return this.getEngine().name || "";
  }
  /**
   * Get parsed platform
   * @return {{}}
   */
  parseEngine() {
    this.parsedResult.engine = {};
    const engine = Utils.find(parser_engines_default, (_engine) => {
      if (typeof _engine.test === "function") {
        return _engine.test(this);
      }
      if (_engine.test instanceof Array) {
        return _engine.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (engine) {
      this.parsedResult.engine = engine.describe(this.getUA());
    }
    return this.parsedResult.engine;
  }
  /**
   * Parse full information about the browser
   * @returns {Parser}
   */
  parse() {
    this.parseBrowser();
    this.parseOS();
    this.parsePlatform();
    this.parseEngine();
    return this;
  }
  /**
   * Get parsed result
   * @return {ParsedResult}
   */
  getResult() {
    return Utils.assign({}, this.parsedResult);
  }
  /**
   * Check if parsed browser matches certain conditions
   *
   * @param {Object} checkTree It's one or two layered object,
   * which can include a platform or an OS on the first layer
   * and should have browsers specs on the bottom-laying layer
   *
   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.
   * Returns `undefined` when the browser is no described in the checkTree object.
   *
   * @example
   * const browser = Bowser.getParser(window.navigator.userAgent);
   * if (browser.satisfies({chrome: '>118.01.1322' }))
   * // or with os
   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))
   * // or with platforms
   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))
   */
  satisfies(checkTree) {
    const platformsAndOSes = {};
    let platformsAndOSCounter = 0;
    const browsers = {};
    let browsersCounter = 0;
    const allDefinitions = Object.keys(checkTree);
    allDefinitions.forEach((key) => {
      const currentDefinition = checkTree[key];
      if (typeof currentDefinition === "string") {
        browsers[key] = currentDefinition;
        browsersCounter += 1;
      } else if (typeof currentDefinition === "object") {
        platformsAndOSes[key] = currentDefinition;
        platformsAndOSCounter += 1;
      }
    });
    if (platformsAndOSCounter > 0) {
      const platformsAndOSNames = Object.keys(platformsAndOSes);
      const OSMatchingDefinition = Utils.find(platformsAndOSNames, (name) => this.isOS(name));
      if (OSMatchingDefinition) {
        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);
        if (osResult !== void 0) {
          return osResult;
        }
      }
      const platformMatchingDefinition = Utils.find(
        platformsAndOSNames,
        (name) => this.isPlatform(name)
      );
      if (platformMatchingDefinition) {
        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);
        if (platformResult !== void 0) {
          return platformResult;
        }
      }
    }
    if (browsersCounter > 0) {
      const browserNames = Object.keys(browsers);
      const matchingDefinition = Utils.find(browserNames, (name) => this.isBrowser(name, true));
      if (matchingDefinition !== void 0) {
        return this.compareVersion(browsers[matchingDefinition]);
      }
    }
    return void 0;
  }
  /**
   * Check if the browser name equals the passed string
   * @param browserName The string to compare with the browser name
   * @param [includingAlias=false] The flag showing whether alias will be included into comparison
   * @returns {boolean}
   */
  isBrowser(browserName, includingAlias = false) {
    const defaultBrowserName = this.getBrowserName().toLowerCase();
    let browserNameLower = browserName.toLowerCase();
    const alias = Utils.getBrowserTypeByAlias(browserNameLower);
    if (includingAlias && alias) {
      browserNameLower = alias.toLowerCase();
    }
    return browserNameLower === defaultBrowserName;
  }
  compareVersion(version3) {
    let expectedResults = [0];
    let comparableVersion = version3;
    let isLoose = false;
    const currentBrowserVersion = this.getBrowserVersion();
    if (typeof currentBrowserVersion !== "string") {
      return void 0;
    }
    if (version3[0] === ">" || version3[0] === "<") {
      comparableVersion = version3.substr(1);
      if (version3[1] === "=") {
        isLoose = true;
        comparableVersion = version3.substr(2);
      } else {
        expectedResults = [];
      }
      if (version3[0] === ">") {
        expectedResults.push(1);
      } else {
        expectedResults.push(-1);
      }
    } else if (version3[0] === "=") {
      comparableVersion = version3.substr(1);
    } else if (version3[0] === "~") {
      isLoose = true;
      comparableVersion = version3.substr(1);
    }
    return expectedResults.indexOf(
      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)
    ) > -1;
  }
  isOS(osName) {
    return this.getOSName(true) === String(osName).toLowerCase();
  }
  isPlatform(platformType) {
    return this.getPlatformType(true) === String(platformType).toLowerCase();
  }
  isEngine(engineName) {
    return this.getEngineName(true) === String(engineName).toLowerCase();
  }
  /**
   * Is anything? Check if the browser is called "anything",
   * the OS called "anything" or the platform called "anything"
   * @param {String} anything
   * @param [includingAlias=false] The flag showing whether alias will be included into comparison
   * @returns {Boolean}
   */
  is(anything, includingAlias = false) {
    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);
  }
  /**
   * Check if any of the given values satisfies this.is(anything)
   * @param {String[]} anythings
   * @returns {Boolean}
   */
  some(anythings = []) {
    return anythings.some((anything) => this.is(anything));
  }
};
var parser_default = Parser;

// node_modules/bowser/src/bowser.js
var Bowser = class {
  /**
   * Creates a {@link Parser} instance
   *
   * @param {String} UA UserAgent string
   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it
   * explicitly. Same as `skipParsing` for {@link Parser}.
   * @returns {Parser}
   * @throws {Error} when UA is not a String
   *
   * @example
   * const parser = Bowser.getParser(window.navigator.userAgent);
   * const result = parser.getResult();
   */
  static getParser(UA, skipParsing = false) {
    if (typeof UA !== "string") {
      throw new Error("UserAgent should be a string");
    }
    return new parser_default(UA, skipParsing);
  }
  /**
   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately
   *
   * @param UA
   * @return {ParsedResult}
   *
   * @example
   * const result = Bowser.parse(window.navigator.userAgent);
   */
  static parse(UA) {
    return new parser_default(UA).getResult();
  }
  static get BROWSER_MAP() {
    return BROWSER_MAP;
  }
  static get ENGINE_MAP() {
    return ENGINE_MAP;
  }
  static get OS_MAP() {
    return OS_MAP;
  }
  static get PLATFORMS_MAP() {
    return PLATFORMS_MAP;
  }
};
var bowser_default = Bowser;

// node_modules/@aws-sdk/util-user-agent-browser/dist/es/index.js
var defaultUserAgent = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter11(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator11(this, function(_h) {
        parsedUA = ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
        sections = [
          // sdk-metadata
          ["aws-sdk-js", clientVersion],
          // os-metadata
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          // language-metadata
          // ECMAScript edition doesn't matter in JS.
          ["lang/js"],
          // browser vendor and version.
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
init_es();

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/endpoints.js
var AWS_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "logs.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "logs.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "logs.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_REGIONS = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "af-south-1":
      regionInfo = {
        hostname: "logs.af-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-east-1":
      regionInfo = {
        hostname: "logs.ap-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-1":
      regionInfo = {
        hostname: "logs.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "logs.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "logs.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "logs.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "logs.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "logs.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "logs.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "cn-northwest-1":
      regionInfo = {
        hostname: "logs.cn-northwest-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "logs.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "logs.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-south-1":
      regionInfo = {
        hostname: "logs.eu-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "logs.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "logs.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "logs.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "logs-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "logs-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-west-1":
      regionInfo = {
        hostname: "logs-fips.us-west-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "logs-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "me-south-1":
      regionInfo = {
        hostname: "logs.me-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "logs.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "logs.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "logs.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-east-1":
      regionInfo = {
        hostname: "logs.us-gov-east-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-east-1"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "logs.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "us-iso-east-1":
      regionInfo = {
        hostname: "logs.us-iso-east-1.c2s.ic.gov",
        partition: "aws-iso"
      };
      break;
    case "us-isob-east-1":
      regionInfo = {
        hostname: "logs.us-isob-east-1.sc2s.sgov.gov",
        partition: "aws-iso-b"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "logs.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "logs.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign9({ signingService: "logs" }, regionInfo));
};

// node_modules/@aws-sdk/querystring-parser/node_modules/tslib/tslib.es6.js
function __values10(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read17(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/querystring-parser/dist/es/index.js
function parseQueryString(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values10(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read17(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/url-parser/dist/es/index.js
var parseUrl = function(url) {
  var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.shared.js
var ClientSharedValues = {
  apiVersion: "2014-03-28",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider,
  serviceId: "CloudWatch Logs",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var ClientDefaultValues = __assign9(__assign9({}, ClientSharedValues), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues.serviceId,
  clientVersion: package_default.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser.Sha256, streamCollector, utf8Decoder: fromUtf83, utf8Encoder: toUtf83 });

// node_modules/@aws-sdk/config-resolver/node_modules/tslib/tslib.es6.js
var __assign15 = function() {
  __assign15 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign15.apply(this, arguments);
};
function __awaiter12(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator12(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/config-resolver/dist/es/EndpointsConfig.js
var resolveEndpointsConfig = function(input) {
  var _a;
  return __assign15(__assign15({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
    return getEndPointFromRegion(input);
  }, isCustomEndpoint: input.endpoint ? true : false });
};
var normalizeEndpoint = function(input) {
  var endpoint = input.endpoint, urlParser = input.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};
var getEndPointFromRegion = function(input) {
  return __awaiter12(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, hostname;
    var _b;
    return __generator12(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.regionInfoProvider(region)];
        case 2:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/config-resolver/dist/es/RegionConfig.js
var resolveRegionConfig = function(input) {
  if (!input.region) {
    throw new Error("Region is missing");
  }
  return __assign15(__assign15({}, input), { region: normalizeRegion(input.region) });
};
var normalizeRegion = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  }
  return region;
};

// node_modules/@aws-sdk/middleware-content-length/node_modules/tslib/tslib.es6.js
var __assign16 = function() {
  __assign16 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign16.apply(this, arguments);
};
function __awaiter13(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator13(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-content-length/dist/es/index.js
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter13(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator13(this, function(_b) {
          request = args.request;
          if (HttpRequest.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign16(__assign16({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
              }
            }
          }
          return [2, next(__assign16(__assign16({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-host-header/node_modules/tslib/tslib.es6.js
function __awaiter14(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator14(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-host-header/dist/es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter14(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator14(this, function(_b) {
          if (!HttpRequest.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-logger/node_modules/tslib/tslib.es6.js
function __rest6(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter15(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator15(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-logger/dist/es/loggerMiddleware.js
var loggerMiddleware = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter15(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger16, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator15(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger16 = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger16) {
                return [2, response];
              }
              if (typeof logger16.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest6(_a, ["$metadata"]);
                logger16.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-signing/node_modules/tslib/tslib.es6.js
var __assign17 = function() {
  __assign17 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign17.apply(this, arguments);
};
function __awaiter16(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator16(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read18(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/signature-v4/node_modules/tslib/tslib.es6.js
var __assign18 = function() {
  __assign18 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign18.apply(this, arguments);
};
function __rest7(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter17(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator17(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values11(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read19(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread7() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read19(arguments[i]));
  return ar;
}

// node_modules/@aws-sdk/signature-v4/dist/es/constants.js
var ALGORITHM_QUERY_PARAM2 = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM2 = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM2 = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM2 = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM2 = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM2 = "X-Amz-Signature";
var TOKEN_QUERY_PARAM2 = "X-Amz-Security-Token";
var AUTH_HEADER2 = "authorization";
var AMZ_DATE_HEADER2 = AMZ_DATE_QUERY_PARAM2.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [AUTH_HEADER2, AMZ_DATE_HEADER2, DATE_HEADER];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM2.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER2 = TOKEN_QUERY_PARAM2.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD2 = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER2 = "aws4_request";
var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/signature-v4/dist/es/credentialDerivation.js
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER2;
}
var getSigningKey2 = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter17(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator17(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache) {
            return [2, signingKeyCache[cacheKey]];
          }
          cacheQueue.push(cacheKey);
          while (cacheQueue.length > MAX_CACHE_SIZE) {
            delete signingKeyCache[cacheQueue.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values11([shortDate, region, service, KEY_TYPE_IDENTIFIER2]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 9:
          return [2, signingKeyCache[cacheKey] = key];
      }
    });
  });
};
function hmac(ctor, secret, data) {
  var hash = new ctor(secret);
  hash.update(data);
  return hash.digest();
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalHeaders.js
function getCanonicalHeaders2(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values11(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalQuery.js
function getCanonicalQuery(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri2(key2) + "=" + escapeUri2(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri2(key2) + "=" + escapeUri2(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values11(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
}

// node_modules/@aws-sdk/is-array-buffer/dist/es/index.js
var isArrayBuffer2 = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/signature-v4/dist/es/getPayloadHash.js
function getPayloadHash(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter17(this, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator17(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values11(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer2(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD2];
      }
    });
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/hasHeader.js
function hasHeader(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values11(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
}

// node_modules/@aws-sdk/signature-v4/dist/es/cloneRequest.js
function cloneRequest(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest7(_a, ["headers", "query"]);
  return __assign18(__assign18({}, rest), { headers: __assign18({}, headers), query: query ? cloneQuery2(query) : void 0 });
}
function cloneQuery2(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign18(__assign18({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread7(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/signature-v4/dist/es/moveHeadersToQuery.js
function moveHeadersToQuery(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values11(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name = _f.value;
      var lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign18(__assign18({}, request), {
    headers,
    query
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/prepareRequest.js
function prepareRequest(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
  try {
    for (var _b = __values11(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
}

// node_modules/@aws-sdk/signature-v4/dist/es/utilDate.js
function iso8601(time) {
  return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
}

// node_modules/@aws-sdk/signature-v4/dist/es/SignatureV4.js
var SignatureV4 = (
  /** @class */
  function() {
    function SignatureV42(_a) {
      var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
      this.service = service;
      this.sha256 = sha256;
      this.uriEscapePath = uriEscapePath;
      this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
      this.regionProvider = normalizeRegionProvider(region);
      this.credentialProvider = normalizeCredentialsProvider(credentials);
    }
    SignatureV42.prototype.presign = function(originalRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter17(this, void 0, void 0, function() {
        var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
        return __generator17(this, function(_l) {
          switch (_l.label) {
            case 0:
              _a = options.signingDate, signingDate = _a === void 0 ? /* @__PURE__ */ new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
              return [4, this.credentialProvider()];
            case 1:
              credentials = _l.sent();
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 2];
              _c = signingRegion;
              return [3, 4];
            case 2:
              return [4, this.regionProvider()];
            case 3:
              _c = _l.sent();
              _l.label = 4;
            case 4:
              region = _c;
              _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
              if (expiresIn > MAX_PRESIGNED_TTL) {
                return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
              }
              scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
              request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
              if (credentials.sessionToken) {
                request.query[TOKEN_QUERY_PARAM2] = credentials.sessionToken;
              }
              request.query[ALGORITHM_QUERY_PARAM2] = ALGORITHM_IDENTIFIER;
              request.query[CREDENTIAL_QUERY_PARAM2] = credentials.accessKeyId + "/" + scope;
              request.query[AMZ_DATE_QUERY_PARAM2] = longDate;
              request.query[EXPIRES_QUERY_PARAM2] = expiresIn.toString(10);
              canonicalHeaders = getCanonicalHeaders2(request, unsignableHeaders, signableHeaders);
              request.query[SIGNED_HEADERS_QUERY_PARAM2] = getCanonicalHeaderList(canonicalHeaders);
              _e = request.query;
              _f = SIGNATURE_QUERY_PARAM2;
              _g = this.getSignature;
              _h = [
                longDate,
                scope,
                this.getSigningKey(credentials, region, shortDate, signingService)
              ];
              _j = this.createCanonicalRequest;
              _k = [request, canonicalHeaders];
              return [4, getPayloadHash(originalRequest, this.sha256)];
            case 5:
              return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
            case 6:
              _e[_f] = _l.sent();
              return [2, request];
          }
        });
      });
    };
    SignatureV42.prototype.sign = function(toSign, options) {
      return __awaiter17(this, void 0, void 0, function() {
        return __generator17(this, function(_a) {
          if (typeof toSign === "string") {
            return [2, this.signString(toSign, options)];
          } else if (toSign.headers && toSign.payload) {
            return [2, this.signEvent(toSign, options)];
          } else {
            return [2, this.signRequest(toSign, options)];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    SignatureV42.prototype.signEvent = function(_a, _b) {
      var headers = _a.headers, payload = _a.payload;
      var _c = _b.signingDate, signingDate = _c === void 0 ? /* @__PURE__ */ new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
      return __awaiter17(this, void 0, void 0, function() {
        var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;
        return __generator17(this, function(_g) {
          switch (_g.label) {
            case 0:
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 1];
              _d = signingRegion;
              return [3, 3];
            case 1:
              return [4, this.regionProvider()];
            case 2:
              _d = _g.sent();
              _g.label = 3;
            case 3:
              region = _d;
              _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
              scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
              return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
            case 4:
              hashedPayload = _g.sent();
              hash = new this.sha256();
              hash.update(headers);
              _f = toHex;
              return [4, hash.digest()];
            case 5:
              hashedHeaders = _f.apply(void 0, [_g.sent()]);
              stringToSign = [
                EVENT_ALGORITHM_IDENTIFIER,
                longDate,
                scope,
                priorSignature,
                hashedHeaders,
                hashedPayload
              ].join("\n");
              return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
          }
        });
      });
    };
    SignatureV42.prototype.signString = function(stringToSign, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? /* @__PURE__ */ new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
      return __awaiter17(this, void 0, void 0, function() {
        var credentials, region, _d, shortDate, hash, _e, _f, _g;
        return __generator17(this, function(_h) {
          switch (_h.label) {
            case 0:
              return [4, this.credentialProvider()];
            case 1:
              credentials = _h.sent();
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 2];
              _d = signingRegion;
              return [3, 4];
            case 2:
              return [4, this.regionProvider()];
            case 3:
              _d = _h.sent();
              _h.label = 4;
            case 4:
              region = _d;
              shortDate = formatDate(signingDate).shortDate;
              _f = (_e = this.sha256).bind;
              return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
            case 5:
              hash = new (_f.apply(_e, [void 0, _h.sent()]))();
              hash.update(stringToSign);
              _g = toHex;
              return [4, hash.digest()];
            case 6:
              return [2, _g.apply(void 0, [_h.sent()])];
          }
        });
      });
    };
    SignatureV42.prototype.signRequest = function(requestToSign, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? /* @__PURE__ */ new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
      return __awaiter17(this, void 0, void 0, function() {
        var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
        return __generator17(this, function(_f) {
          switch (_f.label) {
            case 0:
              return [4, this.credentialProvider()];
            case 1:
              credentials = _f.sent();
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 2];
              _d = signingRegion;
              return [3, 4];
            case 2:
              return [4, this.regionProvider()];
            case 3:
              _d = _f.sent();
              _f.label = 4;
            case 4:
              region = _d;
              request = prepareRequest(requestToSign);
              _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
              scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
              request.headers[AMZ_DATE_HEADER2] = longDate;
              if (credentials.sessionToken) {
                request.headers[TOKEN_HEADER2] = credentials.sessionToken;
              }
              return [4, getPayloadHash(request, this.sha256)];
            case 5:
              payloadHash = _f.sent();
              if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
                request.headers[SHA256_HEADER] = payloadHash;
              }
              canonicalHeaders = getCanonicalHeaders2(request, unsignableHeaders, signableHeaders);
              return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
            case 6:
              signature = _f.sent();
              request.headers[AUTH_HEADER2] = ALGORITHM_IDENTIFIER + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
              return [2, request];
          }
        });
      });
    };
    SignatureV42.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
      var sortedHeaders = Object.keys(canonicalHeaders).sort();
      return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function(name) {
        return name + ":" + canonicalHeaders[name];
      }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
    };
    SignatureV42.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
      return __awaiter17(this, void 0, void 0, function() {
        var hash, hashedRequest;
        return __generator17(this, function(_a) {
          switch (_a.label) {
            case 0:
              hash = new this.sha256();
              hash.update(canonicalRequest);
              return [4, hash.digest()];
            case 1:
              hashedRequest = _a.sent();
              return [2, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
          }
        });
      });
    };
    SignatureV42.prototype.getCanonicalPath = function(_a) {
      var path = _a.path;
      if (this.uriEscapePath) {
        var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
        return "/" + doubleEncoded.replace(/%2F/g, "/");
      }
      return path;
    };
    SignatureV42.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
      return __awaiter17(this, void 0, void 0, function() {
        var stringToSign, hash, _a, _b, _c;
        return __generator17(this, function(_d) {
          switch (_d.label) {
            case 0:
              return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
            case 1:
              stringToSign = _d.sent();
              _b = (_a = this.sha256).bind;
              return [4, keyPromise];
            case 2:
              hash = new (_b.apply(_a, [void 0, _d.sent()]))();
              hash.update(stringToSign);
              _c = toHex;
              return [4, hash.digest()];
            case 3:
              return [2, _c.apply(void 0, [_d.sent()])];
          }
        });
      });
    };
    SignatureV42.prototype.getSigningKey = function(credentials, region, shortDate, service) {
      return getSigningKey2(this.sha256, credentials, shortDate, region, service || this.service);
    };
    return SignatureV42;
  }()
);
var formatDate = function(now) {
  var longDate = iso8601(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList = function(headers) {
  return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/middleware-signing/dist/es/configurations.js
function resolveAwsAuthConfig(input) {
  var _this = this;
  var credentials = input.credentials || input.credentialDefaultProvider(input);
  var normalizedCreds = normalizeProvider(credentials);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else {
    signer = function() {
      return normalizeProvider(input.region)().then(function(region) {
        return __awaiter16(_this, void 0, void 0, function() {
          return __generator16(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, input.regionInfoProvider(region)];
              case 1:
                return [2, [_a2.sent() || {}, region]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read18(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        return new SignatureV4({
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        });
      });
    };
  }
  return __assign17(__assign17({}, input), {
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  });
}
function normalizeProvider(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
}

// node_modules/@aws-sdk/middleware-signing/dist/es/middleware.js
var isClockSkewed = function(newServerTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 3e5;
};
var getSkewCorrectedDate = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter16(this, void 0, void 0, function() {
        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
        var _d;
        return __generator16(this, function(_e) {
          switch (_e.label) {
            case 0:
              if (!HttpRequest.isInstance(args.request))
                return [2, next(args)];
              if (!(typeof options.signer === "function"))
                return [3, 2];
              return [4, options.signer()];
            case 1:
              _a = _e.sent();
              return [3, 3];
            case 2:
              _a = options.signer;
              _e.label = 3;
            case 3:
              signer = _a;
              _b = next;
              _c = [__assign17({}, args)];
              _d = {};
              return [4, signer.sign(args.request, {
                signingDate: new Date(Date.now() + options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 4:
              return [4, _b.apply(void 0, [__assign17.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];
            case 5:
              output = _e.sent();
              headers = output.response.headers;
              dateHeader = headers && (headers.date || headers.Date);
              if (dateHeader) {
                serverTime = Date.parse(dateHeader);
                if (isClockSkewed(serverTime, options.systemClockOffset)) {
                  options.systemClockOffset = serverTime - Date.now();
                }
              }
              return [2, output];
          }
        });
      });
    };
  };
}
var awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-user-agent/node_modules/tslib/tslib.es6.js
var __assign19 = function() {
  __assign19 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign19.apply(this, arguments);
};
function __awaiter18(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator18(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read20(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread8() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read20(arguments[i]));
  return ar;
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/configurations.js
function resolveUserAgentConfig(input) {
  return __assign19(__assign19({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/middleware-user-agent/dist/es/user-agent-middleware.js
var userAgentMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter18(void 0, void 0, void 0, function() {
        var request, headers, userAgent2, defaultUserAgent2, customUserAgent, normalUAValue;
        var _a, _b;
        return __generator18(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent2 = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent2 = _c.sent().map(escapeUserAgent);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
              headers[X_AMZ_USER_AGENT] = __spread8(defaultUserAgent2, userAgent2, customUserAgent).join(SPACE);
              normalUAValue = __spread8(defaultUserAgent2.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }), customUserAgent).join(SPACE);
              if (options.runtime !== "browser" && normalUAValue) {
                headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + " " + normalUAValue : normalUAValue;
              }
              return [2, next(__assign19(__assign19({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent = function(_a) {
  var _b = __read20(_a, 2), name = _b[0], version3 = _b[1];
  var prefixSeparatorIndex = name.indexOf("/");
  var prefix = name.substring(0, prefixSeparatorIndex);
  var uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version3].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-stack/node_modules/tslib/tslib.es6.js
var __assign20 = function() {
  __assign20 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign20.apply(this, arguments);
};
function __values12(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read21(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread9() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read21(arguments[i]));
  return ar;
}

// node_modules/@aws-sdk/middleware-stack/dist/es/MiddlewareStack.js
var constructStack = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = /* @__PURE__ */ new Set();
  var sort = function(entries) {
    return entries.sort(function(a, b) {
      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign20({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign20({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread9(expandRelativeMiddlewareList(entry)));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread9(expandRelativeMiddlewareList(entry)));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign20(__assign20({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign20(__assign20({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spread9(expendedMiddlewareList));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name = options.name, override = options.override;
      var entry = __assign20({ step: "initialize", priority: "normal", middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name = options.name, override = options.override;
      var entry = __assign20({ middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name)
            entriesNameSet.delete(name);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values12(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/smithy-client/dist/es/client.js
var Client = (
  /** @class */
  function() {
    function Client3(config) {
      this.middlewareStack = constructStack();
      this.config = config;
    }
    Client3.prototype.send = function(command, optionsOrCb, cb) {
      var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
      var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
      var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
      if (callback) {
        handler(command).then(function(result) {
          return callback(null, result.output);
        }, function(err) {
          return callback(err);
        }).catch(
          // prevent any errors thrown in the callback from triggering an
          // unhandled promise rejection
          function() {
          }
        );
      } else {
        return handler(command).then(function(result) {
          return result.output;
        });
      }
    };
    Client3.prototype.destroy = function() {
      if (this.config.requestHandler.destroy)
        this.config.requestHandler.destroy();
    };
    return Client3;
  }()
);

// node_modules/@aws-sdk/smithy-client/dist/es/command.js
var Command = (
  /** @class */
  function() {
    function Command2() {
      this.middlewareStack = constructStack();
    }
    return Command2;
  }()
);

// node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.es6.js
var extendStatics7 = function(d, b) {
  extendStatics7 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics7(d, b);
};
function __extends9(d, b) {
  extendStatics7(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __read22(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread10() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read22(arguments[i]));
  return ar;
}

// node_modules/@aws-sdk/smithy-client/dist/es/lazy-json.js
var StringWrapper = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spread10([null], arguments));
  var instance = new Constructor();
  Object.setPrototypeOf(instance, Class.prototype);
  return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = (
  /** @class */
  function(_super) {
    __extends9(LazyJsonString2, _super);
    function LazyJsonString2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LazyJsonString2.prototype.deserializeJSON = function() {
      return JSON.parse(_super.prototype.toString.call(this));
    };
    LazyJsonString2.prototype.toJSON = function() {
      return _super.prototype.toString.call(this);
    };
    LazyJsonString2.fromObject = function(object) {
      if (object instanceof LazyJsonString2) {
        return object;
      } else if (object instanceof String || typeof object === "string") {
        return new LazyJsonString2(object);
      }
      return new LazyJsonString2(JSON.stringify(object));
    };
    return LazyJsonString2;
  }(StringWrapper)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogsClient.js
var CloudWatchLogsClient = (
  /** @class */
  function(_super) {
    __extends5(CloudWatchLogsClient2, _super);
    function CloudWatchLogsClient2(configuration) {
      var _this = this;
      var _config_0 = __assign9(__assign9({}, ClientDefaultValues), configuration);
      var _config_1 = resolveRegionConfig(_config_0);
      var _config_2 = resolveEndpointsConfig(_config_1);
      var _config_3 = resolveAwsAuthConfig(_config_2);
      var _config_4 = resolveRetryConfig(_config_3);
      var _config_5 = resolveHostHeaderConfig(_config_4);
      var _config_6 = resolveUserAgentConfig(_config_5);
      _this = _super.call(this, _config_6) || this;
      _this.config = _config_6;
      _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
      _this.middlewareStack.use(getRetryPlugin(_this.config));
      _this.middlewareStack.use(getContentLengthPlugin(_this.config));
      _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
      _this.middlewareStack.use(getLoggerPlugin(_this.config));
      _this.middlewareStack.use(getUserAgentPlugin(_this.config));
      return _this;
    }
    CloudWatchLogsClient2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return CloudWatchLogsClient2;
  }(Client)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/models/models_0.js
var AssociateKmsKeyRequest;
(function(AssociateKmsKeyRequest2) {
  AssociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(AssociateKmsKeyRequest || (AssociateKmsKeyRequest = {}));
var InvalidParameterException;
(function(InvalidParameterException2) {
  InvalidParameterException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(InvalidParameterException || (InvalidParameterException = {}));
var OperationAbortedException;
(function(OperationAbortedException2) {
  OperationAbortedException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(OperationAbortedException || (OperationAbortedException = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException2) {
  ResourceNotFoundException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var ServiceUnavailableException;
(function(ServiceUnavailableException2) {
  ServiceUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ServiceUnavailableException || (ServiceUnavailableException = {}));
var CancelExportTaskRequest;
(function(CancelExportTaskRequest2) {
  CancelExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CancelExportTaskRequest || (CancelExportTaskRequest = {}));
var InvalidOperationException;
(function(InvalidOperationException2) {
  InvalidOperationException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(InvalidOperationException || (InvalidOperationException = {}));
var CreateExportTaskRequest;
(function(CreateExportTaskRequest2) {
  CreateExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateExportTaskRequest || (CreateExportTaskRequest = {}));
var CreateExportTaskResponse;
(function(CreateExportTaskResponse2) {
  CreateExportTaskResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateExportTaskResponse || (CreateExportTaskResponse = {}));
var LimitExceededException;
(function(LimitExceededException2) {
  LimitExceededException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(LimitExceededException || (LimitExceededException = {}));
var ResourceAlreadyExistsException;
(function(ResourceAlreadyExistsException2) {
  ResourceAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ResourceAlreadyExistsException || (ResourceAlreadyExistsException = {}));
var CreateLogGroupRequest;
(function(CreateLogGroupRequest2) {
  CreateLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateLogGroupRequest || (CreateLogGroupRequest = {}));
var CreateLogStreamRequest;
(function(CreateLogStreamRequest2) {
  CreateLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(CreateLogStreamRequest || (CreateLogStreamRequest = {}));
var DataAlreadyAcceptedException;
(function(DataAlreadyAcceptedException2) {
  DataAlreadyAcceptedException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DataAlreadyAcceptedException || (DataAlreadyAcceptedException = {}));
var DeleteDestinationRequest;
(function(DeleteDestinationRequest2) {
  DeleteDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteDestinationRequest || (DeleteDestinationRequest = {}));
var DeleteLogGroupRequest;
(function(DeleteLogGroupRequest2) {
  DeleteLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteLogGroupRequest || (DeleteLogGroupRequest = {}));
var DeleteLogStreamRequest;
(function(DeleteLogStreamRequest2) {
  DeleteLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteLogStreamRequest || (DeleteLogStreamRequest = {}));
var DeleteMetricFilterRequest;
(function(DeleteMetricFilterRequest2) {
  DeleteMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteMetricFilterRequest || (DeleteMetricFilterRequest = {}));
var DeleteQueryDefinitionRequest;
(function(DeleteQueryDefinitionRequest2) {
  DeleteQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteQueryDefinitionRequest || (DeleteQueryDefinitionRequest = {}));
var DeleteQueryDefinitionResponse;
(function(DeleteQueryDefinitionResponse2) {
  DeleteQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteQueryDefinitionResponse || (DeleteQueryDefinitionResponse = {}));
var DeleteResourcePolicyRequest;
(function(DeleteResourcePolicyRequest2) {
  DeleteResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteResourcePolicyRequest || (DeleteResourcePolicyRequest = {}));
var DeleteRetentionPolicyRequest;
(function(DeleteRetentionPolicyRequest2) {
  DeleteRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteRetentionPolicyRequest || (DeleteRetentionPolicyRequest = {}));
var DeleteSubscriptionFilterRequest;
(function(DeleteSubscriptionFilterRequest2) {
  DeleteSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DeleteSubscriptionFilterRequest || (DeleteSubscriptionFilterRequest = {}));
var DescribeDestinationsRequest;
(function(DescribeDestinationsRequest2) {
  DescribeDestinationsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeDestinationsRequest || (DescribeDestinationsRequest = {}));
var Destination;
(function(Destination2) {
  Destination2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(Destination || (Destination = {}));
var DescribeDestinationsResponse;
(function(DescribeDestinationsResponse2) {
  DescribeDestinationsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeDestinationsResponse || (DescribeDestinationsResponse = {}));
var ExportTaskStatusCode;
(function(ExportTaskStatusCode2) {
  ExportTaskStatusCode2["CANCELLED"] = "CANCELLED";
  ExportTaskStatusCode2["COMPLETED"] = "COMPLETED";
  ExportTaskStatusCode2["FAILED"] = "FAILED";
  ExportTaskStatusCode2["PENDING"] = "PENDING";
  ExportTaskStatusCode2["PENDING_CANCEL"] = "PENDING_CANCEL";
  ExportTaskStatusCode2["RUNNING"] = "RUNNING";
})(ExportTaskStatusCode || (ExportTaskStatusCode = {}));
var DescribeExportTasksRequest;
(function(DescribeExportTasksRequest2) {
  DescribeExportTasksRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeExportTasksRequest || (DescribeExportTasksRequest = {}));
var ExportTaskExecutionInfo;
(function(ExportTaskExecutionInfo2) {
  ExportTaskExecutionInfo2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ExportTaskExecutionInfo || (ExportTaskExecutionInfo = {}));
var ExportTaskStatus;
(function(ExportTaskStatus2) {
  ExportTaskStatus2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ExportTaskStatus || (ExportTaskStatus = {}));
var ExportTask;
(function(ExportTask2) {
  ExportTask2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ExportTask || (ExportTask = {}));
var DescribeExportTasksResponse;
(function(DescribeExportTasksResponse2) {
  DescribeExportTasksResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeExportTasksResponse || (DescribeExportTasksResponse = {}));
var DescribeLogGroupsRequest;
(function(DescribeLogGroupsRequest2) {
  DescribeLogGroupsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeLogGroupsRequest || (DescribeLogGroupsRequest = {}));
var LogGroup;
(function(LogGroup2) {
  LogGroup2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(LogGroup || (LogGroup = {}));
var DescribeLogGroupsResponse;
(function(DescribeLogGroupsResponse2) {
  DescribeLogGroupsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeLogGroupsResponse || (DescribeLogGroupsResponse = {}));
var OrderBy;
(function(OrderBy2) {
  OrderBy2["LastEventTime"] = "LastEventTime";
  OrderBy2["LogStreamName"] = "LogStreamName";
})(OrderBy || (OrderBy = {}));
var DescribeLogStreamsRequest;
(function(DescribeLogStreamsRequest2) {
  DescribeLogStreamsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeLogStreamsRequest || (DescribeLogStreamsRequest = {}));
var LogStream;
(function(LogStream2) {
  LogStream2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(LogStream || (LogStream = {}));
var DescribeLogStreamsResponse;
(function(DescribeLogStreamsResponse2) {
  DescribeLogStreamsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeLogStreamsResponse || (DescribeLogStreamsResponse = {}));
var DescribeMetricFiltersRequest;
(function(DescribeMetricFiltersRequest2) {
  DescribeMetricFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeMetricFiltersRequest || (DescribeMetricFiltersRequest = {}));
var MetricTransformation;
(function(MetricTransformation2) {
  MetricTransformation2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(MetricTransformation || (MetricTransformation = {}));
var MetricFilter;
(function(MetricFilter2) {
  MetricFilter2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(MetricFilter || (MetricFilter = {}));
var DescribeMetricFiltersResponse;
(function(DescribeMetricFiltersResponse2) {
  DescribeMetricFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeMetricFiltersResponse || (DescribeMetricFiltersResponse = {}));
var QueryStatus;
(function(QueryStatus2) {
  QueryStatus2["Cancelled"] = "Cancelled";
  QueryStatus2["Complete"] = "Complete";
  QueryStatus2["Failed"] = "Failed";
  QueryStatus2["Running"] = "Running";
  QueryStatus2["Scheduled"] = "Scheduled";
})(QueryStatus || (QueryStatus = {}));
var DescribeQueriesRequest;
(function(DescribeQueriesRequest2) {
  DescribeQueriesRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeQueriesRequest || (DescribeQueriesRequest = {}));
var QueryInfo;
(function(QueryInfo2) {
  QueryInfo2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(QueryInfo || (QueryInfo = {}));
var DescribeQueriesResponse;
(function(DescribeQueriesResponse2) {
  DescribeQueriesResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeQueriesResponse || (DescribeQueriesResponse = {}));
var DescribeQueryDefinitionsRequest;
(function(DescribeQueryDefinitionsRequest2) {
  DescribeQueryDefinitionsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeQueryDefinitionsRequest || (DescribeQueryDefinitionsRequest = {}));
var QueryDefinition;
(function(QueryDefinition2) {
  QueryDefinition2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(QueryDefinition || (QueryDefinition = {}));
var DescribeQueryDefinitionsResponse;
(function(DescribeQueryDefinitionsResponse2) {
  DescribeQueryDefinitionsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeQueryDefinitionsResponse || (DescribeQueryDefinitionsResponse = {}));
var DescribeResourcePoliciesRequest;
(function(DescribeResourcePoliciesRequest2) {
  DescribeResourcePoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeResourcePoliciesRequest || (DescribeResourcePoliciesRequest = {}));
var ResourcePolicy;
(function(ResourcePolicy2) {
  ResourcePolicy2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ResourcePolicy || (ResourcePolicy = {}));
var DescribeResourcePoliciesResponse;
(function(DescribeResourcePoliciesResponse2) {
  DescribeResourcePoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeResourcePoliciesResponse || (DescribeResourcePoliciesResponse = {}));
var DescribeSubscriptionFiltersRequest;
(function(DescribeSubscriptionFiltersRequest2) {
  DescribeSubscriptionFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeSubscriptionFiltersRequest || (DescribeSubscriptionFiltersRequest = {}));
var Distribution;
(function(Distribution2) {
  Distribution2["ByLogStream"] = "ByLogStream";
  Distribution2["Random"] = "Random";
})(Distribution || (Distribution = {}));
var SubscriptionFilter;
(function(SubscriptionFilter2) {
  SubscriptionFilter2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(SubscriptionFilter || (SubscriptionFilter = {}));
var DescribeSubscriptionFiltersResponse;
(function(DescribeSubscriptionFiltersResponse2) {
  DescribeSubscriptionFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DescribeSubscriptionFiltersResponse || (DescribeSubscriptionFiltersResponse = {}));
var DisassociateKmsKeyRequest;
(function(DisassociateKmsKeyRequest2) {
  DisassociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(DisassociateKmsKeyRequest || (DisassociateKmsKeyRequest = {}));
var FilteredLogEvent;
(function(FilteredLogEvent2) {
  FilteredLogEvent2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(FilteredLogEvent || (FilteredLogEvent = {}));
var FilterLogEventsRequest;
(function(FilterLogEventsRequest2) {
  FilterLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(FilterLogEventsRequest || (FilterLogEventsRequest = {}));
var SearchedLogStream;
(function(SearchedLogStream2) {
  SearchedLogStream2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(SearchedLogStream || (SearchedLogStream = {}));
var FilterLogEventsResponse;
(function(FilterLogEventsResponse2) {
  FilterLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(FilterLogEventsResponse || (FilterLogEventsResponse = {}));
var GetLogEventsRequest;
(function(GetLogEventsRequest2) {
  GetLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetLogEventsRequest || (GetLogEventsRequest = {}));
var OutputLogEvent;
(function(OutputLogEvent2) {
  OutputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(OutputLogEvent || (OutputLogEvent = {}));
var GetLogEventsResponse;
(function(GetLogEventsResponse2) {
  GetLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetLogEventsResponse || (GetLogEventsResponse = {}));
var GetLogGroupFieldsRequest;
(function(GetLogGroupFieldsRequest2) {
  GetLogGroupFieldsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetLogGroupFieldsRequest || (GetLogGroupFieldsRequest = {}));
var LogGroupField;
(function(LogGroupField2) {
  LogGroupField2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(LogGroupField || (LogGroupField = {}));
var GetLogGroupFieldsResponse;
(function(GetLogGroupFieldsResponse2) {
  GetLogGroupFieldsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetLogGroupFieldsResponse || (GetLogGroupFieldsResponse = {}));
var GetLogRecordRequest;
(function(GetLogRecordRequest2) {
  GetLogRecordRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetLogRecordRequest || (GetLogRecordRequest = {}));
var GetLogRecordResponse;
(function(GetLogRecordResponse2) {
  GetLogRecordResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetLogRecordResponse || (GetLogRecordResponse = {}));
var GetQueryResultsRequest;
(function(GetQueryResultsRequest2) {
  GetQueryResultsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetQueryResultsRequest || (GetQueryResultsRequest = {}));
var ResultField;
(function(ResultField2) {
  ResultField2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ResultField || (ResultField = {}));
var QueryStatistics;
(function(QueryStatistics2) {
  QueryStatistics2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(QueryStatistics || (QueryStatistics = {}));
var GetQueryResultsResponse;
(function(GetQueryResultsResponse2) {
  GetQueryResultsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(GetQueryResultsResponse || (GetQueryResultsResponse = {}));
var InputLogEvent;
(function(InputLogEvent2) {
  InputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(InputLogEvent || (InputLogEvent = {}));
var InvalidSequenceTokenException;
(function(InvalidSequenceTokenException2) {
  InvalidSequenceTokenException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(InvalidSequenceTokenException || (InvalidSequenceTokenException = {}));
var ListTagsLogGroupRequest;
(function(ListTagsLogGroupRequest2) {
  ListTagsLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTagsLogGroupRequest || (ListTagsLogGroupRequest = {}));
var ListTagsLogGroupResponse;
(function(ListTagsLogGroupResponse2) {
  ListTagsLogGroupResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(ListTagsLogGroupResponse || (ListTagsLogGroupResponse = {}));
var PutDestinationRequest;
(function(PutDestinationRequest2) {
  PutDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutDestinationRequest || (PutDestinationRequest = {}));
var PutDestinationResponse;
(function(PutDestinationResponse2) {
  PutDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutDestinationResponse || (PutDestinationResponse = {}));
var PutDestinationPolicyRequest;
(function(PutDestinationPolicyRequest2) {
  PutDestinationPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutDestinationPolicyRequest || (PutDestinationPolicyRequest = {}));
var PutLogEventsRequest;
(function(PutLogEventsRequest2) {
  PutLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutLogEventsRequest || (PutLogEventsRequest = {}));
var RejectedLogEventsInfo;
(function(RejectedLogEventsInfo2) {
  RejectedLogEventsInfo2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(RejectedLogEventsInfo || (RejectedLogEventsInfo = {}));
var PutLogEventsResponse;
(function(PutLogEventsResponse2) {
  PutLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutLogEventsResponse || (PutLogEventsResponse = {}));
var UnrecognizedClientException;
(function(UnrecognizedClientException2) {
  UnrecognizedClientException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UnrecognizedClientException || (UnrecognizedClientException = {}));
var PutMetricFilterRequest;
(function(PutMetricFilterRequest2) {
  PutMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutMetricFilterRequest || (PutMetricFilterRequest = {}));
var PutQueryDefinitionRequest;
(function(PutQueryDefinitionRequest2) {
  PutQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutQueryDefinitionRequest || (PutQueryDefinitionRequest = {}));
var PutQueryDefinitionResponse;
(function(PutQueryDefinitionResponse2) {
  PutQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutQueryDefinitionResponse || (PutQueryDefinitionResponse = {}));
var PutResourcePolicyRequest;
(function(PutResourcePolicyRequest2) {
  PutResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutResourcePolicyRequest || (PutResourcePolicyRequest = {}));
var PutResourcePolicyResponse;
(function(PutResourcePolicyResponse2) {
  PutResourcePolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutResourcePolicyResponse || (PutResourcePolicyResponse = {}));
var PutRetentionPolicyRequest;
(function(PutRetentionPolicyRequest2) {
  PutRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutRetentionPolicyRequest || (PutRetentionPolicyRequest = {}));
var PutSubscriptionFilterRequest;
(function(PutSubscriptionFilterRequest2) {
  PutSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(PutSubscriptionFilterRequest || (PutSubscriptionFilterRequest = {}));
var QueryCompileErrorLocation;
(function(QueryCompileErrorLocation2) {
  QueryCompileErrorLocation2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(QueryCompileErrorLocation || (QueryCompileErrorLocation = {}));
var QueryCompileError;
(function(QueryCompileError2) {
  QueryCompileError2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(QueryCompileError || (QueryCompileError = {}));
var MalformedQueryException;
(function(MalformedQueryException2) {
  MalformedQueryException2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(MalformedQueryException || (MalformedQueryException = {}));
var StartQueryRequest;
(function(StartQueryRequest2) {
  StartQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(StartQueryRequest || (StartQueryRequest = {}));
var StartQueryResponse;
(function(StartQueryResponse2) {
  StartQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(StartQueryResponse || (StartQueryResponse = {}));
var StopQueryRequest;
(function(StopQueryRequest2) {
  StopQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(StopQueryRequest || (StopQueryRequest = {}));
var StopQueryResponse;
(function(StopQueryResponse2) {
  StopQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(StopQueryResponse || (StopQueryResponse = {}));
var TagLogGroupRequest;
(function(TagLogGroupRequest2) {
  TagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TagLogGroupRequest || (TagLogGroupRequest = {}));
var TestMetricFilterRequest;
(function(TestMetricFilterRequest2) {
  TestMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TestMetricFilterRequest || (TestMetricFilterRequest = {}));
var MetricFilterMatchRecord;
(function(MetricFilterMatchRecord2) {
  MetricFilterMatchRecord2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(MetricFilterMatchRecord || (MetricFilterMatchRecord = {}));
var TestMetricFilterResponse;
(function(TestMetricFilterResponse2) {
  TestMetricFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(TestMetricFilterResponse || (TestMetricFilterResponse = {}));
var UntagLogGroupRequest;
(function(UntagLogGroupRequest2) {
  UntagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign9({}, obj);
  };
})(UntagLogGroupRequest || (UntagLogGroupRequest = {}));

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1AssociateKmsKeyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.AssociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1AssociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CancelExportTaskCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CancelExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CancelExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateExportTaskCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CreateExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogGroupCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogStreamCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteDestinationCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteDestination"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogGroupCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogStreamCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteMetricFilterCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteQueryDefinitionCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteResourcePolicyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteRetentionPolicyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteSubscriptionFilterCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeDestinationsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeDestinations"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeDestinationsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeExportTasksCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeExportTasks"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeExportTasksRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogGroupsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogGroups"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogGroupsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogStreamsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogStreams"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogStreamsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeMetricFiltersCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeMetricFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeMetricFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueriesCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueries"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueriesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueryDefinitionsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueryDefinitions"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueryDefinitionsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeResourcePoliciesCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeResourcePolicies"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeResourcePoliciesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeSubscriptionFiltersCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeSubscriptionFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeSubscriptionFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DisassociateKmsKeyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DisassociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1DisassociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1FilterLogEventsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.FilterLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1FilterLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogEventsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogGroupFieldsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogGroupFields"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogGroupFieldsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogRecordCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogRecord"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogRecordRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetQueryResultsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetQueryResults"
      };
      body = JSON.stringify(serializeAws_json1_1GetQueryResultsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsLogGroupCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.ListTagsLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestination"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationPolicyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestinationPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutLogEventsCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1PutLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutMetricFilterCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutQueryDefinitionCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1PutQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutResourcePolicyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRetentionPolicyCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutSubscriptionFilterCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StartQueryCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StartQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StartQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StopQueryCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StopQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StopQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagLogGroupCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1TagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TestMetricFilterCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TestMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1TestMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagLogGroupCommand = function(input, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator5(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.UntagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1UntagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1AssociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CancelExportTaskCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidOperationException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateExportTaskCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1CreateExportTaskResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator5(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign9({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 10];
            case "ServiceUnavailableException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator5(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteDestinationCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteQueryDefinitionResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeDestinationsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeDestinationsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeExportTasksCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeExportTasksResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogGroupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogGroupsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogStreamsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogStreamsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeMetricFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeMetricFiltersResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueriesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueriesResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueryDefinitionsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueryDefinitionsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeResourcePoliciesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeResourcePoliciesResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeSubscriptionFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeSubscriptionFiltersResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DisassociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1FilterLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1FilterLogEventsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogEventsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogGroupFieldsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogGroupFieldsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogRecordCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogRecordResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetQueryResultsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetQueryResultsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsLogGroupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsLogGroupResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutDestinationResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutLogEventsResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator5(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign9({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DataAlreadyAcceptedException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "InvalidSequenceTokenException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
            case "UnrecognizedClientException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidSequenceTokenExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1UnrecognizedClientExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator5(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutQueryDefinitionResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutResourcePolicyCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator5(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign9({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator5(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StartQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StartQueryResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator5(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign9({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "MalformedQueryException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1MalformedQueryExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StopQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StopQueryResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator5(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign9({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TestMetricFilterCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TestMetricFilterResponse(data, context);
          response = __assign9({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator5(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign9({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommand = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var response;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommandError = function(output, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator5(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign9({}, output)];
          _d = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign9.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign9.apply(void 0, [__assign9.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign9(__assign9({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DataAlreadyAcceptedException(body, context);
      contents = __assign9({ name: "DataAlreadyAcceptedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidOperationExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
      contents = __assign9({ name: "InvalidOperationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
      contents = __assign9({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidSequenceTokenExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidSequenceTokenException(body, context);
      contents = __assign9({ name: "InvalidSequenceTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      contents = __assign9({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1MalformedQueryExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1MalformedQueryException(body, context);
      contents = __assign9({ name: "MalformedQueryException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1OperationAbortedExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1OperationAbortedException(body, context);
      contents = __assign9({ name: "OperationAbortedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
      contents = __assign9({ name: "ResourceAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      contents = __assign9({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
      contents = __assign9({ name: "ServiceUnavailableException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1UnrecognizedClientExceptionResponse = function(parsedOutput, context) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator5(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1UnrecognizedClientException(body, context);
      contents = __assign9({ name: "UnrecognizedClientException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1AssociateKmsKeyRequest = function(input, context) {
  return __assign9(__assign9({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1CancelExportTaskRequest = function(input, context) {
  return __assign9({}, input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1CreateExportTaskRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.destination !== void 0 && input.destination !== null && { destination: input.destination }), input.destinationPrefix !== void 0 && input.destinationPrefix !== null && { destinationPrefix: input.destinationPrefix }), input.from !== void 0 && input.from !== null && { from: input.from }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.taskName !== void 0 && input.taskName !== null && { taskName: input.taskName }), input.to !== void 0 && input.to !== null && { to: input.to });
};
var serializeAws_json1_1CreateLogGroupRequest = function(input, context) {
  return __assign9(__assign9(__assign9({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1CreateLogStreamRequest = function(input, context) {
  return __assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteDestinationRequest = function(input, context) {
  return __assign9({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1DeleteLogGroupRequest = function(input, context) {
  return __assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteLogStreamRequest = function(input, context) {
  return __assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteMetricFilterRequest = function(input, context) {
  return __assign9(__assign9({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteQueryDefinitionRequest = function(input, context) {
  return __assign9({}, input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId });
};
var serializeAws_json1_1DeleteResourcePolicyRequest = function(input, context) {
  return __assign9({}, input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1DeleteRetentionPolicyRequest = function(input, context) {
  return __assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteSubscriptionFilterRequest = function(input, context) {
  return __assign9(__assign9({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DescribeDestinationsRequest = function(input, context) {
  return __assign9(__assign9(__assign9({}, input.DestinationNamePrefix !== void 0 && input.DestinationNamePrefix !== null && { DestinationNamePrefix: input.DestinationNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeExportTasksRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.statusCode !== void 0 && input.statusCode !== null && { statusCode: input.statusCode }), input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1DescribeLogGroupsRequest = function(input, context) {
  return __assign9(__assign9(__assign9({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupNamePrefix !== void 0 && input.logGroupNamePrefix !== null && { logGroupNamePrefix: input.logGroupNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeLogStreamsRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.descending !== void 0 && input.descending !== null && { descending: input.descending }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.orderBy !== void 0 && input.orderBy !== null && { orderBy: input.orderBy });
};
var serializeAws_json1_1DescribeMetricFiltersRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeQueriesRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.status !== void 0 && input.status !== null && { status: input.status });
};
var serializeAws_json1_1DescribeQueryDefinitionsRequest = function(input, context) {
  return __assign9(__assign9(__assign9({}, input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.queryDefinitionNamePrefix !== void 0 && input.queryDefinitionNamePrefix !== null && { queryDefinitionNamePrefix: input.queryDefinitionNamePrefix });
};
var serializeAws_json1_1DescribeResourcePoliciesRequest = function(input, context) {
  return __assign9(__assign9({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeSubscriptionFiltersRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DisassociateKmsKeyRequest = function(input, context) {
  return __assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1FilterLogEventsRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.interleaved !== void 0 && input.interleaved !== null && { interleaved: input.interleaved }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.logStreamNames !== void 0 && input.logStreamNames !== null && {
    logStreamNames: serializeAws_json1_1InputLogStreamNames(input.logStreamNames, context)
  }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogEventsRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startFromHead !== void 0 && input.startFromHead !== null && { startFromHead: input.startFromHead }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogGroupFieldsRequest = function(input, context) {
  return __assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.time !== void 0 && input.time !== null && { time: input.time });
};
var serializeAws_json1_1GetLogRecordRequest = function(input, context) {
  return __assign9({}, input.logRecordPointer !== void 0 && input.logRecordPointer !== null && { logRecordPointer: input.logRecordPointer });
};
var serializeAws_json1_1GetQueryResultsRequest = function(input, context) {
  return __assign9({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1InputLogEvent = function(input, context) {
  return __assign9(__assign9({}, input.message !== void 0 && input.message !== null && { message: input.message }), input.timestamp !== void 0 && input.timestamp !== null && { timestamp: input.timestamp });
};
var serializeAws_json1_1InputLogEvents = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1InputLogEvent(entry, context);
  });
};
var serializeAws_json1_1InputLogStreamNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1ListTagsLogGroupRequest = function(input, context) {
  return __assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1LogGroupNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1MetricTransformation = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.defaultValue !== void 0 && input.defaultValue !== null && { defaultValue: input.defaultValue }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.metricValue !== void 0 && input.metricValue !== null && { metricValue: input.metricValue });
};
var serializeAws_json1_1MetricTransformations = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MetricTransformation(entry, context);
  });
};
var serializeAws_json1_1PutDestinationPolicyRequest = function(input, context) {
  return __assign9(__assign9({}, input.accessPolicy !== void 0 && input.accessPolicy !== null && { accessPolicy: input.accessPolicy }), input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1PutDestinationRequest = function(input, context) {
  return __assign9(__assign9(__assign9({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn }), input.targetArn !== void 0 && input.targetArn !== null && { targetArn: input.targetArn });
};
var serializeAws_json1_1PutLogEventsRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.logEvents !== void 0 && input.logEvents !== null && { logEvents: serializeAws_json1_1InputLogEvents(input.logEvents, context) }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.sequenceToken !== void 0 && input.sequenceToken !== null && { sequenceToken: input.sequenceToken });
};
var serializeAws_json1_1PutMetricFilterRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricTransformations !== void 0 && input.metricTransformations !== null && {
    metricTransformations: serializeAws_json1_1MetricTransformations(input.metricTransformations, context)
  });
};
var serializeAws_json1_1PutQueryDefinitionRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9({}, input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.name !== void 0 && input.name !== null && { name: input.name }), input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString });
};
var serializeAws_json1_1PutResourcePolicyRequest = function(input, context) {
  return __assign9(__assign9({}, input.policyDocument !== void 0 && input.policyDocument !== null && { policyDocument: input.policyDocument }), input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1PutRetentionPolicyRequest = function(input, context) {
  return __assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.retentionInDays !== void 0 && input.retentionInDays !== null && { retentionInDays: input.retentionInDays });
};
var serializeAws_json1_1PutSubscriptionFilterRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.destinationArn !== void 0 && input.destinationArn !== null && { destinationArn: input.destinationArn }), input.distribution !== void 0 && input.distribution !== null && { distribution: input.distribution }), input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn });
};
var serializeAws_json1_1StartQueryRequest = function(input, context) {
  return __assign9(__assign9(__assign9(__assign9(__assign9(__assign9({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1StopQueryRequest = function(input, context) {
  return __assign9({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1TagList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TagLogGroupRequest = function(input, context) {
  return __assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1Tags = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read11(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1TestEventMessages = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TestMetricFilterRequest = function(input, context) {
  return __assign9(__assign9({}, input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logEventMessages !== void 0 && input.logEventMessages !== null && {
    logEventMessages: serializeAws_json1_1TestEventMessages(input.logEventMessages, context)
  });
};
var serializeAws_json1_1UntagLogGroupRequest = function(input, context) {
  return __assign9(__assign9({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) });
};
var deserializeAws_json1_1CreateExportTaskResponse = function(output, context) {
  return {
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0
  };
};
var deserializeAws_json1_1DataAlreadyAcceptedException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeleteQueryDefinitionResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1DescribeDestinationsResponse = function(output, context) {
  return {
    destinations: output.destinations !== void 0 && output.destinations !== null ? deserializeAws_json1_1Destinations(output.destinations, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeExportTasksResponse = function(output, context) {
  return {
    exportTasks: output.exportTasks !== void 0 && output.exportTasks !== null ? deserializeAws_json1_1ExportTasks(output.exportTasks, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogGroupsResponse = function(output, context) {
  return {
    logGroups: output.logGroups !== void 0 && output.logGroups !== null ? deserializeAws_json1_1LogGroups(output.logGroups, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogStreamsResponse = function(output, context) {
  return {
    logStreams: output.logStreams !== void 0 && output.logStreams !== null ? deserializeAws_json1_1LogStreams(output.logStreams, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeMetricFiltersResponse = function(output, context) {
  return {
    metricFilters: output.metricFilters !== void 0 && output.metricFilters !== null ? deserializeAws_json1_1MetricFilters(output.metricFilters, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeQueriesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queries: output.queries !== void 0 && output.queries !== null ? deserializeAws_json1_1QueryInfoList(output.queries, context) : void 0
  };
};
var deserializeAws_json1_1DescribeQueryDefinitionsResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queryDefinitions: output.queryDefinitions !== void 0 && output.queryDefinitions !== null ? deserializeAws_json1_1QueryDefinitionList(output.queryDefinitions, context) : void 0
  };
};
var deserializeAws_json1_1DescribeResourcePoliciesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    resourcePolicies: output.resourcePolicies !== void 0 && output.resourcePolicies !== null ? deserializeAws_json1_1ResourcePolicies(output.resourcePolicies, context) : void 0
  };
};
var deserializeAws_json1_1DescribeSubscriptionFiltersResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    subscriptionFilters: output.subscriptionFilters !== void 0 && output.subscriptionFilters !== null ? deserializeAws_json1_1SubscriptionFilters(output.subscriptionFilters, context) : void 0
  };
};
var deserializeAws_json1_1Destination = function(output, context) {
  return {
    accessPolicy: output.accessPolicy !== void 0 && output.accessPolicy !== null ? output.accessPolicy : void 0,
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationName: output.destinationName !== void 0 && output.destinationName !== null ? output.destinationName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0,
    targetArn: output.targetArn !== void 0 && output.targetArn !== null ? output.targetArn : void 0
  };
};
var deserializeAws_json1_1Destinations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Destination(entry, context);
  });
};
var deserializeAws_json1_1ExportTask = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? output.destination : void 0,
    destinationPrefix: output.destinationPrefix !== void 0 && output.destinationPrefix !== null ? output.destinationPrefix : void 0,
    executionInfo: output.executionInfo !== void 0 && output.executionInfo !== null ? deserializeAws_json1_1ExportTaskExecutionInfo(output.executionInfo, context) : void 0,
    from: output.from !== void 0 && output.from !== null ? output.from : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    status: output.status !== void 0 && output.status !== null ? deserializeAws_json1_1ExportTaskStatus(output.status, context) : void 0,
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0,
    taskName: output.taskName !== void 0 && output.taskName !== null ? output.taskName : void 0,
    to: output.to !== void 0 && output.to !== null ? output.to : void 0
  };
};
var deserializeAws_json1_1ExportTaskExecutionInfo = function(output, context) {
  return {
    completionTime: output.completionTime !== void 0 && output.completionTime !== null ? output.completionTime : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0
  };
};
var deserializeAws_json1_1ExportTasks = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ExportTask(entry, context);
  });
};
var deserializeAws_json1_1ExportTaskStatus = function(output, context) {
  return {
    code: output.code !== void 0 && output.code !== null ? output.code : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ExtractedValues = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read11(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1FilteredLogEvent = function(output, context) {
  return {
    eventId: output.eventId !== void 0 && output.eventId !== null ? output.eventId : void 0,
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1FilteredLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1FilteredLogEvent(entry, context);
  });
};
var deserializeAws_json1_1FilterLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1FilteredLogEvents(output.events, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    searchedLogStreams: output.searchedLogStreams !== void 0 && output.searchedLogStreams !== null ? deserializeAws_json1_1SearchedLogStreams(output.searchedLogStreams, context) : void 0
  };
};
var deserializeAws_json1_1GetLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1OutputLogEvents(output.events, context) : void 0,
    nextBackwardToken: output.nextBackwardToken !== void 0 && output.nextBackwardToken !== null ? output.nextBackwardToken : void 0,
    nextForwardToken: output.nextForwardToken !== void 0 && output.nextForwardToken !== null ? output.nextForwardToken : void 0
  };
};
var deserializeAws_json1_1GetLogGroupFieldsResponse = function(output, context) {
  return {
    logGroupFields: output.logGroupFields !== void 0 && output.logGroupFields !== null ? deserializeAws_json1_1LogGroupFieldList(output.logGroupFields, context) : void 0
  };
};
var deserializeAws_json1_1GetLogRecordResponse = function(output, context) {
  return {
    logRecord: output.logRecord !== void 0 && output.logRecord !== null ? deserializeAws_json1_1LogRecord(output.logRecord, context) : void 0
  };
};
var deserializeAws_json1_1GetQueryResultsResponse = function(output, context) {
  return {
    results: output.results !== void 0 && output.results !== null ? deserializeAws_json1_1QueryResults(output.results, context) : void 0,
    statistics: output.statistics !== void 0 && output.statistics !== null ? deserializeAws_json1_1QueryStatistics(output.statistics, context) : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1InvalidOperationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidSequenceTokenException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListTagsLogGroupResponse = function(output, context) {
  return {
    tags: output.tags !== void 0 && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : void 0
  };
};
var deserializeAws_json1_1LogGroup = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    kmsKeyId: output.kmsKeyId !== void 0 && output.kmsKeyId !== null ? output.kmsKeyId : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricFilterCount: output.metricFilterCount !== void 0 && output.metricFilterCount !== null ? output.metricFilterCount : void 0,
    retentionInDays: output.retentionInDays !== void 0 && output.retentionInDays !== null ? output.retentionInDays : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0
  };
};
var deserializeAws_json1_1LogGroupField = function(output, context) {
  return {
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    percent: output.percent !== void 0 && output.percent !== null ? output.percent : void 0
  };
};
var deserializeAws_json1_1LogGroupFieldList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroupField(entry, context);
  });
};
var deserializeAws_json1_1LogGroupNames = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LogGroups = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroup(entry, context);
  });
};
var deserializeAws_json1_1LogRecord = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read11(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1LogStream = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    firstEventTimestamp: output.firstEventTimestamp !== void 0 && output.firstEventTimestamp !== null ? output.firstEventTimestamp : void 0,
    lastEventTimestamp: output.lastEventTimestamp !== void 0 && output.lastEventTimestamp !== null ? output.lastEventTimestamp : void 0,
    lastIngestionTime: output.lastIngestionTime !== void 0 && output.lastIngestionTime !== null ? output.lastIngestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0,
    uploadSequenceToken: output.uploadSequenceToken !== void 0 && output.uploadSequenceToken !== null ? output.uploadSequenceToken : void 0
  };
};
var deserializeAws_json1_1LogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogStream(entry, context);
  });
};
var deserializeAws_json1_1MalformedQueryException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    queryCompileError: output.queryCompileError !== void 0 && output.queryCompileError !== null ? deserializeAws_json1_1QueryCompileError(output.queryCompileError, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricTransformations: output.metricTransformations !== void 0 && output.metricTransformations !== null ? deserializeAws_json1_1MetricTransformations(output.metricTransformations, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilterMatches = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilterMatchRecord(entry, context);
  });
};
var deserializeAws_json1_1MetricFilterMatchRecord = function(output, context) {
  return {
    eventMessage: output.eventMessage !== void 0 && output.eventMessage !== null ? output.eventMessage : void 0,
    eventNumber: output.eventNumber !== void 0 && output.eventNumber !== null ? output.eventNumber : void 0,
    extractedValues: output.extractedValues !== void 0 && output.extractedValues !== null ? deserializeAws_json1_1ExtractedValues(output.extractedValues, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilter(entry, context);
  });
};
var deserializeAws_json1_1MetricTransformation = function(output, context) {
  return {
    defaultValue: output.defaultValue !== void 0 && output.defaultValue !== null ? output.defaultValue : void 0,
    metricName: output.metricName !== void 0 && output.metricName !== null ? output.metricName : void 0,
    metricNamespace: output.metricNamespace !== void 0 && output.metricNamespace !== null ? output.metricNamespace : void 0,
    metricValue: output.metricValue !== void 0 && output.metricValue !== null ? output.metricValue : void 0
  };
};
var deserializeAws_json1_1MetricTransformations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricTransformation(entry, context);
  });
};
var deserializeAws_json1_1OperationAbortedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OutputLogEvent = function(output, context) {
  return {
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1OutputLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1OutputLogEvent(entry, context);
  });
};
var deserializeAws_json1_1PutDestinationResponse = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? deserializeAws_json1_1Destination(output.destination, context) : void 0
  };
};
var deserializeAws_json1_1PutLogEventsResponse = function(output, context) {
  return {
    nextSequenceToken: output.nextSequenceToken !== void 0 && output.nextSequenceToken !== null ? output.nextSequenceToken : void 0,
    rejectedLogEventsInfo: output.rejectedLogEventsInfo !== void 0 && output.rejectedLogEventsInfo !== null ? deserializeAws_json1_1RejectedLogEventsInfo(output.rejectedLogEventsInfo, context) : void 0
  };
};
var deserializeAws_json1_1PutQueryDefinitionResponse = function(output, context) {
  return {
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0
  };
};
var deserializeAws_json1_1PutResourcePolicyResponse = function(output, context) {
  return {
    resourcePolicy: output.resourcePolicy !== void 0 && output.resourcePolicy !== null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : void 0
  };
};
var deserializeAws_json1_1QueryCompileError = function(output, context) {
  return {
    location: output.location !== void 0 && output.location !== null ? deserializeAws_json1_1QueryCompileErrorLocation(output.location, context) : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1QueryCompileErrorLocation = function(output, context) {
  return {
    endCharOffset: output.endCharOffset !== void 0 && output.endCharOffset !== null ? output.endCharOffset : void 0,
    startCharOffset: output.startCharOffset !== void 0 && output.startCharOffset !== null ? output.startCharOffset : void 0
  };
};
var deserializeAws_json1_1QueryDefinition = function(output, context) {
  return {
    lastModified: output.lastModified !== void 0 && output.lastModified !== null ? output.lastModified : void 0,
    logGroupNames: output.logGroupNames !== void 0 && output.logGroupNames !== null ? deserializeAws_json1_1LogGroupNames(output.logGroupNames, context) : void 0,
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0
  };
};
var deserializeAws_json1_1QueryDefinitionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryDefinition(entry, context);
  });
};
var deserializeAws_json1_1QueryInfo = function(output, context) {
  return {
    createTime: output.createTime !== void 0 && output.createTime !== null ? output.createTime : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1QueryInfoList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryInfo(entry, context);
  });
};
var deserializeAws_json1_1QueryResults = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultRows(entry, context);
  });
};
var deserializeAws_json1_1QueryStatistics = function(output, context) {
  return {
    bytesScanned: output.bytesScanned !== void 0 && output.bytesScanned !== null ? output.bytesScanned : void 0,
    recordsMatched: output.recordsMatched !== void 0 && output.recordsMatched !== null ? output.recordsMatched : void 0,
    recordsScanned: output.recordsScanned !== void 0 && output.recordsScanned !== null ? output.recordsScanned : void 0
  };
};
var deserializeAws_json1_1RejectedLogEventsInfo = function(output, context) {
  return {
    expiredLogEventEndIndex: output.expiredLogEventEndIndex !== void 0 && output.expiredLogEventEndIndex !== null ? output.expiredLogEventEndIndex : void 0,
    tooNewLogEventStartIndex: output.tooNewLogEventStartIndex !== void 0 && output.tooNewLogEventStartIndex !== null ? output.tooNewLogEventStartIndex : void 0,
    tooOldLogEventEndIndex: output.tooOldLogEventEndIndex !== void 0 && output.tooOldLogEventEndIndex !== null ? output.tooOldLogEventEndIndex : void 0
  };
};
var deserializeAws_json1_1ResourceAlreadyExistsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourcePolicies = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResourcePolicy(entry, context);
  });
};
var deserializeAws_json1_1ResourcePolicy = function(output, context) {
  return {
    lastUpdatedTime: output.lastUpdatedTime !== void 0 && output.lastUpdatedTime !== null ? output.lastUpdatedTime : void 0,
    policyDocument: output.policyDocument !== void 0 && output.policyDocument !== null ? output.policyDocument : void 0,
    policyName: output.policyName !== void 0 && output.policyName !== null ? output.policyName : void 0
  };
};
var deserializeAws_json1_1ResultField = function(output, context) {
  return {
    field: output.field !== void 0 && output.field !== null ? output.field : void 0,
    value: output.value !== void 0 && output.value !== null ? output.value : void 0
  };
};
var deserializeAws_json1_1ResultRows = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultField(entry, context);
  });
};
var deserializeAws_json1_1SearchedLogStream = function(output, context) {
  return {
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    searchedCompletely: output.searchedCompletely !== void 0 && output.searchedCompletely !== null ? output.searchedCompletely : void 0
  };
};
var deserializeAws_json1_1SearchedLogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SearchedLogStream(entry, context);
  });
};
var deserializeAws_json1_1ServiceUnavailableException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1StartQueryResponse = function(output, context) {
  return {
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0
  };
};
var deserializeAws_json1_1StopQueryResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationArn: output.destinationArn !== void 0 && output.destinationArn !== null ? output.destinationArn : void 0,
    distribution: output.distribution !== void 0 && output.distribution !== null ? output.distribution : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SubscriptionFilter(entry, context);
  });
};
var deserializeAws_json1_1Tags = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read11(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign9(__assign9({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1TestMetricFilterResponse = function(output, context) {
  return {
    matches: output.matches !== void 0 && output.matches !== null ? deserializeAws_json1_1MetricFilterMatches(output.matches, context) : void 0
  };
};
var deserializeAws_json1_1UnrecognizedClientException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeMetadata = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function(streamBody, context) {
  return collectBody(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
  return __awaiter5(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator5(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody = function(streamBody, context) {
  return collectBodyString(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k) {
      return k.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/middleware-serde/node_modules/tslib/tslib.es6.js
var __assign21 = function() {
  __assign21 = Object.assign || function __assign28(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign21.apply(this, arguments);
};
function __awaiter19(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator19(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-serde/dist/es/deserializerMiddleware.js
var deserializerMiddleware = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter19(void 0, void 0, void 0, function() {
        var response, parsed;
        return __generator19(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              return [4, deserializer(response, options)];
            case 2:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serializerMiddleware.js
var serializerMiddleware = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter19(void 0, void 0, void 0, function() {
        var request;
        return __generator19(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign21(__assign21({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serdePlugin.js
var deserializerMiddlewareOption = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/AssociateKmsKeyCommand.js
var AssociateKmsKeyCommand = (
  /** @class */
  function(_super) {
    __extends5(AssociateKmsKeyCommand2, _super);
    function AssociateKmsKeyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    AssociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "AssociateKmsKeyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    AssociateKmsKeyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1AssociateKmsKeyCommand(input, context);
    };
    AssociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);
    };
    return AssociateKmsKeyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CancelExportTaskCommand.js
var CancelExportTaskCommand = (
  /** @class */
  function(_super) {
    __extends5(CancelExportTaskCommand2, _super);
    function CancelExportTaskCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CancelExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CancelExportTaskCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: CancelExportTaskRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CancelExportTaskCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CancelExportTaskCommand(input, context);
    };
    CancelExportTaskCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CancelExportTaskCommand(output, context);
    };
    return CancelExportTaskCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateExportTaskCommand.js
var CreateExportTaskCommand = (
  /** @class */
  function(_super) {
    __extends5(CreateExportTaskCommand2, _super);
    function CreateExportTaskCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CreateExportTaskCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateExportTaskRequest.filterSensitiveLog,
        outputFilterSensitiveLog: CreateExportTaskResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateExportTaskCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateExportTaskCommand(input, context);
    };
    CreateExportTaskCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateExportTaskCommand(output, context);
    };
    return CreateExportTaskCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogGroupCommand.js
var CreateLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends5(CreateLogGroupCommand2, _super);
    function CreateLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CreateLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateLogGroupCommand(input, context);
    };
    CreateLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateLogGroupCommand(output, context);
    };
    return CreateLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogStreamCommand.js
var CreateLogStreamCommand = (
  /** @class */
  function(_super) {
    __extends5(CreateLogStreamCommand2, _super);
    function CreateLogStreamCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CreateLogStreamCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateLogStreamRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateLogStreamCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateLogStreamCommand(input, context);
    };
    CreateLogStreamCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateLogStreamCommand(output, context);
    };
    return CreateLogStreamCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteDestinationCommand.js
var DeleteDestinationCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteDestinationCommand2, _super);
    function DeleteDestinationCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteDestinationCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteDestinationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteDestinationCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteDestinationCommand(input, context);
    };
    DeleteDestinationCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteDestinationCommand(output, context);
    };
    return DeleteDestinationCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogGroupCommand.js
var DeleteLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteLogGroupCommand2, _super);
    function DeleteLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteLogGroupCommand(input, context);
    };
    DeleteLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteLogGroupCommand(output, context);
    };
    return DeleteLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogStreamCommand.js
var DeleteLogStreamCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteLogStreamCommand2, _super);
    function DeleteLogStreamCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteLogStreamCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteLogStreamRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteLogStreamCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteLogStreamCommand(input, context);
    };
    DeleteLogStreamCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteLogStreamCommand(output, context);
    };
    return DeleteLogStreamCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteMetricFilterCommand.js
var DeleteMetricFilterCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteMetricFilterCommand2, _super);
    function DeleteMetricFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteMetricFilterCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteMetricFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteMetricFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteMetricFilterCommand(input, context);
    };
    DeleteMetricFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteMetricFilterCommand(output, context);
    };
    return DeleteMetricFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteQueryDefinitionCommand.js
var DeleteQueryDefinitionCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteQueryDefinitionCommand2, _super);
    function DeleteQueryDefinitionCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteQueryDefinitionCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteQueryDefinitionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DeleteQueryDefinitionResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteQueryDefinitionCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteQueryDefinitionCommand(input, context);
    };
    DeleteQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteQueryDefinitionCommand(output, context);
    };
    return DeleteQueryDefinitionCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteResourcePolicyCommand.js
var DeleteResourcePolicyCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteResourcePolicyCommand2, _super);
    function DeleteResourcePolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteResourcePolicyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteResourcePolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteResourcePolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteResourcePolicyCommand(input, context);
    };
    DeleteResourcePolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteResourcePolicyCommand(output, context);
    };
    return DeleteResourcePolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteRetentionPolicyCommand.js
var DeleteRetentionPolicyCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteRetentionPolicyCommand2, _super);
    function DeleteRetentionPolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteRetentionPolicyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteRetentionPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteRetentionPolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteRetentionPolicyCommand(input, context);
    };
    DeleteRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteRetentionPolicyCommand(output, context);
    };
    return DeleteRetentionPolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteSubscriptionFilterCommand.js
var DeleteSubscriptionFilterCommand = (
  /** @class */
  function(_super) {
    __extends5(DeleteSubscriptionFilterCommand2, _super);
    function DeleteSubscriptionFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteSubscriptionFilterCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteSubscriptionFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteSubscriptionFilterCommand(input, context);
    };
    DeleteSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteSubscriptionFilterCommand(output, context);
    };
    return DeleteSubscriptionFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeDestinationsCommand.js
var DescribeDestinationsCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeDestinationsCommand2, _super);
    function DescribeDestinationsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeDestinationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeDestinationsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeDestinationsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeDestinationsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeDestinationsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeDestinationsCommand(input, context);
    };
    DescribeDestinationsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeDestinationsCommand(output, context);
    };
    return DescribeDestinationsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeExportTasksCommand.js
var DescribeExportTasksCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeExportTasksCommand2, _super);
    function DescribeExportTasksCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeExportTasksCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeExportTasksCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeExportTasksRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeExportTasksResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeExportTasksCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeExportTasksCommand(input, context);
    };
    DescribeExportTasksCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeExportTasksCommand(output, context);
    };
    return DescribeExportTasksCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogGroupsCommand.js
var DescribeLogGroupsCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeLogGroupsCommand2, _super);
    function DescribeLogGroupsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeLogGroupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeLogGroupsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeLogGroupsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeLogGroupsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeLogGroupsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeLogGroupsCommand(input, context);
    };
    DescribeLogGroupsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeLogGroupsCommand(output, context);
    };
    return DescribeLogGroupsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogStreamsCommand.js
var DescribeLogStreamsCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeLogStreamsCommand2, _super);
    function DescribeLogStreamsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeLogStreamsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeLogStreamsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeLogStreamsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeLogStreamsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeLogStreamsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeLogStreamsCommand(input, context);
    };
    DescribeLogStreamsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeLogStreamsCommand(output, context);
    };
    return DescribeLogStreamsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeMetricFiltersCommand.js
var DescribeMetricFiltersCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeMetricFiltersCommand2, _super);
    function DescribeMetricFiltersCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeMetricFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeMetricFiltersCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeMetricFiltersRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeMetricFiltersResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeMetricFiltersCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeMetricFiltersCommand(input, context);
    };
    DescribeMetricFiltersCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeMetricFiltersCommand(output, context);
    };
    return DescribeMetricFiltersCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueriesCommand.js
var DescribeQueriesCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeQueriesCommand2, _super);
    function DescribeQueriesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeQueriesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeQueriesCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeQueriesRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeQueriesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeQueriesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeQueriesCommand(input, context);
    };
    DescribeQueriesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeQueriesCommand(output, context);
    };
    return DescribeQueriesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueryDefinitionsCommand.js
var DescribeQueryDefinitionsCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeQueryDefinitionsCommand2, _super);
    function DescribeQueryDefinitionsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeQueryDefinitionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeQueryDefinitionsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeQueryDefinitionsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeQueryDefinitionsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeQueryDefinitionsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeQueryDefinitionsCommand(input, context);
    };
    DescribeQueryDefinitionsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeQueryDefinitionsCommand(output, context);
    };
    return DescribeQueryDefinitionsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeResourcePoliciesCommand.js
var DescribeResourcePoliciesCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeResourcePoliciesCommand2, _super);
    function DescribeResourcePoliciesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeResourcePoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeResourcePoliciesCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeResourcePoliciesRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeResourcePoliciesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeResourcePoliciesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeResourcePoliciesCommand(input, context);
    };
    DescribeResourcePoliciesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeResourcePoliciesCommand(output, context);
    };
    return DescribeResourcePoliciesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeSubscriptionFiltersCommand.js
var DescribeSubscriptionFiltersCommand = (
  /** @class */
  function(_super) {
    __extends5(DescribeSubscriptionFiltersCommand2, _super);
    function DescribeSubscriptionFiltersCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeSubscriptionFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeSubscriptionFiltersCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeSubscriptionFiltersRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeSubscriptionFiltersResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeSubscriptionFiltersCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeSubscriptionFiltersCommand(input, context);
    };
    DescribeSubscriptionFiltersCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeSubscriptionFiltersCommand(output, context);
    };
    return DescribeSubscriptionFiltersCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DisassociateKmsKeyCommand.js
var DisassociateKmsKeyCommand = (
  /** @class */
  function(_super) {
    __extends5(DisassociateKmsKeyCommand2, _super);
    function DisassociateKmsKeyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DisassociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DisassociateKmsKeyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: DisassociateKmsKeyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DisassociateKmsKeyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DisassociateKmsKeyCommand(input, context);
    };
    DisassociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DisassociateKmsKeyCommand(output, context);
    };
    return DisassociateKmsKeyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/FilterLogEventsCommand.js
var FilterLogEventsCommand = (
  /** @class */
  function(_super) {
    __extends5(FilterLogEventsCommand2, _super);
    function FilterLogEventsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    FilterLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "FilterLogEventsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: FilterLogEventsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: FilterLogEventsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    FilterLogEventsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1FilterLogEventsCommand(input, context);
    };
    FilterLogEventsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1FilterLogEventsCommand(output, context);
    };
    return FilterLogEventsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogEventsCommand.js
var GetLogEventsCommand = (
  /** @class */
  function(_super) {
    __extends5(GetLogEventsCommand2, _super);
    function GetLogEventsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetLogEventsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetLogEventsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetLogEventsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetLogEventsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetLogEventsCommand(input, context);
    };
    GetLogEventsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetLogEventsCommand(output, context);
    };
    return GetLogEventsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogGroupFieldsCommand.js
var GetLogGroupFieldsCommand = (
  /** @class */
  function(_super) {
    __extends5(GetLogGroupFieldsCommand2, _super);
    function GetLogGroupFieldsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetLogGroupFieldsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetLogGroupFieldsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetLogGroupFieldsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetLogGroupFieldsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetLogGroupFieldsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetLogGroupFieldsCommand(input, context);
    };
    GetLogGroupFieldsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetLogGroupFieldsCommand(output, context);
    };
    return GetLogGroupFieldsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogRecordCommand.js
var GetLogRecordCommand = (
  /** @class */
  function(_super) {
    __extends5(GetLogRecordCommand2, _super);
    function GetLogRecordCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetLogRecordCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetLogRecordCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetLogRecordRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetLogRecordResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetLogRecordCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetLogRecordCommand(input, context);
    };
    GetLogRecordCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetLogRecordCommand(output, context);
    };
    return GetLogRecordCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetQueryResultsCommand.js
var GetQueryResultsCommand = (
  /** @class */
  function(_super) {
    __extends5(GetQueryResultsCommand2, _super);
    function GetQueryResultsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetQueryResultsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetQueryResultsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetQueryResultsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetQueryResultsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetQueryResultsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetQueryResultsCommand(input, context);
    };
    GetQueryResultsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetQueryResultsCommand(output, context);
    };
    return GetQueryResultsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/ListTagsLogGroupCommand.js
var ListTagsLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends5(ListTagsLogGroupCommand2, _super);
    function ListTagsLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    ListTagsLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "ListTagsLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: ListTagsLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: ListTagsLogGroupResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    ListTagsLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1ListTagsLogGroupCommand(input, context);
    };
    ListTagsLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1ListTagsLogGroupCommand(output, context);
    };
    return ListTagsLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationCommand.js
var PutDestinationCommand = (
  /** @class */
  function(_super) {
    __extends5(PutDestinationCommand2, _super);
    function PutDestinationCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutDestinationCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutDestinationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutDestinationResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutDestinationCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutDestinationCommand(input, context);
    };
    PutDestinationCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutDestinationCommand(output, context);
    };
    return PutDestinationCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationPolicyCommand.js
var PutDestinationPolicyCommand = (
  /** @class */
  function(_super) {
    __extends5(PutDestinationPolicyCommand2, _super);
    function PutDestinationPolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutDestinationPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutDestinationPolicyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutDestinationPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutDestinationPolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutDestinationPolicyCommand(input, context);
    };
    PutDestinationPolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutDestinationPolicyCommand(output, context);
    };
    return PutDestinationPolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutLogEventsCommand.js
var PutLogEventsCommand = (
  /** @class */
  function(_super) {
    __extends5(PutLogEventsCommand2, _super);
    function PutLogEventsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutLogEventsCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutLogEventsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutLogEventsCommand(input, context);
    };
    PutLogEventsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutLogEventsCommand(output, context);
    };
    return PutLogEventsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutMetricFilterCommand.js
var PutMetricFilterCommand = (
  /** @class */
  function(_super) {
    __extends5(PutMetricFilterCommand2, _super);
    function PutMetricFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutMetricFilterCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutMetricFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutMetricFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutMetricFilterCommand(input, context);
    };
    PutMetricFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutMetricFilterCommand(output, context);
    };
    return PutMetricFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutQueryDefinitionCommand.js
var PutQueryDefinitionCommand = (
  /** @class */
  function(_super) {
    __extends5(PutQueryDefinitionCommand2, _super);
    function PutQueryDefinitionCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutQueryDefinitionCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutQueryDefinitionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutQueryDefinitionResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutQueryDefinitionCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutQueryDefinitionCommand(input, context);
    };
    PutQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutQueryDefinitionCommand(output, context);
    };
    return PutQueryDefinitionCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutResourcePolicyCommand.js
var PutResourcePolicyCommand = (
  /** @class */
  function(_super) {
    __extends5(PutResourcePolicyCommand2, _super);
    function PutResourcePolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutResourcePolicyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutResourcePolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutResourcePolicyResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutResourcePolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutResourcePolicyCommand(input, context);
    };
    PutResourcePolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutResourcePolicyCommand(output, context);
    };
    return PutResourcePolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutRetentionPolicyCommand.js
var PutRetentionPolicyCommand = (
  /** @class */
  function(_super) {
    __extends5(PutRetentionPolicyCommand2, _super);
    function PutRetentionPolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutRetentionPolicyCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutRetentionPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutRetentionPolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutRetentionPolicyCommand(input, context);
    };
    PutRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutRetentionPolicyCommand(output, context);
    };
    return PutRetentionPolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutSubscriptionFilterCommand.js
var PutSubscriptionFilterCommand = (
  /** @class */
  function(_super) {
    __extends5(PutSubscriptionFilterCommand2, _super);
    function PutSubscriptionFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutSubscriptionFilterCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);
    };
    PutSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);
    };
    return PutSubscriptionFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StartQueryCommand.js
var StartQueryCommand = (
  /** @class */
  function(_super) {
    __extends5(StartQueryCommand2, _super);
    function StartQueryCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    StartQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "StartQueryCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: StartQueryRequest.filterSensitiveLog,
        outputFilterSensitiveLog: StartQueryResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    StartQueryCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1StartQueryCommand(input, context);
    };
    StartQueryCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1StartQueryCommand(output, context);
    };
    return StartQueryCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StopQueryCommand.js
var StopQueryCommand = (
  /** @class */
  function(_super) {
    __extends5(StopQueryCommand2, _super);
    function StopQueryCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    StopQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "StopQueryCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: StopQueryRequest.filterSensitiveLog,
        outputFilterSensitiveLog: StopQueryResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    StopQueryCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1StopQueryCommand(input, context);
    };
    StopQueryCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1StopQueryCommand(output, context);
    };
    return StopQueryCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TagLogGroupCommand.js
var TagLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends5(TagLogGroupCommand2, _super);
    function TagLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    TagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "TagLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: TagLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    TagLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1TagLogGroupCommand(input, context);
    };
    TagLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1TagLogGroupCommand(output, context);
    };
    return TagLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TestMetricFilterCommand.js
var TestMetricFilterCommand = (
  /** @class */
  function(_super) {
    __extends5(TestMetricFilterCommand2, _super);
    function TestMetricFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    TestMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "TestMetricFilterCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: TestMetricFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: TestMetricFilterResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    TestMetricFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1TestMetricFilterCommand(input, context);
    };
    TestMetricFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1TestMetricFilterCommand(output, context);
    };
    return TestMetricFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/UntagLogGroupCommand.js
var UntagLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends5(UntagLogGroupCommand2, _super);
    function UntagLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    UntagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger16 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "UntagLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger16,
        clientName,
        commandName,
        inputFilterSensitiveLog: UntagLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    UntagLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1UntagLogGroupCommand(input, context);
    };
    UntagLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1UntagLogGroupCommand(output, context);
    };
    return UntagLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogs.js
var CloudWatchLogs = (
  /** @class */
  function(_super) {
    __extends5(CloudWatchLogs2, _super);
    function CloudWatchLogs2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudWatchLogs2.prototype.associateKmsKey = function(args, optionsOrCb, cb) {
      var command = new AssociateKmsKeyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.cancelExportTask = function(args, optionsOrCb, cb) {
      var command = new CancelExportTaskCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.createExportTask = function(args, optionsOrCb, cb) {
      var command = new CreateExportTaskCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.createLogGroup = function(args, optionsOrCb, cb) {
      var command = new CreateLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.createLogStream = function(args, optionsOrCb, cb) {
      var command = new CreateLogStreamCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteDestination = function(args, optionsOrCb, cb) {
      var command = new DeleteDestinationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteLogGroup = function(args, optionsOrCb, cb) {
      var command = new DeleteLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteLogStream = function(args, optionsOrCb, cb) {
      var command = new DeleteLogStreamCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteMetricFilter = function(args, optionsOrCb, cb) {
      var command = new DeleteMetricFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteQueryDefinition = function(args, optionsOrCb, cb) {
      var command = new DeleteQueryDefinitionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteResourcePolicy = function(args, optionsOrCb, cb) {
      var command = new DeleteResourcePolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteRetentionPolicy = function(args, optionsOrCb, cb) {
      var command = new DeleteRetentionPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteSubscriptionFilter = function(args, optionsOrCb, cb) {
      var command = new DeleteSubscriptionFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeDestinations = function(args, optionsOrCb, cb) {
      var command = new DescribeDestinationsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeExportTasks = function(args, optionsOrCb, cb) {
      var command = new DescribeExportTasksCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeLogGroups = function(args, optionsOrCb, cb) {
      var command = new DescribeLogGroupsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeLogStreams = function(args, optionsOrCb, cb) {
      var command = new DescribeLogStreamsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeMetricFilters = function(args, optionsOrCb, cb) {
      var command = new DescribeMetricFiltersCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeQueries = function(args, optionsOrCb, cb) {
      var command = new DescribeQueriesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeQueryDefinitions = function(args, optionsOrCb, cb) {
      var command = new DescribeQueryDefinitionsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeResourcePolicies = function(args, optionsOrCb, cb) {
      var command = new DescribeResourcePoliciesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeSubscriptionFilters = function(args, optionsOrCb, cb) {
      var command = new DescribeSubscriptionFiltersCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.disassociateKmsKey = function(args, optionsOrCb, cb) {
      var command = new DisassociateKmsKeyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.filterLogEvents = function(args, optionsOrCb, cb) {
      var command = new FilterLogEventsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getLogEvents = function(args, optionsOrCb, cb) {
      var command = new GetLogEventsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getLogGroupFields = function(args, optionsOrCb, cb) {
      var command = new GetLogGroupFieldsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getLogRecord = function(args, optionsOrCb, cb) {
      var command = new GetLogRecordCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getQueryResults = function(args, optionsOrCb, cb) {
      var command = new GetQueryResultsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.listTagsLogGroup = function(args, optionsOrCb, cb) {
      var command = new ListTagsLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putDestination = function(args, optionsOrCb, cb) {
      var command = new PutDestinationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putDestinationPolicy = function(args, optionsOrCb, cb) {
      var command = new PutDestinationPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putLogEvents = function(args, optionsOrCb, cb) {
      var command = new PutLogEventsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putMetricFilter = function(args, optionsOrCb, cb) {
      var command = new PutMetricFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putQueryDefinition = function(args, optionsOrCb, cb) {
      var command = new PutQueryDefinitionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putResourcePolicy = function(args, optionsOrCb, cb) {
      var command = new PutResourcePolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putRetentionPolicy = function(args, optionsOrCb, cb) {
      var command = new PutRetentionPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putSubscriptionFilter = function(args, optionsOrCb, cb) {
      var command = new PutSubscriptionFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.startQuery = function(args, optionsOrCb, cb) {
      var command = new StartQueryCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.stopQuery = function(args, optionsOrCb, cb) {
      var command = new StopQueryCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.tagLogGroup = function(args, optionsOrCb, cb) {
      var command = new TagLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.testMetricFilter = function(args, optionsOrCb, cb) {
      var command = new TestMetricFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.untagLogGroup = function(args, optionsOrCb, cb) {
      var command = new UntagLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    return CloudWatchLogs2;
  }(CloudWatchLogsClient)
);

// node_modules/@aws-amplify/core/lib-esm/Providers/AWSCloudWatchProvider.js
var __awaiter20 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator20 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read23 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var logger8 = new ConsoleLogger("AWSCloudWatch");
var AWSCloudWatchProvider = (
  /** @class */
  function() {
    function AWSCloudWatchProvider2(config) {
      this.configure(config);
      this._dataTracker = {
        eventUploadInProgress: false,
        logEvents: []
      };
      this._currentLogBatch = [];
      this._initiateLogPushInterval();
    }
    AWSCloudWatchProvider2.prototype.getProviderName = function() {
      return AWSCloudWatchProvider2.PROVIDER_NAME;
    };
    AWSCloudWatchProvider2.prototype.getCategoryName = function() {
      return AWSCloudWatchProvider2.CATEGORY;
    };
    AWSCloudWatchProvider2.prototype.getLogQueue = function() {
      return this._dataTracker.logEvents;
    };
    AWSCloudWatchProvider2.prototype.configure = function(config) {
      if (!config)
        return this._config || {};
      var conf = Object.assign({}, this._config, parseAWSExports(config).Logging, config);
      this._config = conf;
      return this._config;
    };
    AWSCloudWatchProvider2.prototype.createLogGroup = function(params) {
      return __awaiter20(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_1;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger8.debug("creating new log group in CloudWatch - ", params.logGroupName);
              cmd = new CreateLogGroupCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_1 = _a.sent();
              logger8.error("error creating log group - ".concat(error_1));
              throw error_1;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.getLogGroups = function(params) {
      return __awaiter20(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_2;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger8.debug("getting list of log groups");
              cmd = new DescribeLogGroupsCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_2 = _a.sent();
              logger8.error("error getting log group - ".concat(error_2));
              throw error_2;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.createLogStream = function(params) {
      return __awaiter20(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_3;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger8.debug("creating new log stream in CloudWatch - ", params.logStreamName);
              cmd = new CreateLogStreamCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_3 = _a.sent();
              logger8.error("error creating log stream - ".concat(error_3));
              throw error_3;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.getLogStreams = function(params) {
      return __awaiter20(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_4;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger8.debug("getting list of log streams");
              cmd = new DescribeLogStreamsCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_4 = _a.sent();
              logger8.error("error getting log stream - ".concat(error_4));
              throw error_4;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.getLogEvents = function(params) {
      return __awaiter20(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_5;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger8.debug("getting log events from stream - ", params.logStreamName);
              cmd = new GetLogEventsCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_5 = _a.sent();
              logger8.error("error getting log events - ".concat(error_5));
              throw error_5;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.pushLogs = function(logs) {
      logger8.debug("pushing log events to Cloudwatch...");
      this._dataTracker.logEvents = __spreadArray4(__spreadArray4([], __read23(this._dataTracker.logEvents), false), __read23(logs), false);
    };
    AWSCloudWatchProvider2.prototype._validateLogGroupExistsAndCreate = function(logGroupName) {
      return __awaiter20(this, void 0, void 0, function() {
        var credentialsOK, currGroups, foundGroups, err_1, errString;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this._dataTracker.verifiedLogGroup) {
                return [2, this._dataTracker.verifiedLogGroup];
              }
              _a.label = 1;
            case 1:
              _a.trys.push([1, 5, , 6]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              return [4, this.getLogGroups({
                logGroupNamePrefix: logGroupName
              })];
            case 3:
              currGroups = _a.sent();
              if (!(typeof currGroups === "string") && currGroups.logGroups) {
                foundGroups = currGroups.logGroups.filter(function(group) {
                  return group.logGroupName === logGroupName;
                });
                if (foundGroups.length > 0) {
                  this._dataTracker.verifiedLogGroup = foundGroups[0];
                  return [2, foundGroups[0]];
                }
              }
              return [4, this.createLogGroup({ logGroupName })];
            case 4:
              _a.sent();
              return [2, null];
            case 5:
              err_1 = _a.sent();
              errString = "failure during log group search: ".concat(err_1);
              logger8.error(errString);
              throw err_1;
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._validateLogStreamExists = function(logGroupName, logStreamName) {
      return __awaiter20(this, void 0, void 0, function() {
        var credentialsOK, currStreams, foundStreams, err_2, errString;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 1:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              return [4, this.getLogStreams({
                logGroupName,
                logStreamNamePrefix: logStreamName
              })];
            case 2:
              currStreams = _a.sent();
              if (currStreams.logStreams) {
                foundStreams = currStreams.logStreams.filter(function(stream) {
                  return stream.logStreamName === logStreamName;
                });
                if (foundStreams.length > 0) {
                  this._nextSequenceToken = foundStreams[0].uploadSequenceToken;
                  return [2, foundStreams[0]];
                }
              }
              return [4, this.createLogStream({
                logGroupName,
                logStreamName
              })];
            case 3:
              _a.sent();
              return [2, null];
            case 4:
              err_2 = _a.sent();
              errString = "failure during log stream search: ".concat(err_2);
              logger8.error(errString);
              throw err_2;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._sendLogEvents = function(params) {
      return __awaiter20(this, void 0, void 0, function() {
        var credentialsOK, cmd, client, output, err_3, errString;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              return [4, this._ensureCredentials()];
            case 1:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              logger8.debug("sending log events to stream - ", params.logStreamName);
              cmd = new PutLogEventsCommand(params);
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 2:
              output = _a.sent();
              return [2, output];
            case 3:
              err_3 = _a.sent();
              errString = "failure during log push: ".concat(err_3);
              logger8.error(errString);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._initCloudWatchLogs = function() {
      return new CloudWatchLogsClient({
        region: this._config.region,
        credentials: this._config.credentials,
        customUserAgent: getAmplifyUserAgent(),
        endpoint: this._config.endpoint
      });
    };
    AWSCloudWatchProvider2.prototype._ensureCredentials = function() {
      return __awaiter20(this, void 0, void 0, function() {
        var _this = this;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, Credentials.get().then(function(credentials) {
                if (!credentials)
                  return false;
                var cred = Credentials.shear(credentials);
                logger8.debug("set credentials for logging", cred);
                _this._config.credentials = cred;
                return true;
              }).catch(function(error) {
                logger8.warn("ensure credentials error", error);
                return false;
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._getNextSequenceToken = function() {
      return __awaiter20(this, void 0, void 0, function() {
        var logStream, err_4;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {
                return [2, this._nextSequenceToken];
              }
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];
            case 2:
              _a.sent();
              this._nextSequenceToken = void 0;
              return [4, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];
            case 3:
              logStream = _a.sent();
              if (logStream) {
                this._nextSequenceToken = logStream.uploadSequenceToken;
              }
              return [2, this._nextSequenceToken];
            case 4:
              err_4 = _a.sent();
              logger8.error("failure while getting next sequence token: ".concat(err_4));
              throw err_4;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._safeUploadLogEvents = function() {
      return __awaiter20(this, void 0, void 0, function() {
        var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              return [4, this._getNextSequenceToken()];
            case 1:
              seqToken = _a.sent();
              logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;
              putLogsPayload = {
                logGroupName: this._config.logGroupName,
                logStreamName: this._config.logStreamName,
                logEvents: logBatch,
                sequenceToken: seqToken
              };
              this._dataTracker.eventUploadInProgress = true;
              return [4, this._sendLogEvents(putLogsPayload)];
            case 2:
              sendLogEventsResponse = _a.sent();
              this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;
              this._dataTracker.eventUploadInProgress = false;
              this._currentLogBatch = [];
              return [2, sendLogEventsResponse];
            case 3:
              err_5 = _a.sent();
              logger8.error("error during _safeUploadLogEvents: ".concat(err_5));
              if (RETRY_ERROR_CODES.includes(err_5.name)) {
                this._getNewSequenceTokenAndSubmit({
                  logEvents: this._currentLogBatch,
                  logGroupName: this._config.logGroupName,
                  logStreamName: this._config.logStreamName
                });
              } else {
                this._dataTracker.eventUploadInProgress = false;
                throw err_5;
              }
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._getBufferedBatchOfLogs = function() {
      var currentEventIdx = 0;
      var totalByteSize = 0;
      while (currentEventIdx < this._dataTracker.logEvents.length) {
        var currentEvent = this._dataTracker.logEvents[currentEventIdx];
        var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;
        if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {
          var errString = "Log entry exceeds maximum size for CloudWatch logs. Log size: ".concat(eventSize, ". Truncating log message.");
          logger8.warn(errString);
          currentEvent.message = currentEvent.message.substring(0, eventSize);
        }
        if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)
          break;
        totalByteSize += eventSize;
        currentEventIdx++;
      }
      this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);
      return this._currentLogBatch;
    };
    AWSCloudWatchProvider2.prototype._getNewSequenceTokenAndSubmit = function(payload) {
      return __awaiter20(this, void 0, void 0, function() {
        var seqToken, sendLogEventsRepsonse, err_6;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              this._nextSequenceToken = void 0;
              this._dataTracker.eventUploadInProgress = true;
              return [4, this._getNextSequenceToken()];
            case 1:
              seqToken = _a.sent();
              payload.sequenceToken = seqToken;
              return [4, this._sendLogEvents(payload)];
            case 2:
              sendLogEventsRepsonse = _a.sent();
              this._dataTracker.eventUploadInProgress = false;
              this._currentLogBatch = [];
              return [2, sendLogEventsRepsonse];
            case 3:
              err_6 = _a.sent();
              logger8.error("error when retrying log submission with new sequence token: ".concat(err_6));
              this._dataTracker.eventUploadInProgress = false;
              throw err_6;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._initiateLogPushInterval = function() {
      var _this = this;
      if (this._timer) {
        clearInterval(this._timer);
      }
      this._timer = setInterval(function() {
        return __awaiter20(_this, void 0, void 0, function() {
          var err_7;
          return __generator20(this, function(_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 3, , 4]);
                if (!this._getDocUploadPermissibility())
                  return [3, 2];
                return [4, this._safeUploadLogEvents()];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                return [3, 4];
              case 3:
                err_7 = _a.sent();
                logger8.error("error when calling _safeUploadLogEvents in the timer interval - ".concat(err_7));
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, 2e3);
    };
    AWSCloudWatchProvider2.prototype._getDocUploadPermissibility = function() {
      return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;
    };
    AWSCloudWatchProvider2.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;
    AWSCloudWatchProvider2.CATEGORY = AWS_CLOUDWATCH_CATEGORY;
    return AWSCloudWatchProvider2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
var __awaiter21 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator21 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger9 = new ConsoleLogger("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger9.debug("not in the browser, directly resolved");
    return res();
  }
  var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
  if (ga) {
    logger9.debug("google api already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var GoogleOAuth = (
  /** @class */
  function() {
    function GoogleOAuth3() {
      this.initialized = false;
      this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
      this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
    }
    GoogleOAuth3.prototype.refreshGoogleToken = function() {
      return __awaiter21(this, void 0, void 0, function() {
        return __generator21(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.initialized)
                return [3, 2];
              logger9.debug("need to wait for the Google SDK loaded");
              return [4, waitForInit];
            case 1:
              _a.sent();
              this.initialized = true;
              logger9.debug("finish waiting");
              _a.label = 2;
            case 2:
              return [2, this._refreshGoogleTokenImpl()];
          }
        });
      });
    };
    GoogleOAuth3.prototype._refreshGoogleTokenImpl = function() {
      var ga = null;
      if (browserOrNode().isBrowser)
        ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
      if (!ga) {
        logger9.debug("no gapi auth2 available");
        return Promise.reject("no gapi auth2 available");
      }
      return new Promise(function(res, rej) {
        ga.getAuthInstance().then(function(googleAuth) {
          if (!googleAuth) {
            logger9.debug("google Auth undefined");
            rej(new NonRetryableError("google Auth undefined"));
          }
          var googleUser = googleAuth.currentUser.get();
          if (googleUser.isSignedIn()) {
            logger9.debug("refreshing the google access token");
            googleUser.reloadAuthResponse().then(function(authResponse) {
              var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
              res({ token: id_token, expires_at });
            }).catch(function(err) {
              if (err && err.error === "network_error") {
                rej("Network error reloading google auth response");
              } else {
                rej(new NonRetryableError("Failed to reload google auth response"));
              }
            });
          } else {
            rej(new NonRetryableError("User is not signed in with Google"));
          }
        }).catch(function(err) {
          logger9.debug("Failed to refresh google token", err);
          rej(new NonRetryableError("Failed to refresh google token"));
        });
      });
    };
    return GoogleOAuth3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
var __awaiter22 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator22 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger10 = new ConsoleLogger("CognitoCredentials");
var waitForInit2 = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger10.debug("not in the browser, directly resolved");
    return res();
  }
  var fb = window["FB"];
  if (fb) {
    logger10.debug("FB SDK already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var FacebookOAuth = (
  /** @class */
  function() {
    function FacebookOAuth3() {
      this.initialized = false;
      this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
      this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
    }
    FacebookOAuth3.prototype.refreshFacebookToken = function() {
      return __awaiter22(this, void 0, void 0, function() {
        return __generator22(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.initialized)
                return [3, 2];
              logger10.debug("need to wait for the Facebook SDK loaded");
              return [4, waitForInit2];
            case 1:
              _a.sent();
              this.initialized = true;
              logger10.debug("finish waiting");
              _a.label = 2;
            case 2:
              return [2, this._refreshFacebookTokenImpl()];
          }
        });
      });
    };
    FacebookOAuth3.prototype._refreshFacebookTokenImpl = function() {
      var fb = null;
      if (browserOrNode().isBrowser)
        fb = window["FB"];
      if (!fb) {
        var errorMessage = "no fb sdk available";
        logger10.debug(errorMessage);
        return Promise.reject(new NonRetryableError(errorMessage));
      }
      return new Promise(function(res, rej) {
        fb.getLoginStatus(function(fbResponse) {
          if (!fbResponse || !fbResponse.authResponse) {
            var errorMessage2 = "no response from facebook when refreshing the jwt token";
            logger10.debug(errorMessage2);
            rej(new NonRetryableError(errorMessage2));
          } else {
            var response = fbResponse.authResponse;
            var accessToken = response.accessToken, expiresIn = response.expiresIn;
            var date = /* @__PURE__ */ new Date();
            var expires_at = expiresIn * 1e3 + date.getTime();
            if (!accessToken) {
              var errorMessage2 = "the jwtToken is undefined";
              logger10.debug(errorMessage2);
              rej(new NonRetryableError(errorMessage2));
            }
            res({
              token: accessToken,
              expires_at
            });
          }
        }, { scope: "public_profile,email" });
      });
    };
    return FacebookOAuth3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
var GoogleOAuth2 = new GoogleOAuth();
var FacebookOAuth2 = new FacebookOAuth();

// node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
var dataMemory = {};
var MemoryStorage = (
  /** @class */
  function() {
    function MemoryStorage3() {
    }
    MemoryStorage3.setItem = function(key, value) {
      dataMemory[key] = value;
      return dataMemory[key];
    };
    MemoryStorage3.getItem = function(key) {
      return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
    };
    MemoryStorage3.removeItem = function(key) {
      return delete dataMemory[key];
    };
    MemoryStorage3.clear = function() {
      dataMemory = {};
      return dataMemory;
    };
    return MemoryStorage3;
  }()
);
var StorageHelper = (
  /** @class */
  function() {
    function StorageHelper3() {
      try {
        this.storageWindow = window.localStorage;
        this.storageWindow.setItem("aws.amplify.test-ls", 1);
        this.storageWindow.removeItem("aws.amplify.test-ls");
      } catch (exception) {
        this.storageWindow = MemoryStorage;
      }
    }
    StorageHelper3.prototype.getStorage = function() {
      return this.storageWindow;
    };
    return StorageHelper3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/RNComponents/index.js
var AsyncStorage = browserOrNode().isBrowser ? new StorageHelper().getStorage() : void 0;

// node_modules/@aws-amplify/core/lib-esm/clients/endpoints/partitions.js
var defaultPartition = {
  id: "aws",
  outputs: {
    dnsSuffix: "amazonaws.com"
  },
  regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
  regions: ["aws-global"]
};
var partitionsInfo = {
  partitions: [
    defaultPartition,
    {
      id: "aws-cn",
      outputs: {
        dnsSuffix: "amazonaws.com.cn"
      },
      regionRegex: "^cn\\-\\w+\\-\\d+$",
      regions: ["aws-cn-global"]
    }
  ]
};

// node_modules/@aws-amplify/core/lib-esm/clients/endpoints/getDnsSuffix.js
var __values13 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var getDnsSuffix = function(region) {
  var e_1, _a;
  var partitions = partitionsInfo.partitions;
  try {
    for (var partitions_1 = __values13(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {
      var _b = partitions_1_1.value, regions = _b.regions, outputs = _b.outputs, regionRegex = _b.regionRegex;
      var regex = new RegExp(regionRegex);
      if (regions.includes(region) || regex.test(region)) {
        return outputs.dnsSuffix;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return))
        _a.call(partitions_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return defaultPartition.outputs.dnsSuffix;
};

// node_modules/@aws-amplify/core/lib-esm/clients/handlers/fetch.js
var import_isomorphic_unfetch = __toESM(require_browser());
var __assign22 = function() {
  __assign22 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign22.apply(this, arguments);
};
var __awaiter23 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator23 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var shouldSendBody = function(method) {
  return !["HEAD", "GET", "DELETE"].includes(method.toUpperCase());
};
var fetchTransferHandler = function(_a, _b) {
  var url = _a.url, method = _a.method, headers = _a.headers, body = _a.body;
  var abortSignal = _b.abortSignal;
  return __awaiter23(void 0, void 0, void 0, function() {
    var resp, e_1, responseHeaders, httpResponse, bodyWithMixin;
    var _c, _d;
    return __generator23(this, function(_e) {
      switch (_e.label) {
        case 0:
          _e.trys.push([0, 2, , 3]);
          return [4, fetch(url, {
            method,
            headers,
            body: shouldSendBody(method) ? body : void 0,
            signal: abortSignal
          })];
        case 1:
          resp = _e.sent();
          return [3, 3];
        case 2:
          e_1 = _e.sent();
          if (e_1 instanceof TypeError) {
            throw new Error("Network error");
          }
          throw e_1;
        case 3:
          responseHeaders = {};
          (_c = resp.headers) === null || _c === void 0 ? void 0 : _c.forEach(function(value, key) {
            responseHeaders[key.toLowerCase()] = value;
          });
          httpResponse = {
            statusCode: resp.status,
            headers: responseHeaders,
            body: null
          };
          bodyWithMixin = Object.assign((_d = resp.body) !== null && _d !== void 0 ? _d : {}, {
            text: withMemoization(function() {
              return resp.text();
            }),
            blob: withMemoization(function() {
              return resp.blob();
            }),
            json: withMemoization(function() {
              return resp.json();
            })
          });
          return [2, __assign22(__assign22({}, httpResponse), { body: bodyWithMixin })];
      }
    });
  });
};
var withMemoization = function(payloadAccessor) {
  var cached;
  return function() {
    if (!cached) {
      cached = payloadAccessor();
    }
    return cached;
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/middleware.js
var __awaiter24 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator24 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var DEFAULT_RETRY_ATTEMPTS = 3;
var retryMiddleware2 = function(_a) {
  var _b = _a.maxAttempts, maxAttempts = _b === void 0 ? DEFAULT_RETRY_ATTEMPTS : _b, retryDecider = _a.retryDecider, computeDelay = _a.computeDelay, abortSignal = _a.abortSignal;
  if (maxAttempts < 1) {
    throw new Error("maxAttempts must be greater than 0");
  }
  return function(next, context) {
    return function retryMiddleware3(request) {
      var _a2;
      return __awaiter24(this, void 0, void 0, function() {
        var error, attemptsCount, response, e_1, delay;
        return __generator24(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              attemptsCount = (_a2 = context.attemptsCount) !== null && _a2 !== void 0 ? _a2 : 0;
              _b2.label = 1;
            case 1:
              if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts))
                return [3, 11];
              error = void 0;
              response = void 0;
              _b2.label = 2;
            case 2:
              _b2.trys.push([2, 4, , 5]);
              return [4, next(request)];
            case 3:
              response = _b2.sent();
              return [3, 5];
            case 4:
              e_1 = _b2.sent();
              error = e_1;
              return [3, 5];
            case 5:
              attemptsCount = context.attemptsCount > attemptsCount ? context.attemptsCount : attemptsCount + 1;
              context.attemptsCount = attemptsCount;
              return [4, retryDecider(response, error)];
            case 6:
              if (!_b2.sent())
                return [3, 9];
              if (!(!(abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts))
                return [3, 8];
              delay = computeDelay(attemptsCount);
              return [4, cancellableSleep(delay, abortSignal)];
            case 7:
              _b2.sent();
              _b2.label = 8;
            case 8:
              return [3, 1];
            case 9:
              if (response) {
                updateMetadataAttempts(response, attemptsCount);
                return [2, response];
              } else {
                updateMetadataAttempts(error, attemptsCount);
                throw error;
              }
              _b2.label = 10;
            case 10:
              return [3, 1];
            case 11:
              throw (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) ? new Error("Request aborted") : error !== null && error !== void 0 ? error : new Error("Retry attempts exhausted");
          }
        });
      });
    };
  };
};
var cancellableSleep = function(timeoutMs, abortSignal) {
  if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
    return Promise.resolve();
  }
  var timeoutId;
  var sleepPromiseResolveFn;
  var sleepPromise = new Promise(function(resolve) {
    sleepPromiseResolveFn = resolve;
    timeoutId = setTimeout(resolve, timeoutMs);
  });
  abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener("abort", function cancelSleep(event) {
    clearTimeout(timeoutId);
    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener("abort", cancelSleep);
    sleepPromiseResolveFn();
  });
  return sleepPromise;
};
var isMetadataBearer = function(response) {
  return typeof (response === null || response === void 0 ? void 0 : response["$metadata"]) === "object";
};
var updateMetadataAttempts = function(nextHandlerOutput, attempts) {
  if (isMetadataBearer(nextHandlerOutput)) {
    nextHandlerOutput.$metadata.attempts = attempts;
  }
  nextHandlerOutput["$metadata"] = { attempts };
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/jitteredBackoff.js
var DEFAULT_MAX_DELAY_MS = 5 * 60 * 1e3;
var jitteredBackoff2 = function(attempt) {
  var delayFunction = jitteredBackoff(DEFAULT_MAX_DELAY_MS);
  var delay = delayFunction(attempt);
  return delay === false ? DEFAULT_MAX_DELAY_MS : delay;
};

// node_modules/@aws-amplify/core/lib-esm/clients/utils/isClockSkewError.js
var CLOCK_SKEW_ERROR_CODES2 = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch",
  "BadRequestException"
  // API Gateway
];
var isClockSkewError2 = function(errorCode) {
  return CLOCK_SKEW_ERROR_CODES2.includes(errorCode);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/retry/defaultRetryDecider.js
var __awaiter25 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator25 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getRetryDecider = function(errorParser) {
  return function(response, error) {
    return __awaiter25(void 0, void 0, void 0, function() {
      var errorCode, _a, statusCode;
      var _b;
      return __generator25(this, function(_c) {
        switch (_c.label) {
          case 0:
            if (!(error !== null && error !== void 0))
              return [3, 1];
            _a = error;
            return [3, 3];
          case 1:
            return [4, errorParser(response)];
          case 2:
            _a = _c.sent();
            _c.label = 3;
          case 3:
            errorCode = ((_b = _a) !== null && _b !== void 0 ? _b : {}).name;
            statusCode = response === null || response === void 0 ? void 0 : response.statusCode;
            return [2, isConnectionError(error) || isThrottlingError2(statusCode, errorCode) || isClockSkewError2(errorCode) || isServerSideError(statusCode, errorCode)];
        }
      });
    });
  };
};
var THROTTLING_ERROR_CODES2 = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException"
];
var TIMEOUT_ERROR_CODES = [
  "TimeoutError",
  "RequestTimeout",
  "RequestTimeoutException"
];
var isThrottlingError2 = function(statusCode, errorCode) {
  return statusCode === 429 || THROTTLING_ERROR_CODES2.includes(errorCode);
};
var isConnectionError = function(error) {
  return (error === null || error === void 0 ? void 0 : error.name) === "Network error";
};
var isServerSideError = function(statusCode, errorCode) {
  return [500, 502, 503, 504].includes(statusCode) || TIMEOUT_ERROR_CODES.includes(errorCode);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/userAgent/middleware.js
var __awaiter26 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator26 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var userAgentMiddleware2 = function(_a) {
  var _b = _a.userAgentHeader, userAgentHeader = _b === void 0 ? "x-amz-user-agent" : _b, _c = _a.userAgentValue, userAgentValue = _c === void 0 ? "" : _c;
  return function(next) {
    return function userAgentMiddleware3(request) {
      return __awaiter26(this, void 0, void 0, function() {
        var result, headerName, response;
        return __generator26(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(userAgentValue.trim().length === 0))
                return [3, 2];
              return [4, next(request)];
            case 1:
              result = _a2.sent();
              return [2, result];
            case 2:
              headerName = userAgentHeader.toLowerCase();
              request.headers[headerName] = request.headers[headerName] ? "".concat(request.headers[headerName], " ").concat(userAgentValue) : userAgentValue;
              return [4, next(request)];
            case 3:
              response = _a2.sent();
              return [2, response];
          }
        });
      });
    };
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/internal/composeTransferHandler.js
var composeTransferHandler = function(coreHandler, middleware) {
  return function(request, options) {
    var context = {};
    var composedHandler = function(request2) {
      return coreHandler(request2, options);
    };
    for (var i = middleware.length - 1; i >= 0; i--) {
      var m = middleware[i];
      var resolvedMiddleware = m(options);
      composedHandler = resolvedMiddleware(composedHandler, context);
    }
    return composedHandler(request);
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/handlers/unauthenticated.js
var unauthenticatedHandler = composeTransferHandler(fetchTransferHandler, [userAgentMiddleware2, retryMiddleware2]);

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate2 = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/utils/isClockSkewed.js
var SKEW_WINDOW = 5 * 60 * 1e3;
var isClockSkewed2 = function(clockTimeInMilliseconds, clockOffsetInMilliseconds) {
  return Math.abs(getSkewCorrectedDate2(clockOffsetInMilliseconds).getTime() - clockTimeInMilliseconds) >= SKEW_WINDOW;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset = function(clockTimeInMilliseconds, currentSystemClockOffset) {
  if (isClockSkewed2(clockTimeInMilliseconds, currentSystemClockOffset)) {
    return clockTimeInMilliseconds - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/middleware.js
var __awaiter27 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator27 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var signingMiddleware = function(_a) {
  var credentials = _a.credentials, region = _a.region, service = _a.service;
  var currentSystemClockOffset;
  return function(next) {
    return function signingMiddleware2(request) {
      return __awaiter27(this, void 0, void 0, function() {
        var signRequestOptions, signedRequest, response, error_1, dateString;
        return __generator27(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              currentSystemClockOffset = currentSystemClockOffset !== null && currentSystemClockOffset !== void 0 ? currentSystemClockOffset : 0;
              signRequestOptions = {
                credentials,
                signingDate: getSkewCorrectedDate2(currentSystemClockOffset),
                signingRegion: region,
                signingService: service
              };
              return [4, signRequest(request, signRequestOptions)];
            case 1:
              signedRequest = _a2.sent();
              _a2.label = 2;
            case 2:
              _a2.trys.push([2, 4, , 5]);
              return [4, next(signedRequest)];
            case 3:
              response = _a2.sent();
              return [2, response];
            case 4:
              error_1 = _a2.sent();
              dateString = shouldUseServerTime(error_1) ? error_1.ServerTime : getDateHeader(error_1.$response);
              if (dateString) {
                currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);
              }
              throw error_1;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
  };
};
var shouldUseServerTime = function(_a) {
  var ServerTime = _a.ServerTime, Code = _a.Code;
  return ServerTime && isClockSkewError2(Code);
};
var getDateHeader = function(_a) {
  var _b;
  var _c = _a === void 0 ? {} : _a, headers = _c.headers;
  return (_b = headers === null || headers === void 0 ? void 0 : headers.date) !== null && _b !== void 0 ? _b : headers === null || headers === void 0 ? void 0 : headers.Date;
};

// node_modules/@aws-amplify/core/lib-esm/clients/handlers/authenticated.js
var authenticatedHandler = composeTransferHandler(fetchTransferHandler, [
  userAgentMiddleware2,
  retryMiddleware2,
  signingMiddleware
]);

// node_modules/@aws-amplify/core/lib-esm/clients/internal/composeServiceApi.js
var __assign23 = function() {
  __assign23 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign23.apply(this, arguments);
};
var __awaiter28 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator28 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var composeServiceApi = function(transferHandler, serializer, deserializer, defaultConfig2) {
  return function(config, input) {
    return __awaiter28(void 0, void 0, void 0, function() {
      var resolvedConfig, endpoint, request, response;
      return __generator28(this, function(_a) {
        switch (_a.label) {
          case 0:
            resolvedConfig = __assign23(__assign23({}, defaultConfig2), config);
            return [4, resolvedConfig.endpointResolver({
              region: resolvedConfig.region
            })];
          case 1:
            endpoint = _a.sent();
            request = serializer(input, endpoint);
            return [4, transferHandler(request, __assign23({}, resolvedConfig))];
          case 2:
            response = _a.sent();
            return [4, deserializer(response)];
          case 3:
            return [2, _a.sent()];
        }
      });
    });
  };
};

// node_modules/@aws-amplify/core/lib-esm/clients/serde/responseInfo.js
var __assign24 = function() {
  __assign24 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign24.apply(this, arguments);
};
var parseMetadata = function(response) {
  var _a, _b;
  var headers = response.headers, statusCode = response.statusCode;
  return __assign24(__assign24({}, isMetadataBearer(response) ? response.$metadata : {}), { httpStatusCode: statusCode, requestId: (_b = (_a = headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : headers["x-amz-request-id"], extendedRequestId: headers["x-amz-id-2"], cfId: headers["x-amz-cf-id"] });
};

// node_modules/@aws-amplify/core/lib-esm/clients/serde/json.js
var __awaiter29 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator29 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read24 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var parseJsonError = function(response) {
  return __awaiter29(void 0, void 0, void 0, function() {
    var body, sanitizeErrorCode, code, message, error;
    var _a, _b, _c, _d, _e;
    return __generator29(this, function(_f) {
      switch (_f.label) {
        case 0:
          if (!response || response.statusCode < 300) {
            return [
              2
              /*return*/
            ];
          }
          return [4, parseJsonBody(response)];
        case 1:
          body = _f.sent();
          sanitizeErrorCode = function(rawValue) {
            var _a2 = __read24(rawValue.toString().split(/[\,\:]+/), 1), cleanValue = _a2[0];
            if (cleanValue.includes("#")) {
              return cleanValue.split("#")[1];
            }
            return cleanValue;
          };
          code = sanitizeErrorCode((_c = (_b = (_a = response.headers["x-amzn-errortype"]) !== null && _a !== void 0 ? _a : body.code) !== null && _b !== void 0 ? _b : body.__type) !== null && _c !== void 0 ? _c : "UnknownError");
          message = (_e = (_d = body.message) !== null && _d !== void 0 ? _d : body.Message) !== null && _e !== void 0 ? _e : "Unknown error";
          error = new Error(message);
          return [2, Object.assign(error, {
            name: code,
            $metadata: parseMetadata(response)
          })];
      }
    });
  });
};
var parseJsonBody = function(response) {
  return __awaiter29(void 0, void 0, void 0, function() {
    var output;
    return __generator29(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!response.body) {
            throw new Error("Missing response payload");
          }
          return [4, response.body.json()];
        case 1:
          output = _a.sent();
          return [2, Object.assign(output, {
            $metadata: parseMetadata(response)
          })];
      }
    });
  });
};

// node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/base.js
var __awaiter30 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator30 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var SERVICE_NAME = "cognito-identity";
var endpointResolver = function(_a) {
  var region = _a.region;
  return {
    url: new URL("https://cognito-identity.".concat(region, ".").concat(getDnsSuffix(region)))
  };
};
var disableCacheMiddleware = function() {
  return function(next, context) {
    return function disableCacheMiddleware2(request) {
      return __awaiter30(this, void 0, void 0, function() {
        return __generator30(this, function(_a) {
          request.headers["cache-control"] = "no-store";
          return [2, next(request)];
        });
      });
    };
  };
};
var cognitoIdentityTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddleware]);
var defaultConfig = {
  service: SERVICE_NAME,
  endpointResolver,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  userAgentValue: getAmplifyUserAgent()
  // TODO: use getAmplifyUserAgentString() when available.
};
var getSharedHeaders = function(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "AWSCognitoIdentityService.".concat(operation)
  };
};
var buildHttpRpcRequest2 = function(_a, headers, body) {
  var url = _a.url;
  return {
    headers,
    url,
    body,
    method: "POST"
  };
};

// node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/getId.js
var __awaiter31 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator31 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getIdSerializer = function(input, endpoint) {
  var headers = getSharedHeaders("GetId");
  var body = JSON.stringify(input);
  return buildHttpRpcRequest2(endpoint, headers, body);
};
var getIdDeserializer = function(response) {
  return __awaiter31(void 0, void 0, void 0, function() {
    var error, body;
    return __generator31(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!(response.statusCode >= 300))
            return [3, 2];
          return [4, parseJsonError(response)];
        case 1:
          error = _a.sent();
          throw error;
        case 2:
          return [4, parseJsonBody(response)];
        case 3:
          body = _a.sent();
          return [2, {
            IdentityId: body.IdentityId,
            $metadata: parseMetadata(response)
          }];
      }
    });
  });
};
var getId = composeServiceApi(cognitoIdentityTransferHandler, getIdSerializer, getIdDeserializer, defaultConfig);

// node_modules/@aws-amplify/core/lib-esm/AwsClients/CognitoIdentity/getCredentialsForIdentity.js
var __awaiter32 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator32 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getCredentialsForIdentitySerializer = function(input, endpoint) {
  var headers = getSharedHeaders("GetCredentialsForIdentity");
  var body = JSON.stringify(input);
  return buildHttpRpcRequest2(endpoint, headers, body);
};
var getCredentialsForIdentityDeserializer = function(response) {
  return __awaiter32(void 0, void 0, void 0, function() {
    var error, body;
    return __generator32(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!(response.statusCode >= 300))
            return [3, 2];
          return [4, parseJsonError(response)];
        case 1:
          error = _a.sent();
          throw error;
        case 2:
          return [4, parseJsonBody(response)];
        case 3:
          body = _a.sent();
          return [2, {
            IdentityId: body.IdentityId,
            Credentials: deserializeCredentials(body.Credentials),
            $metadata: parseMetadata(response)
          }];
      }
    });
  });
};
var deserializeCredentials = function(output) {
  if (output === void 0) {
    output = {};
  }
  return {
    AccessKeyId: output["AccessKeyId"],
    SecretKey: output["SecretKey"],
    SessionToken: output["SessionToken"],
    Expiration: new Date(output["Expiration"] * 1e3)
  };
};
var getCredentialsForIdentity = composeServiceApi(cognitoIdentityTransferHandler, getCredentialsForIdentitySerializer, getCredentialsForIdentityDeserializer, defaultConfig);

// node_modules/@aws-amplify/core/lib-esm/Credentials.js
var __assign25 = function() {
  __assign25 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign25.apply(this, arguments);
};
var __awaiter33 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator33 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var logger11 = new ConsoleLogger("Credentials");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var AMPLIFY_SYMBOL2 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchCredentialsEvent = function(event, data, message) {
  Hub.dispatch("core", { event, data, message }, "Credentials", AMPLIFY_SYMBOL2);
};
var CredentialsClass = (
  /** @class */
  function() {
    function CredentialsClass2(config) {
      this._gettingCredPromise = null;
      this._refreshHandlers = {};
      this.Auth = void 0;
      this.configure(config);
      this._refreshHandlers["google"] = GoogleOAuth2.refreshGoogleToken;
      this._refreshHandlers["facebook"] = FacebookOAuth2.refreshFacebookToken;
    }
    CredentialsClass2.prototype.getModuleName = function() {
      return "Credentials";
    };
    CredentialsClass2.prototype.getCredSource = function() {
      return this._credentials_source;
    };
    CredentialsClass2.prototype.configure = function(config) {
      if (!config)
        return this._config || {};
      this._config = Object.assign({}, this._config, config);
      var refreshHandlers = this._config.refreshHandlers;
      if (refreshHandlers) {
        this._refreshHandlers = __assign25(__assign25({}, this._refreshHandlers), refreshHandlers);
      }
      this._storage = this._config.storage;
      if (!this._storage) {
        this._storage = new StorageHelper().getStorage();
      }
      this._storageSync = Promise.resolve();
      if (typeof this._storage["sync"] === "function") {
        this._storageSync = this._storage["sync"]();
      }
      dispatchCredentialsEvent("credentials_configured", null, "Credentials has been configured successfully");
      return this._config;
    };
    CredentialsClass2.prototype.get = function() {
      logger11.debug("getting credentials");
      return this._pickupCredentials();
    };
    CredentialsClass2.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
      return "".concat(COGNITO_IDENTITY_KEY_PREFIX).concat(identityPoolId);
    };
    CredentialsClass2.prototype._pickupCredentials = function() {
      logger11.debug("picking up credentials");
      if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
        logger11.debug("getting new cred promise");
        this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
      } else {
        logger11.debug("getting old cred promise");
      }
      return this._gettingCredPromise;
    };
    CredentialsClass2.prototype._keepAlive = function() {
      return __awaiter33(this, void 0, void 0, function() {
        var cred, _a, Auth2, user_1, session, refreshToken_1, refreshRequest, err_1;
        return __generator33(this, function(_b) {
          switch (_b.label) {
            case 0:
              logger11.debug("checking if credentials exists and not expired");
              cred = this._credentials;
              if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
                logger11.debug("credentials not changed and not expired, directly return");
                return [2, Promise.resolve(cred)];
              }
              logger11.debug("need to get a new credential or refresh the existing one");
              _a = this.Auth, Auth2 = _a === void 0 ? Amplify.Auth : _a;
              if (!Auth2 || typeof Auth2.currentUserCredentials !== "function") {
                return [2, this._setCredentialsForGuest()];
              }
              if (!(!this._isExpired(cred) && this._isPastTTL()))
                return [3, 6];
              logger11.debug("ttl has passed but token is not yet expired");
              _b.label = 1;
            case 1:
              _b.trys.push([1, 5, , 6]);
              return [4, Auth2.currentUserPoolUser()];
            case 2:
              user_1 = _b.sent();
              return [4, Auth2.currentSession()];
            case 3:
              session = _b.sent();
              refreshToken_1 = session.refreshToken;
              refreshRequest = new Promise(function(res, rej) {
                user_1.refreshSession(refreshToken_1, function(err, data) {
                  return err ? rej(err) : res(data);
                });
              });
              return [4, refreshRequest];
            case 4:
              _b.sent();
              return [3, 6];
            case 5:
              err_1 = _b.sent();
              logger11.debug("Error attempting to refreshing the session", err_1);
              return [3, 6];
            case 6:
              return [2, Auth2.currentUserCredentials()];
          }
        });
      });
    };
    CredentialsClass2.prototype.refreshFederatedToken = function(federatedInfo) {
      logger11.debug("Getting federated credentials");
      var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
      var expires_at = federatedInfo.expires_at;
      expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1e3 : expires_at;
      var that = this;
      logger11.debug("checking if federated jwt token expired");
      if (expires_at > (/* @__PURE__ */ new Date()).getTime()) {
        logger11.debug("token not expired");
        return this._setCredentialsFromFederation({
          provider,
          token,
          user,
          identity_id,
          expires_at
        });
      } else {
        if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
          logger11.debug("getting refreshed jwt token from federation provider");
          return this._providerRefreshWithRetry({
            refreshHandler: that._refreshHandlers[provider],
            provider,
            user
          });
        } else {
          logger11.debug("no refresh handler for provider:", provider);
          this.clear();
          return Promise.reject("no refresh handler for provider");
        }
      }
    };
    CredentialsClass2.prototype._providerRefreshWithRetry = function(_a) {
      var _this = this;
      var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
      var MAX_DELAY_MS3 = 10 * 1e3;
      return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS3).then(function(data) {
        logger11.debug("refresh federated token sucessfully", data);
        return _this._setCredentialsFromFederation({
          provider,
          token: data.token,
          user,
          identity_id: data.identity_id,
          expires_at: data.expires_at
        });
      }).catch(function(e) {
        var isNetworkError = typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
        if (!isNetworkError) {
          _this.clear();
        }
        logger11.debug("refresh federated token failed", e);
        return Promise.reject("refreshing federation token failed: " + e);
      });
    };
    CredentialsClass2.prototype._isExpired = function(credentials) {
      if (!credentials) {
        logger11.debug("no credentials for expiration check");
        return true;
      }
      logger11.debug("are these credentials expired?", credentials);
      var ts = Date.now();
      var expiration = credentials.expiration;
      return expiration.getTime() <= ts;
    };
    CredentialsClass2.prototype._isPastTTL = function() {
      return this._nextCredentialsRefresh <= Date.now();
    };
    CredentialsClass2.prototype._setCredentialsForGuest = function() {
      var _a;
      return __awaiter33(this, void 0, void 0, function() {
        var _b, identityPoolId, region, mandatorySignIn, identityPoolRegion, identityId, _c, cognitoConfig, guestCredentialsProvider, credentials;
        var _this = this;
        return __generator33(this, function(_d) {
          switch (_d.label) {
            case 0:
              logger11.debug("setting credentials for guest");
              if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {
                this._config = Object.assign({}, this._config, parseAWSExports(this._config || {}).Auth);
              }
              _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn, identityPoolRegion = _b.identityPoolRegion;
              if (mandatorySignIn) {
                return [2, Promise.reject("cannot get guest credentials when mandatory signin enabled")];
              }
              if (!identityPoolId) {
                logger11.debug("No Cognito Identity pool provided for unauthenticated access");
                return [2, Promise.reject("No Cognito Identity pool provided for unauthenticated access")];
              }
              if (!identityPoolRegion && !region) {
                logger11.debug("region is not configured for getting the credentials");
                return [2, Promise.reject("region is not configured for getting the credentials")];
              }
              _c = this;
              return [4, this._getGuestIdentityId()];
            case 1:
              identityId = _c._identityId = _d.sent();
              cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
              guestCredentialsProvider = function() {
                return __awaiter33(_this, void 0, void 0, function() {
                  var IdentityId, Credentials2;
                  return __generator33(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!!identityId)
                          return [3, 2];
                        return [4, getId(cognitoConfig, {
                          IdentityPoolId: identityPoolId
                        })];
                      case 1:
                        IdentityId = _a2.sent().IdentityId;
                        this._identityId = IdentityId;
                        _a2.label = 2;
                      case 2:
                        return [4, getCredentialsForIdentity(cognitoConfig, {
                          IdentityId: this._identityId
                        })];
                      case 3:
                        Credentials2 = _a2.sent().Credentials;
                        return [2, {
                          identityId: this._identityId,
                          accessKeyId: Credentials2.AccessKeyId,
                          secretAccessKey: Credentials2.SecretKey,
                          sessionToken: Credentials2.SessionToken,
                          expiration: Credentials2.Expiration
                        }];
                    }
                  });
                });
              };
              credentials = guestCredentialsProvider().catch(function(err) {
                return __awaiter33(_this, void 0, void 0, function() {
                  return __generator33(this, function(_a2) {
                    throw err;
                  });
                });
              });
              return [2, this._loadCredentials(credentials, "guest", false, null).then(function(res) {
                return res;
              }).catch(function(e) {
                return __awaiter33(_this, void 0, void 0, function() {
                  var guestCredentialsProvider_1;
                  var _this2 = this;
                  return __generator33(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!(e.name === "ResourceNotFoundException" && e.message === "Identity '".concat(identityId, "' not found.")))
                          return [3, 2];
                        logger11.debug("Failed to load guest credentials");
                        return [4, this._removeGuestIdentityId()];
                      case 1:
                        _a2.sent();
                        guestCredentialsProvider_1 = function() {
                          return __awaiter33(_this2, void 0, void 0, function() {
                            var IdentityId, Credentials2;
                            return __generator33(this, function(_a3) {
                              switch (_a3.label) {
                                case 0:
                                  return [4, getId(cognitoConfig, {
                                    IdentityPoolId: identityPoolId
                                  })];
                                case 1:
                                  IdentityId = _a3.sent().IdentityId;
                                  this._identityId = IdentityId;
                                  return [4, getCredentialsForIdentity(cognitoConfig, {
                                    IdentityId
                                  })];
                                case 2:
                                  Credentials2 = _a3.sent().Credentials;
                                  return [2, {
                                    identityId: IdentityId,
                                    accessKeyId: Credentials2.AccessKeyId,
                                    secretAccessKey: Credentials2.SecretKey,
                                    sessionToken: Credentials2.SessionToken,
                                    expiration: Credentials2.Expiration
                                  }];
                              }
                            });
                          });
                        };
                        credentials = guestCredentialsProvider_1().catch(function(err) {
                          return __awaiter33(_this2, void 0, void 0, function() {
                            return __generator33(this, function(_a3) {
                              throw err;
                            });
                          });
                        });
                        return [2, this._loadCredentials(credentials, "guest", false, null)];
                      case 2:
                        return [2, e];
                    }
                  });
                });
              })];
          }
        });
      });
    };
    CredentialsClass2.prototype._setCredentialsFromFederation = function(params) {
      var _this = this;
      var provider = params.provider, token = params.token;
      var identity_id = params.identity_id;
      var domains = {
        google: "accounts.google.com",
        facebook: "graph.facebook.com",
        amazon: "www.amazon.com",
        developer: "cognito-identity.amazonaws.com"
      };
      var domain = domains[provider] || provider;
      if (!domain) {
        return Promise.reject("You must specify a federated provider");
      }
      var logins = {};
      logins[domain] = token;
      var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, identityPoolRegion = _a.identityPoolRegion;
      if (!identityPoolId) {
        logger11.debug("No Cognito Federated Identity pool provided");
        return Promise.reject("No Cognito Federated Identity pool provided");
      }
      if (!identityPoolRegion && !region) {
        logger11.debug("region is not configured for getting the credentials");
        return Promise.reject("region is not configured for getting the credentials");
      }
      var cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
      var authenticatedCredentialsProvider = function() {
        return __awaiter33(_this, void 0, void 0, function() {
          var IdentityId, Credentials2;
          return __generator33(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (!!identity_id)
                  return [3, 2];
                return [4, getId(cognitoConfig, {
                  IdentityPoolId: identityPoolId,
                  Logins: logins
                })];
              case 1:
                IdentityId = _a2.sent().IdentityId;
                identity_id = IdentityId;
                _a2.label = 2;
              case 2:
                return [4, getCredentialsForIdentity(cognitoConfig, {
                  IdentityId: identity_id,
                  Logins: logins
                })];
              case 3:
                Credentials2 = _a2.sent().Credentials;
                return [2, {
                  identityId: identity_id,
                  accessKeyId: Credentials2.AccessKeyId,
                  secretAccessKey: Credentials2.SecretKey,
                  sessionToken: Credentials2.SessionToken,
                  expiration: Credentials2.Expiration
                }];
            }
          });
        });
      };
      var credentials = authenticatedCredentialsProvider().catch(function(err) {
        return __awaiter33(_this, void 0, void 0, function() {
          return __generator33(this, function(_a2) {
            throw err;
          });
        });
      });
      return this._loadCredentials(credentials, "federated", true, params);
    };
    CredentialsClass2.prototype._setCredentialsFromSession = function(session) {
      var _this = this;
      logger11.debug("set credentials from session");
      var idToken = session.getIdToken().getJwtToken();
      var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId, identityPoolRegion = _a.identityPoolRegion;
      if (!identityPoolId) {
        logger11.debug("No Cognito Federated Identity pool provided");
        return Promise.reject("No Cognito Federated Identity pool provided");
      }
      if (!identityPoolRegion && !region) {
        logger11.debug("region is not configured for getting the credentials");
        return Promise.reject("region is not configured for getting the credentials");
      }
      var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
      var logins = {};
      logins[key] = idToken;
      var cognitoConfig = { region: identityPoolRegion !== null && identityPoolRegion !== void 0 ? identityPoolRegion : region };
      var credentialsProvider = function() {
        return __awaiter33(_this, void 0, void 0, function() {
          var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a2, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
          return __generator33(this, function(_c) {
            switch (_c.label) {
              case 0:
                return [4, this._getGuestIdentityId()];
              case 1:
                guestIdentityId = _c.sent();
                if (!!guestIdentityId)
                  return [3, 3];
                return [4, getId(cognitoConfig, {
                  IdentityPoolId: identityPoolId,
                  Logins: logins
                })];
              case 2:
                IdentityId = _c.sent().IdentityId;
                generatedOrRetrievedIdentityId = IdentityId;
                _c.label = 3;
              case 3:
                return [4, getCredentialsForIdentity(cognitoConfig, {
                  IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                  Logins: logins
                })];
              case 4:
                _a2 = _c.sent(), _b = _a2.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a2.IdentityId;
                this._identityId = primaryIdentityId;
                if (!guestIdentityId)
                  return [3, 6];
                logger11.debug("The guest identity ".concat(guestIdentityId, " has been successfully linked to the logins"));
                if (guestIdentityId === primaryIdentityId) {
                  logger11.debug("The guest identity ".concat(guestIdentityId, " has become the primary identity"));
                }
                return [4, this._removeGuestIdentityId()];
              case 5:
                _c.sent();
                _c.label = 6;
              case 6:
                return [2, {
                  accessKeyId: AccessKeyId,
                  secretAccessKey: SecretKey,
                  sessionToken: SessionToken,
                  expiration: Expiration,
                  identityId: primaryIdentityId
                }];
            }
          });
        });
      };
      var credentials = credentialsProvider().catch(function(err) {
        return __awaiter33(_this, void 0, void 0, function() {
          return __generator33(this, function(_a2) {
            throw err;
          });
        });
      });
      return this._loadCredentials(credentials, "userPool", true, null);
    };
    CredentialsClass2.prototype._loadCredentials = function(credentials, source, authenticated, info) {
      var _this = this;
      var that = this;
      return new Promise(function(res, rej) {
        credentials.then(function(credentials2) {
          return __awaiter33(_this, void 0, void 0, function() {
            var user, provider, token, expires_at, identity_id;
            return __generator33(this, function(_a) {
              switch (_a.label) {
                case 0:
                  logger11.debug("Load credentials successfully", credentials2);
                  if (this._identityId && !credentials2.identityId) {
                    credentials2["identityId"] = this._identityId;
                  }
                  that._credentials = credentials2;
                  that._credentials.authenticated = authenticated;
                  that._credentials_source = source;
                  that._nextCredentialsRefresh = (/* @__PURE__ */ new Date()).getTime() + CREDENTIALS_TTL;
                  if (source === "federated") {
                    user = Object.assign({ id: this._credentials.identityId }, info.user);
                    provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                    try {
                      this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                        provider,
                        token,
                        user,
                        expires_at,
                        identity_id
                      }));
                    } catch (e) {
                      logger11.debug("Failed to put federated info into auth storage", e);
                    }
                  }
                  if (!(source === "guest"))
                    return [3, 2];
                  return [4, this._setGuestIdentityId(credentials2.identityId)];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  res(that._credentials);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }).catch(function(err) {
          if (err) {
            logger11.debug("Failed to load credentials", credentials);
            logger11.debug("Error loading credentials", err);
            rej(err);
            return;
          }
        });
      });
    };
    CredentialsClass2.prototype.set = function(params, source) {
      if (source === "session") {
        return this._setCredentialsFromSession(params);
      } else if (source === "federation") {
        return this._setCredentialsFromFederation(params);
      } else if (source === "guest") {
        return this._setCredentialsForGuest();
      } else {
        logger11.debug("no source specified for setting credentials");
        return Promise.reject("invalid source");
      }
    };
    CredentialsClass2.prototype.clear = function() {
      return __awaiter33(this, void 0, void 0, function() {
        return __generator33(this, function(_a) {
          this._credentials = null;
          this._credentials_source = null;
          logger11.debug("removing aws-amplify-federatedInfo from storage");
          this._storage.removeItem("aws-amplify-federatedInfo");
          return [
            2
            /*return*/
          ];
        });
      });
    };
    CredentialsClass2.prototype._getGuestIdentityId = function() {
      return __awaiter33(this, void 0, void 0, function() {
        var identityPoolId, e_1;
        return __generator33(this, function(_a) {
          switch (_a.label) {
            case 0:
              identityPoolId = this._config.identityPoolId;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              return [2, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];
            case 3:
              e_1 = _a.sent();
              logger11.debug("Failed to get the cached guest identityId", e_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    CredentialsClass2.prototype._setGuestIdentityId = function(identityId) {
      return __awaiter33(this, void 0, void 0, function() {
        var identityPoolId, e_2;
        return __generator33(this, function(_a) {
          switch (_a.label) {
            case 0:
              identityPoolId = this._config.identityPoolId;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
              return [3, 4];
            case 3:
              e_2 = _a.sent();
              logger11.debug("Failed to cache guest identityId", e_2);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    CredentialsClass2.prototype._removeGuestIdentityId = function() {
      return __awaiter33(this, void 0, void 0, function() {
        var identityPoolId;
        return __generator33(this, function(_a) {
          identityPoolId = this._config.identityPoolId;
          logger11.debug("removing ".concat(this._getCognitoIdentityIdStorageKey(identityPoolId), " from storage"));
          this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
          return [
            2
            /*return*/
          ];
        });
      });
    };
    CredentialsClass2.prototype.shear = function(credentials) {
      return {
        accessKeyId: credentials.accessKeyId,
        sessionToken: credentials.sessionToken,
        secretAccessKey: credentials.secretAccessKey,
        identityId: credentials.identityId,
        authenticated: credentials.authenticated
      };
    };
    return CredentialsClass2;
  }()
);
var Credentials = new CredentialsClass(null);
Amplify.register(Credentials);

// node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js
var ServiceWorkerClass = (
  /** @class */
  function() {
    function ServiceWorkerClass2() {
      this._logger = new ConsoleLogger("ServiceWorker");
    }
    Object.defineProperty(ServiceWorkerClass2.prototype, "serviceWorker", {
      /**
       * Get the currently active service worker
       */
      get: function() {
        return this._serviceWorker;
      },
      enumerable: false,
      configurable: true
    });
    ServiceWorkerClass2.prototype.register = function(filePath, scope) {
      var _this = this;
      if (filePath === void 0) {
        filePath = "/service-worker.js";
      }
      if (scope === void 0) {
        scope = "/";
      }
      this._logger.debug("registering ".concat(filePath));
      this._logger.debug("registering service worker with scope ".concat(scope));
      return new Promise(function(resolve, reject) {
        if (navigator && "serviceWorker" in navigator) {
          navigator.serviceWorker.register(filePath, {
            scope
          }).then(function(registration) {
            if (registration.installing) {
              _this._serviceWorker = registration.installing;
            } else if (registration.waiting) {
              _this._serviceWorker = registration.waiting;
            } else if (registration.active) {
              _this._serviceWorker = registration.active;
            }
            _this._registration = registration;
            _this._setupListeners();
            _this._logger.debug("Service Worker Registration Success: ".concat(registration));
            return resolve(registration);
          }).catch(function(error) {
            _this._logger.debug("Service Worker Registration Failed ".concat(error));
            return reject(error);
          });
        } else {
          return reject(new Error("Service Worker not available"));
        }
      });
    };
    ServiceWorkerClass2.prototype.enablePush = function(publicKey) {
      var _this = this;
      if (!this._registration)
        throw new Error("Service Worker not registered");
      this._publicKey = publicKey;
      return new Promise(function(resolve, reject) {
        if (browserOrNode().isBrowser) {
          _this._registration.pushManager.getSubscription().then(function(subscription) {
            if (subscription) {
              _this._subscription = subscription;
              _this._logger.debug("User is subscribed to push: ".concat(JSON.stringify(subscription)));
              resolve(subscription);
            } else {
              _this._logger.debug("User is NOT subscribed to push");
              return _this._registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: _this._urlB64ToUint8Array(publicKey)
              }).then(function(subscription2) {
                _this._subscription = subscription2;
                _this._logger.debug("User subscribed: ".concat(JSON.stringify(subscription2)));
                resolve(subscription2);
              }).catch(function(error) {
                _this._logger.error(error);
              });
            }
          });
        } else {
          return reject(new Error("Service Worker not available"));
        }
      });
    };
    ServiceWorkerClass2.prototype._urlB64ToUint8Array = function(base64String) {
      var padding = "=".repeat((4 - base64String.length % 4) % 4);
      var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
      var rawData = window.atob(base64);
      var outputArray = new Uint8Array(rawData.length);
      for (var i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
      }
      return outputArray;
    };
    ServiceWorkerClass2.prototype.send = function(message) {
      if (this._serviceWorker) {
        this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
      }
    };
    ServiceWorkerClass2.prototype._setupListeners = function() {
      var _this = this;
      this._serviceWorker.addEventListener("statechange", function(event) {
        var currentState = _this._serviceWorker.state;
        _this._logger.debug("ServiceWorker statechange: ".concat(currentState));
        if (Amplify.Analytics && typeof Amplify.Analytics.record === "function") {
          Amplify.Analytics.record({
            name: "ServiceWorker",
            attributes: {
              state: currentState
            }
          });
        }
      });
      this._serviceWorker.addEventListener("message", function(event) {
        _this._logger.debug("ServiceWorker message event: ".concat(event));
      });
    };
    return ServiceWorkerClass2;
  }()
);

// node_modules/universal-cookie/es6/Cookies.js
var cookie2 = __toESM(require_cookie());

// node_modules/universal-cookie/es6/utils.js
var cookie = __toESM(require_cookie());
function hasDocumentCookie() {
  return typeof document === "object" && typeof document.cookie === "string";
}
function parseCookies(cookies, options) {
  if (typeof cookies === "string") {
    return cookie.parse(cookies, options);
  } else if (typeof cookies === "object" && cookies !== null) {
    return cookies;
  } else {
    return {};
  }
}
function isParsingCookie(value, doNotParse) {
  if (typeof doNotParse === "undefined") {
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
  }
  return !doNotParse;
}
function readCookie(value, options) {
  if (options === void 0) {
    options = {};
  }
  var cleanValue = cleanupCookieValue(value);
  if (isParsingCookie(cleanValue, options.doNotParse)) {
    try {
      return JSON.parse(cleanValue);
    } catch (e) {
    }
  }
  return value;
}
function cleanupCookieValue(value) {
  if (value && value[0] === "j" && value[1] === ":") {
    return value.substr(2);
  }
  return value;
}

// node_modules/universal-cookie/es6/Cookies.js
var __assign26 = function() {
  __assign26 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign26.apply(this, arguments);
};
var Cookies = (
  /** @class */
  function() {
    function Cookies3(cookies, options) {
      var _this = this;
      this.changeListeners = [];
      this.HAS_DOCUMENT_COOKIE = false;
      this.cookies = parseCookies(cookies, options);
      new Promise(function() {
        _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
      }).catch(function() {
      });
    }
    Cookies3.prototype._updateBrowserValues = function(parseOptions) {
      if (!this.HAS_DOCUMENT_COOKIE) {
        return;
      }
      this.cookies = cookie2.parse(document.cookie, parseOptions);
    };
    Cookies3.prototype._emitChange = function(params) {
      for (var i = 0; i < this.changeListeners.length; ++i) {
        this.changeListeners[i](params);
      }
    };
    Cookies3.prototype.get = function(name, options, parseOptions) {
      if (options === void 0) {
        options = {};
      }
      this._updateBrowserValues(parseOptions);
      return readCookie(this.cookies[name], options);
    };
    Cookies3.prototype.getAll = function(options, parseOptions) {
      if (options === void 0) {
        options = {};
      }
      this._updateBrowserValues(parseOptions);
      var result = {};
      for (var name_1 in this.cookies) {
        result[name_1] = readCookie(this.cookies[name_1], options);
      }
      return result;
    };
    Cookies3.prototype.set = function(name, value, options) {
      var _a;
      if (typeof value === "object") {
        value = JSON.stringify(value);
      }
      this.cookies = __assign26(__assign26({}, this.cookies), (_a = {}, _a[name] = value, _a));
      if (this.HAS_DOCUMENT_COOKIE) {
        document.cookie = cookie2.serialize(name, value, options);
      }
      this._emitChange({ name, value, options });
    };
    Cookies3.prototype.remove = function(name, options) {
      var finalOptions = options = __assign26(__assign26({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 });
      this.cookies = __assign26({}, this.cookies);
      delete this.cookies[name];
      if (this.HAS_DOCUMENT_COOKIE) {
        document.cookie = cookie2.serialize(name, "", finalOptions);
      }
      this._emitChange({ name, value: void 0, options });
    };
    Cookies3.prototype.addChangeListener = function(callback) {
      this.changeListeners.push(callback);
    };
    Cookies3.prototype.removeChangeListener = function(callback) {
      var idx = this.changeListeners.indexOf(callback);
      if (idx >= 0) {
        this.changeListeners.splice(idx, 1);
      }
    };
    return Cookies3;
  }()
);
var Cookies_default = Cookies;

// node_modules/universal-cookie/es6/index.js
var es6_default = Cookies_default;

// node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
var __assign27 = function() {
  __assign27 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign27.apply(this, arguments);
};
var isBrowser = browserOrNode().isBrowser;
var ONE_YEAR_IN_MS = 365 * 24 * 60 * 60 * 1e3;
var UniversalStorage = (
  /** @class */
  function() {
    function UniversalStorage2(context) {
      if (context === void 0) {
        context = {};
      }
      this.cookies = new es6_default();
      this.store = isBrowser ? window.localStorage : /* @__PURE__ */ Object.create(null);
      this.cookies = context.req ? new es6_default(context.req.headers.cookie) : new es6_default();
      Object.assign(this.store, this.cookies.getAll());
    }
    Object.defineProperty(UniversalStorage2.prototype, "length", {
      get: function() {
        return Object.entries(this.store).length;
      },
      enumerable: false,
      configurable: true
    });
    UniversalStorage2.prototype.clear = function() {
      var _this = this;
      Array.from(new Array(this.length)).map(function(_, i) {
        return _this.key(i);
      }).forEach(function(key) {
        return _this.removeItem(key);
      });
    };
    UniversalStorage2.prototype.getItem = function(key) {
      return this.getLocalItem(key);
    };
    UniversalStorage2.prototype.getLocalItem = function(key) {
      return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
    };
    UniversalStorage2.prototype.getUniversalItem = function(key) {
      return this.cookies.get(key);
    };
    UniversalStorage2.prototype.key = function(index) {
      return Object.keys(this.store)[index];
    };
    UniversalStorage2.prototype.removeItem = function(key) {
      this.removeLocalItem(key);
      this.removeUniversalItem(key);
    };
    UniversalStorage2.prototype.removeLocalItem = function(key) {
      delete this.store[key];
    };
    UniversalStorage2.prototype.removeUniversalItem = function(key) {
      this.cookies.remove(key, {
        path: "/"
      });
    };
    UniversalStorage2.prototype.setItem = function(key, value) {
      this.setLocalItem(key, value);
      var tokenType = key.split(".").pop();
      var sessionTokenTypes = [
        "LastAuthUser",
        "accessToken",
        // refreshToken originates on the client, but SSR pages won't fail when this expires
        // Note: the new `accessToken` will also be refreshed on the client (since Amplify doesn't set server-side cookies)
        "refreshToken",
        // Required for CognitoUserSession
        "idToken"
        // userData is used when `Auth.currentAuthenticatedUser({ bypassCache: false })`.
        // Can be persisted to speed up calls to `Auth.currentAuthenticatedUser()`
        // 'userData',
        // Ignoring clockDrift on the server for now, but needs testing
        // 'clockDrift',
      ];
      if (sessionTokenTypes.includes(tokenType !== null && tokenType !== void 0 ? tokenType : "")) {
        this.setUniversalItem(key, value, {
          expires: new Date(Date.now() + ONE_YEAR_IN_MS)
        });
      }
    };
    UniversalStorage2.prototype.setLocalItem = function(key, value) {
      this.store[key] = value;
    };
    UniversalStorage2.prototype.setUniversalItem = function(key, value, options) {
      if (options === void 0) {
        options = {};
      }
      this.cookies.set(key, value, __assign27(__assign27({}, options), {
        path: "/",
        // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie
        sameSite: true,
        // Allow unsecure requests to http://localhost:3000/ when in development.
        secure: isBrowser && window.location.hostname === "localhost" ? false : true
      }));
    };
    return UniversalStorage2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/constants.js
var hasSymbol = typeof Symbol !== "undefined" && typeof Symbol.for === "function";
var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER";

// node_modules/@aws-amplify/core/lib-esm/index.js
var Constants = {
  userAgent: Platform.userAgent
};

// node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js
var AuthenticationDetails = function() {
  function AuthenticationDetails2(data) {
    var _ref = data || {}, ValidationData = _ref.ValidationData, Username = _ref.Username, Password = _ref.Password, AuthParameters = _ref.AuthParameters, ClientMetadata = _ref.ClientMetadata;
    this.validationData = ValidationData || {};
    this.authParameters = AuthParameters || {};
    this.clientMetadata = ClientMetadata || {};
    this.username = Username;
    this.password = Password;
  }
  var _proto = AuthenticationDetails2.prototype;
  _proto.getUsername = function getUsername() {
    return this.username;
  };
  _proto.getPassword = function getPassword() {
    return this.password;
  };
  _proto.getValidationData = function getValidationData() {
    return this.validationData;
  };
  _proto.getAuthParameters = function getAuthParameters() {
    return this.authParameters;
  };
  _proto.getClientMetadata = function getClientMetadata() {
    return this.clientMetadata;
  };
  return AuthenticationDetails2;
}();

// node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
var import_buffer = __toESM(require_buffer());

// node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js
var crypto2;
if (typeof window !== "undefined" && window.crypto) {
  crypto2 = window.crypto;
}
if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
  crypto2 = window.msCrypto;
}
if (!crypto2 && typeof global !== "undefined" && global.crypto) {
  crypto2 = global.crypto;
}
if (!crypto2 && typeof __require === "function") {
  try {
    crypto2 = require_crypto();
  } catch (err) {
  }
}
function cryptoSecureRandomInt() {
  if (crypto2) {
    if (typeof crypto2.getRandomValues === "function") {
      try {
        return crypto2.getRandomValues(new Uint32Array(1))[0];
      } catch (err) {
      }
    }
    if (typeof crypto2.randomBytes === "function") {
      try {
        return crypto2.randomBytes(4).readInt32LE();
      } catch (err) {
      }
    }
  }
  throw new Error("Native crypto module could not be used to get secure random number.");
}

// node_modules/amazon-cognito-identity-js/es/utils/WordArray.js
function hexStringify(wordArray) {
  var words = wordArray.words;
  var sigBytes = wordArray.sigBytes;
  var hexChars = [];
  for (var i = 0; i < sigBytes; i++) {
    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
    hexChars.push((bite >>> 4).toString(16));
    hexChars.push((bite & 15).toString(16));
  }
  return hexChars.join("");
}
var WordArray = function() {
  function WordArray2(words, sigBytes) {
    words = this.words = words || [];
    if (sigBytes != void 0) {
      this.sigBytes = sigBytes;
    } else {
      this.sigBytes = words.length * 4;
    }
  }
  var _proto = WordArray2.prototype;
  _proto.random = function random(nBytes) {
    var words = [];
    for (var i = 0; i < nBytes; i += 4) {
      words.push(cryptoSecureRandomInt());
    }
    return new WordArray2(words, nBytes);
  };
  _proto.toString = function toString() {
    return hexStringify(this);
  };
  return WordArray2;
}();

// node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
var import_sha256_js2 = __toESM(require_build2());

// node_modules/amazon-cognito-identity-js/es/BigInteger.js
var BigInteger_default = BigInteger;
function BigInteger(a, b) {
  if (a != null)
    this.fromString(a, b);
}
function nbi() {
  return new BigInteger(null);
}
var dbits;
var canary = 244837814094590;
var j_lm = (canary & 16777215) == 15715070;
function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    var v = x * this[i++] + w[j] + c;
    c = Math.floor(v / 67108864);
    w[j++] = v & 67108863;
  }
  return c;
}
function am2(i, x, w, j, c, n) {
  var xl = x & 32767, xh = x >> 15;
  while (--n >= 0) {
    var l = this[i] & 32767;
    var h = this[i++] >> 15;
    var m = xh * l + h * xl;
    l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
    w[j++] = l & 1073741823;
  }
  return c;
}
function am3(i, x, w, j, c, n) {
  var xl = x & 16383, xh = x >> 14;
  while (--n >= 0) {
    var l = this[i] & 16383;
    var h = this[i++] >> 14;
    var m = xh * l + h * xl;
    l = xl * l + ((m & 16383) << 14) + w[j] + c;
    c = (l >> 28) + (m >> 14) + xh * h;
    w[j++] = l & 268435455;
  }
  return c;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  BigInteger.prototype.am = am3;
  dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr;
var vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv)
  BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
function int2char(n) {
  return BI_RM.charAt(n);
}
function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
}
function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i)
    r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}
function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0)
    this[0] = x;
  else if (x < -1)
    this[0] = x + this.DV;
  else
    this.t = 0;
}
function nbv(i) {
  var r = nbi();
  r.fromInt(i);
  return r;
}
function bnpFromString(s, b) {
  var k;
  if (b == 16)
    k = 4;
  else if (b == 8)
    k = 3;
  else if (b == 2)
    k = 1;
  else if (b == 32)
    k = 5;
  else if (b == 4)
    k = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while (--i >= 0) {
    var x = intAt(s, i);
    if (x < 0) {
      if (s.charAt(i) == "-")
        mi = true;
      continue;
    }
    mi = false;
    if (sh == 0)
      this[this.t++] = x;
    else if (sh + k > this.DB) {
      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
      this[this.t++] = x >> this.DB - sh;
    } else
      this[this.t - 1] |= x << sh;
    sh += k;
    if (sh >= this.DB)
      sh -= this.DB;
  }
  this.clamp();
  if (mi)
    BigInteger.ZERO.subTo(this, this);
}
function bnpClamp() {
  var c = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c)
    --this.t;
}
function bnToString(b) {
  if (this.s < 0)
    return "-" + this.negate().toString(b);
  var k;
  if (b == 16)
    k = 4;
  else if (b == 8)
    k = 3;
  else if (b == 2)
    k = 1;
  else if (b == 32)
    k = 5;
  else if (b == 4)
    k = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
  var p = this.DB - i * this.DB % k;
  if (i-- > 0) {
    if (p < this.DB && (d = this[i] >> p) > 0) {
      m = true;
      r = int2char(d);
    }
    while (i >= 0) {
      if (p < k) {
        d = (this[i] & (1 << p) - 1) << k - p;
        d |= this[--i] >> (p += this.DB - k);
      } else {
        d = this[i] >> (p -= k) & km;
        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }
      if (d > 0)
        m = true;
      if (m)
        r += int2char(d);
    }
  }
  return m ? r : "0";
}
function bnNegate() {
  var r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
}
function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}
function bnCompareTo(a) {
  var r = this.s - a.s;
  if (r != 0)
    return r;
  var i = this.t;
  r = i - a.t;
  if (r != 0)
    return this.s < 0 ? -r : r;
  while (--i >= 0)
    if ((r = this[i] - a[i]) != 0)
      return r;
  return 0;
}
function nbits(x) {
  var r = 1, t;
  if ((t = x >>> 16) != 0) {
    x = t;
    r += 16;
  }
  if ((t = x >> 8) != 0) {
    x = t;
    r += 8;
  }
  if ((t = x >> 4) != 0) {
    x = t;
    r += 4;
  }
  if ((t = x >> 2) != 0) {
    x = t;
    r += 2;
  }
  if ((t = x >> 1) != 0) {
    x = t;
    r += 1;
  }
  return r;
}
function bnBitLength() {
  if (this.t <= 0)
    return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
function bnpDLShiftTo(n, r) {
  var i;
  for (i = this.t - 1; i >= 0; --i)
    r[i + n] = this[i];
  for (i = n - 1; i >= 0; --i)
    r[i] = 0;
  r.t = this.t + n;
  r.s = this.s;
}
function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i)
    r[i - n] = this[i];
  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
}
function bnpLShiftTo(n, r) {
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
  for (i = this.t - 1; i >= 0; --i) {
    r[i + ds + 1] = this[i] >> cbs | c;
    c = (this[i] & bm) << bs;
  }
  for (i = ds - 1; i >= 0; --i)
    r[i] = 0;
  r[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
}
function bnpRShiftTo(n, r) {
  r.s = this.s;
  var ds = Math.floor(n / this.DB);
  if (ds >= this.t) {
    r.t = 0;
    return;
  }
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r[0] = this[ds] >> bs;
  for (var i = ds + 1; i < this.t; ++i) {
    r[i - ds - 1] |= (this[i] & bm) << cbs;
    r[i - ds] = this[i] >> bs;
  }
  if (bs > 0)
    r[this.t - ds - 1] |= (this.s & bm) << cbs;
  r.t = this.t - ds;
  r.clamp();
}
function bnpSubTo(a, r) {
  var i = 0, c = 0, m = Math.min(a.t, this.t);
  while (i < m) {
    c += this[i] - a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
  }
  if (a.t < this.t) {
    c -= a.s;
    while (i < this.t) {
      c += this[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while (i < a.t) {
      c -= a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c < -1)
    r[i++] = this.DV + c;
  else if (c > 0)
    r[i++] = c;
  r.t = i;
  r.clamp();
}
function bnpMultiplyTo(a, r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i + y.t;
  while (--i >= 0)
    r[i] = 0;
  for (i = 0; i < y.t; ++i)
    r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
  r.s = 0;
  r.clamp();
  if (this.s != a.s)
    BigInteger.ZERO.subTo(r, r);
}
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2 * x.t;
  while (--i >= 0)
    r[i] = 0;
  for (i = 0; i < x.t - 1; ++i) {
    var c = x.am(i, x[i], r, 2 * i, 0, 1);
    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r[i + x.t] -= x.DV;
      r[i + x.t + 1] = 1;
    }
  }
  if (r.t > 0)
    r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
}
function bnpDivRemTo(m, q, r) {
  var pm = m.abs();
  if (pm.t <= 0)
    return;
  var pt = this.abs();
  if (pt.t < pm.t) {
    if (q != null)
      q.fromInt(0);
    if (r != null)
      this.copyTo(r);
    return;
  }
  if (r == null)
    r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB - nbits(pm[pm.t - 1]);
  if (nsh > 0) {
    pm.lShiftTo(nsh, y);
    pt.lShiftTo(nsh, r);
  } else {
    pm.copyTo(y);
    pt.copyTo(r);
  }
  var ys = y.t;
  var y0 = y[ys - 1];
  if (y0 == 0)
    return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
  var i = r.t, j = i - ys, t = q == null ? nbi() : q;
  y.dlShiftTo(j, t);
  if (r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t, r);
  }
  BigInteger.ONE.dlShiftTo(ys, t);
  t.subTo(y, y);
  while (y.t < ys)
    y[y.t++] = 0;
  while (--j >= 0) {
    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
      y.dlShiftTo(j, t);
      r.subTo(t, r);
      while (r[i] < --qd)
        r.subTo(t, r);
    }
  }
  if (q != null) {
    r.drShiftTo(ys, q);
    if (ts != ms)
      BigInteger.ZERO.subTo(q, q);
  }
  r.t = ys;
  r.clamp();
  if (nsh > 0)
    r.rShiftTo(nsh, r);
  if (ts < 0)
    BigInteger.ZERO.subTo(r, r);
}
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
    a.subTo(r, r);
  return r;
}
function bnpInvDigit() {
  if (this.t < 1)
    return 0;
  var x = this[0];
  if ((x & 1) == 0)
    return 0;
  var y = x & 3;
  y = y * (2 - (x & 15) * y) & 15;
  y = y * (2 - (x & 255) * y) & 255;
  y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
  y = y * (2 - x * y % this.DV) % this.DV;
  return y > 0 ? this.DV - y : -y;
}
function bnEquals(a) {
  return this.compareTo(a) == 0;
}
function bnpAddTo(a, r) {
  var i = 0, c = 0, m = Math.min(a.t, this.t);
  while (i < m) {
    c += this[i] + a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
  }
  if (a.t < this.t) {
    c += a.s;
    while (i < this.t) {
      c += this[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while (i < a.t) {
      c += a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c > 0)
    r[i++] = c;
  else if (c < -1)
    r[i++] = this.DV + c;
  r.t = i;
  r.clamp();
}
function bnAdd(a) {
  var r = nbi();
  this.addTo(a, r);
  return r;
}
function bnSubtract(a) {
  var r = nbi();
  this.subTo(a, r);
  return r;
}
function bnMultiply(a) {
  var r = nbi();
  this.multiplyTo(a, r);
  return r;
}
function bnDivide(a) {
  var r = nbi();
  this.divRemTo(a, r, null);
  return r;
}
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
}
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
    this.m.subTo(r, r);
  return r;
}
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}
function montReduce(x) {
  while (x.t <= this.mt2)
    x[x.t++] = 0;
  for (var i = 0; i < this.m.t; ++i) {
    var j = x[i] & 32767;
    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
    j = i + this.m.t;
    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
    while (x[j] >= x.DV) {
      x[j] -= x.DV;
      x[++j]++;
    }
  }
  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0)
    x.subTo(this.m, x);
}
function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
}
function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
function bnModPow(e, m, callback) {
  var i = e.bitLength(), k, r = nbv(1), z = new Montgomery(m);
  if (i <= 0)
    return r;
  else if (i < 18)
    k = 1;
  else if (i < 48)
    k = 3;
  else if (i < 144)
    k = 4;
  else if (i < 768)
    k = 5;
  else
    k = 6;
  var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
  g[1] = z.convert(this);
  if (k > 1) {
    var g2 = nbi();
    z.sqrTo(g[1], g2);
    while (n <= km) {
      g[n] = nbi();
      z.mulTo(g2, g[n - 2], g[n]);
      n += 2;
    }
  }
  var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
  i = nbits(e[j]) - 1;
  while (j >= 0) {
    if (i >= k1)
      w = e[j] >> i - k1 & km;
    else {
      w = (e[j] & (1 << i + 1) - 1) << k1 - i;
      if (j > 0)
        w |= e[j - 1] >> this.DB + i - k1;
    }
    n = k;
    while ((w & 1) == 0) {
      w >>= 1;
      --n;
    }
    if ((i -= n) < 0) {
      i += this.DB;
      --j;
    }
    if (is1) {
      g[w].copyTo(r);
      is1 = false;
    } else {
      while (n > 1) {
        z.sqrTo(r, r2);
        z.sqrTo(r2, r);
        n -= 2;
      }
      if (n > 0)
        z.sqrTo(r, r2);
      else {
        t = r;
        r = r2;
        r2 = t;
      }
      z.mulTo(r2, g[w], r);
    }
    while (j >= 0 && (e[j] & 1 << i) == 0) {
      z.sqrTo(r, r2);
      t = r;
      r = r2;
      r2 = t;
      if (--i < 0) {
        i = this.DB - 1;
        --j;
      }
    }
  }
  var result = z.revert(r);
  callback(null, result);
  return result;
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
function randomBytes(nBytes) {
  return import_buffer.Buffer.from(new WordArray().random(nBytes).toString(), "hex");
}
var HEX_MSB_REGEX = /^[89a-f]/i;
var initN = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
var newPasswordRequiredChallengeUserAttributePrefix = "userAttributes.";
var AuthenticationHelper = function() {
  function AuthenticationHelper2(PoolName) {
    this.N = new BigInteger_default(initN, 16);
    this.g = new BigInteger_default("2", 16);
    this.k = new BigInteger_default(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
    this.smallAValue = this.generateRandomSmallA();
    this.getLargeAValue(function() {
    });
    this.infoBits = import_buffer.Buffer.from("Caldera Derived Key", "utf8");
    this.poolName = PoolName;
  }
  var _proto = AuthenticationHelper2.prototype;
  _proto.getSmallAValue = function getSmallAValue() {
    return this.smallAValue;
  };
  _proto.getLargeAValue = function getLargeAValue(callback) {
    var _this = this;
    if (this.largeAValue) {
      callback(null, this.largeAValue);
    } else {
      this.calculateA(this.smallAValue, function(err, largeAValue) {
        if (err) {
          callback(err, null);
        }
        _this.largeAValue = largeAValue;
        callback(null, _this.largeAValue);
      });
    }
  };
  _proto.generateRandomSmallA = function generateRandomSmallA() {
    var hexRandom = randomBytes(128).toString("hex");
    var randomBigInt = new BigInteger_default(hexRandom, 16);
    return randomBigInt;
  };
  _proto.generateRandomString = function generateRandomString2() {
    return randomBytes(40).toString("base64");
  };
  _proto.getRandomPassword = function getRandomPassword() {
    return this.randomPassword;
  };
  _proto.getSaltDevices = function getSaltDevices() {
    return this.SaltToHashDevices;
  };
  _proto.getVerifierDevices = function getVerifierDevices() {
    return this.verifierDevices;
  };
  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
    var _this2 = this;
    this.randomPassword = this.generateRandomString();
    var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
    var hashedString = this.hash(combinedString);
    var hexRandom = randomBytes(16).toString("hex");
    this.SaltToHashDevices = this.padHex(new BigInteger_default(hexRandom, 16));
    this.g.modPow(new BigInteger_default(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function(err, verifierDevicesNotPadded) {
      if (err) {
        callback(err, null);
      }
      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
      callback(null, null);
    });
  };
  _proto.calculateA = function calculateA(a, callback) {
    var _this3 = this;
    this.g.modPow(a, this.N, function(err, A) {
      if (err) {
        callback(err, null);
      }
      if (A.mod(_this3.N).equals(BigInteger_default.ZERO)) {
        callback(new Error("Illegal paramater. A mod N cannot be 0."), null);
      }
      callback(null, A);
    });
  };
  _proto.calculateU = function calculateU(A, B) {
    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));
    var finalU = new BigInteger_default(this.UHexHash, 16);
    return finalU;
  };
  _proto.hash = function hash(buf) {
    var awsCryptoHash = new import_sha256_js2.Sha256();
    awsCryptoHash.update(buf);
    var resultFromAWSCrypto = awsCryptoHash.digestSync();
    var hashHex = import_buffer.Buffer.from(resultFromAWSCrypto).toString("hex");
    return new Array(64 - hashHex.length).join("0") + hashHex;
  };
  _proto.hexHash = function hexHash(hexStr) {
    return this.hash(import_buffer.Buffer.from(hexStr, "hex"));
  };
  _proto.computehkdf = function computehkdf(ikm, salt) {
    var infoBitsBuffer = import_buffer.Buffer.concat([this.infoBits, import_buffer.Buffer.from(String.fromCharCode(1), "utf8")]);
    var awsCryptoHash = new import_sha256_js2.Sha256(salt);
    awsCryptoHash.update(ikm);
    var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
    var awsCryptoHashHmac = new import_sha256_js2.Sha256(resultFromAWSCryptoPrk);
    awsCryptoHashHmac.update(infoBitsBuffer);
    var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
    var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
    var currentHex = hashHexFromAWSCrypto.slice(0, 16);
    return currentHex;
  };
  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
    var _this4 = this;
    if (serverBValue.mod(this.N).equals(BigInteger_default.ZERO)) {
      throw new Error("B cannot be zero.");
    }
    this.UValue = this.calculateU(this.largeAValue, serverBValue);
    if (this.UValue.equals(BigInteger_default.ZERO)) {
      throw new Error("U cannot be zero.");
    }
    var usernamePassword = "" + this.poolName + username + ":" + password;
    var usernamePasswordHash = this.hash(usernamePassword);
    var xValue = new BigInteger_default(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
    this.calculateS(xValue, serverBValue, function(err, sValue) {
      if (err) {
        callback(err, null);
      }
      var hkdf = _this4.computehkdf(import_buffer.Buffer.from(_this4.padHex(sValue), "hex"), import_buffer.Buffer.from(_this4.padHex(_this4.UValue), "hex"));
      callback(null, hkdf);
    });
  };
  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
    var _this5 = this;
    this.g.modPow(xValue, this.N, function(err, gModPowXN) {
      if (err) {
        callback(err, null);
      }
      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function(err2, result) {
        if (err2) {
          callback(err2, null);
        }
        callback(null, result.mod(_this5.N));
      });
    });
  };
  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
    return newPasswordRequiredChallengeUserAttributePrefix;
  };
  _proto.padHex = function padHex(bigInt) {
    if (!(bigInt instanceof BigInteger_default)) {
      throw new Error("Not a BigInteger");
    }
    var isNegative = bigInt.compareTo(BigInteger_default.ZERO) < 0;
    var hexStr = bigInt.abs().toString(16);
    hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
    hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
    if (isNegative) {
      var invertedNibbles = hexStr.split("").map(function(x) {
        var invertedNibble = ~parseInt(x, 16) & 15;
        return "0123456789ABCDEF".charAt(invertedNibble);
      }).join("");
      var flippedBitsBI = new BigInteger_default(invertedNibbles, 16).add(BigInteger_default.ONE);
      hexStr = flippedBitsBI.toString(16);
      if (hexStr.toUpperCase().startsWith("FF8")) {
        hexStr = hexStr.substring(2);
      }
    }
    return hexStr;
  };
  return AuthenticationHelper2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js
var import_buffer2 = __toESM(require_buffer());
var CognitoJwtToken = function() {
  function CognitoJwtToken2(token) {
    this.jwtToken = token || "";
    this.payload = this.decodePayload();
  }
  var _proto = CognitoJwtToken2.prototype;
  _proto.getJwtToken = function getJwtToken() {
    return this.jwtToken;
  };
  _proto.getExpiration = function getExpiration() {
    return this.payload.exp;
  };
  _proto.getIssuedAt = function getIssuedAt() {
    return this.payload.iat;
  };
  _proto.decodePayload = function decodePayload() {
    var payload = this.jwtToken.split(".")[1];
    try {
      return JSON.parse(import_buffer2.Buffer.from(payload, "base64").toString("utf8"));
    } catch (err) {
      return {};
    }
  };
  return CognitoJwtToken2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
var CognitoAccessToken = function(_CognitoJwtToken) {
  _inheritsLoose(CognitoAccessToken2, _CognitoJwtToken);
  function CognitoAccessToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, AccessToken = _ref.AccessToken;
    return _CognitoJwtToken.call(this, AccessToken || "") || this;
  }
  return CognitoAccessToken2;
}(CognitoJwtToken);

// node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
var CognitoIdToken = function(_CognitoJwtToken) {
  _inheritsLoose2(CognitoIdToken2, _CognitoJwtToken);
  function CognitoIdToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken;
    return _CognitoJwtToken.call(this, IdToken || "") || this;
  }
  return CognitoIdToken2;
}(CognitoJwtToken);

// node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js
var CognitoRefreshToken = function() {
  function CognitoRefreshToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, RefreshToken = _ref.RefreshToken;
    this.token = RefreshToken || "";
  }
  var _proto = CognitoRefreshToken2.prototype;
  _proto.getToken = function getToken() {
    return this.token;
  };
  return CognitoRefreshToken2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoUser.js
var import_buffer3 = __toESM(require_buffer());
var import_sha256_js3 = __toESM(require_build2());

// node_modules/amazon-cognito-identity-js/es/Platform/version.js
var version2 = "5.0.4";

// node_modules/amazon-cognito-identity-js/es/Platform/index.js
var BASE_USER_AGENT2 = "aws-amplify/" + version2;
var Platform2 = {
  userAgent: BASE_USER_AGENT2 + " js",
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform2.product = navigator.product || "";
  Platform2.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform2.userAgent = BASE_USER_AGENT2 + " react-native";
      Platform2.isReactNative = true;
      break;
    default:
      Platform2.userAgent = BASE_USER_AGENT2 + " js";
      Platform2.isReactNative = false;
      break;
  }
}
var getUserAgent = function getUserAgent2() {
  return Platform2.userAgent;
};

// node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js
var CognitoUserSession = function() {
  function CognitoUserSession2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken, RefreshToken = _ref.RefreshToken, AccessToken = _ref.AccessToken, ClockDrift = _ref.ClockDrift;
    if (AccessToken == null || IdToken == null) {
      throw new Error("Id token and Access Token must be present.");
    }
    this.idToken = IdToken;
    this.refreshToken = RefreshToken;
    this.accessToken = AccessToken;
    this.clockDrift = ClockDrift === void 0 ? this.calculateClockDrift() : ClockDrift;
  }
  var _proto = CognitoUserSession2.prototype;
  _proto.getIdToken = function getIdToken() {
    return this.idToken;
  };
  _proto.getRefreshToken = function getRefreshToken() {
    return this.refreshToken;
  };
  _proto.getAccessToken = function getAccessToken() {
    return this.accessToken;
  };
  _proto.getClockDrift = function getClockDrift() {
    return this.clockDrift;
  };
  _proto.calculateClockDrift = function calculateClockDrift() {
    var now = Math.floor(/* @__PURE__ */ new Date() / 1e3);
    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
    return now - iat;
  };
  _proto.isValid = function isValid() {
    var now = Math.floor(/* @__PURE__ */ new Date() / 1e3);
    var adjusted = now - this.clockDrift;
    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
  };
  return CognitoUserSession2;
}();

// node_modules/amazon-cognito-identity-js/es/DateHelper.js
var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var weekNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var DateHelper = function() {
  function DateHelper2() {
  }
  var _proto = DateHelper2.prototype;
  _proto.getNowString = function getNowString() {
    var now = /* @__PURE__ */ new Date();
    var weekDay = weekNames[now.getUTCDay()];
    var month = monthNames[now.getUTCMonth()];
    var day = now.getUTCDate();
    var hours = now.getUTCHours();
    if (hours < 10) {
      hours = "0" + hours;
    }
    var minutes = now.getUTCMinutes();
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    var seconds = now.getUTCSeconds();
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    var year = now.getUTCFullYear();
    var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
    return dateNow;
  };
  return DateHelper2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js
var CognitoUserAttribute = function() {
  function CognitoUserAttribute2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, Name = _ref.Name, Value = _ref.Value;
    this.Name = Name || "";
    this.Value = Value || "";
  }
  var _proto = CognitoUserAttribute2.prototype;
  _proto.getValue = function getValue() {
    return this.Value;
  };
  _proto.setValue = function setValue(value) {
    this.Value = value;
    return this;
  };
  _proto.getName = function getName() {
    return this.Name;
  };
  _proto.setName = function setName(name) {
    this.Name = name;
    return this;
  };
  _proto.toString = function toString() {
    return JSON.stringify(this);
  };
  _proto.toJSON = function toJSON() {
    return {
      Name: this.Name,
      Value: this.Value
    };
  };
  return CognitoUserAttribute2;
}();

// node_modules/amazon-cognito-identity-js/es/StorageHelper.js
var dataMemory2 = {};
var MemoryStorage2 = function() {
  function MemoryStorage3() {
  }
  MemoryStorage3.setItem = function setItem(key, value) {
    dataMemory2[key] = value;
    return dataMemory2[key];
  };
  MemoryStorage3.getItem = function getItem(key) {
    return Object.prototype.hasOwnProperty.call(dataMemory2, key) ? dataMemory2[key] : void 0;
  };
  MemoryStorage3.removeItem = function removeItem(key) {
    return delete dataMemory2[key];
  };
  MemoryStorage3.clear = function clear() {
    dataMemory2 = {};
    return dataMemory2;
  };
  return MemoryStorage3;
}();
var StorageHelper2 = function() {
  function StorageHelper3() {
    try {
      this.storageWindow = window.localStorage;
      this.storageWindow.setItem("aws.cognito.test-ls", 1);
      this.storageWindow.removeItem("aws.cognito.test-ls");
    } catch (exception) {
      this.storageWindow = MemoryStorage2;
    }
  }
  var _proto = StorageHelper3.prototype;
  _proto.getStorage = function getStorage() {
    return this.storageWindow;
  };
  return StorageHelper3;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoUser.js
var isNavigatorAvailable = typeof navigator !== "undefined";
var userAgent = isNavigatorAvailable ? Platform2.isReactNative ? "react-native" : navigator.userAgent : "nodejs";
var CognitoUser = function() {
  function CognitoUser2(data) {
    if (data == null || data.Username == null || data.Pool == null) {
      throw new Error("Username and Pool information are required.");
    }
    this.username = data.Username || "";
    this.pool = data.Pool;
    this.Session = null;
    this.client = data.Pool.client;
    this.signInUserSession = null;
    this.authenticationFlowType = "USER_SRP_AUTH";
    this.storage = data.Storage || new StorageHelper2().getStorage();
    this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
  }
  var _proto = CognitoUser2.prototype;
  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
    this.clearCachedUserData();
    this.signInUserSession = signInUserSession;
    this.cacheTokens();
  };
  _proto.getSignInUserSession = function getSignInUserSession() {
    return this.signInUserSession;
  };
  _proto.getUsername = function getUsername() {
    return this.username;
  };
  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
    return this.authenticationFlowType;
  };
  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
    this.authenticationFlowType = authenticationFlowType;
  };
  _proto.initiateAuth = function initiateAuth(authDetails, callback) {
    var _this = this;
    var authParameters = authDetails.getAuthParameters();
    authParameters.USERNAME = this.username;
    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
    var jsonReq = {
      AuthFlow: "CUSTOM_AUTH",
      ClientId: this.pool.getClientId(),
      AuthParameters: authParameters,
      ClientMetadata: clientMetaData
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("InitiateAuth", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      var challengeName = data.ChallengeName;
      var challengeParameters = data.ChallengeParameters;
      if (challengeName === "CUSTOM_CHALLENGE") {
        _this.Session = data.Session;
        return callback.customChallenge(challengeParameters);
      }
      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
      _this.cacheTokens();
      return callback.onSuccess(_this.signInUserSession);
    });
  };
  _proto.authenticateUser = function authenticateUser(authDetails, callback) {
    if (this.authenticationFlowType === "USER_PASSWORD_AUTH") {
      return this.authenticateUserPlainUsernamePassword(authDetails, callback);
    } else if (this.authenticationFlowType === "USER_SRP_AUTH" || this.authenticationFlowType === "CUSTOM_AUTH") {
      return this.authenticateUserDefaultAuth(authDetails, callback);
    }
    return callback.onFailure(new Error("Authentication flow type is invalid."));
  };
  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
    var _this2 = this;
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    var dateHelper = new DateHelper();
    var serverBValue;
    var salt;
    var authParameters = {};
    if (this.deviceKey != null) {
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    authParameters.USERNAME = this.username;
    authenticationHelper.getLargeAValue(function(errOnAValue, aValue) {
      if (errOnAValue) {
        callback.onFailure(errOnAValue);
      }
      authParameters.SRP_A = aValue.toString(16);
      if (_this2.authenticationFlowType === "CUSTOM_AUTH") {
        authParameters.CHALLENGE_NAME = "SRP_A";
      }
      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
      var jsonReq = {
        AuthFlow: _this2.authenticationFlowType,
        ClientId: _this2.pool.getClientId(),
        AuthParameters: authParameters,
        ClientMetadata: clientMetaData
      };
      if (_this2.getUserContextData(_this2.username)) {
        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
      }
      _this2.client.request("InitiateAuth", jsonReq, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        var challengeParameters = data.ChallengeParameters;
        _this2.username = challengeParameters.USER_ID_FOR_SRP;
        _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
        serverBValue = new BigInteger_default(challengeParameters.SRP_B, 16);
        salt = new BigInteger_default(challengeParameters.SALT, 16);
        _this2.getCachedDeviceKeyAndPassword();
        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function(errOnHkdf, hkdf) {
          if (errOnHkdf) {
            callback.onFailure(errOnHkdf);
          }
          var dateNow = dateHelper.getNowString();
          var concatBuffer = import_buffer3.Buffer.concat([import_buffer3.Buffer.from(_this2.pool.getUserPoolName(), "utf8"), import_buffer3.Buffer.from(_this2.username, "utf8"), import_buffer3.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"), import_buffer3.Buffer.from(dateNow, "utf8")]);
          var awsCryptoHash = new import_sha256_js3.Sha256(hkdf);
          awsCryptoHash.update(concatBuffer);
          var resultFromAWSCrypto = awsCryptoHash.digestSync();
          var signatureString = import_buffer3.Buffer.from(resultFromAWSCrypto).toString("base64");
          var challengeResponses = {};
          challengeResponses.USERNAME = _this2.username;
          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
          challengeResponses.TIMESTAMP = dateNow;
          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
          if (_this2.deviceKey != null) {
            challengeResponses.DEVICE_KEY = _this2.deviceKey;
          }
          var respondToAuthChallenge = function respondToAuthChallenge2(challenge, challengeCallback) {
            return _this2.client.request("RespondToAuthChallenge", challenge, function(errChallenge, dataChallenge) {
              if (errChallenge && errChallenge.code === "ResourceNotFoundException" && errChallenge.message.toLowerCase().indexOf("device") !== -1) {
                challengeResponses.DEVICE_KEY = null;
                _this2.deviceKey = null;
                _this2.randomPassword = null;
                _this2.deviceGroupKey = null;
                _this2.clearCachedDeviceKeyAndPassword();
                return respondToAuthChallenge2(challenge, challengeCallback);
              }
              return challengeCallback(errChallenge, dataChallenge);
            });
          };
          var jsonReqResp = {
            ChallengeName: "PASSWORD_VERIFIER",
            ClientId: _this2.pool.getClientId(),
            ChallengeResponses: challengeResponses,
            Session: data.Session,
            ClientMetadata: clientMetaData
          };
          if (_this2.getUserContextData()) {
            jsonReqResp.UserContextData = _this2.getUserContextData();
          }
          respondToAuthChallenge(jsonReqResp, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) {
              return callback.onFailure(errAuthenticate);
            }
            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
          });
          return void 0;
        });
        return void 0;
      });
    });
  };
  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
    var _this3 = this;
    var authParameters = {};
    authParameters.USERNAME = this.username;
    authParameters.PASSWORD = authDetails.getPassword();
    if (!authParameters.PASSWORD) {
      callback.onFailure(new Error("PASSWORD parameter is required"));
      return;
    }
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    this.getCachedDeviceKeyAndPassword();
    if (this.deviceKey != null) {
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
    var jsonReq = {
      AuthFlow: "USER_PASSWORD_AUTH",
      ClientId: this.pool.getClientId(),
      AuthParameters: authParameters,
      ClientMetadata: clientMetaData
    };
    if (this.getUserContextData(this.username)) {
      jsonReq.UserContextData = this.getUserContextData(this.username);
    }
    this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
      if (err) {
        return callback.onFailure(err);
      }
      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
    });
  };
  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
    var _this4 = this;
    var challengeName = dataAuthenticate.ChallengeName;
    var challengeParameters = dataAuthenticate.ChallengeParameters;
    if (challengeName === "SMS_MFA") {
      this.Session = dataAuthenticate.Session;
      return callback.mfaRequired(challengeName, challengeParameters);
    }
    if (challengeName === "SELECT_MFA_TYPE") {
      this.Session = dataAuthenticate.Session;
      return callback.selectMFAType(challengeName, challengeParameters);
    }
    if (challengeName === "MFA_SETUP") {
      this.Session = dataAuthenticate.Session;
      return callback.mfaSetup(challengeName, challengeParameters);
    }
    if (challengeName === "SOFTWARE_TOKEN_MFA") {
      this.Session = dataAuthenticate.Session;
      return callback.totpRequired(challengeName, challengeParameters);
    }
    if (challengeName === "CUSTOM_CHALLENGE") {
      this.Session = dataAuthenticate.Session;
      return callback.customChallenge(challengeParameters);
    }
    if (challengeName === "NEW_PASSWORD_REQUIRED") {
      this.Session = dataAuthenticate.Session;
      var userAttributes = null;
      var rawRequiredAttributes = null;
      var requiredAttributes = [];
      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
      if (challengeParameters) {
        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
      }
      if (rawRequiredAttributes) {
        for (var i = 0; i < rawRequiredAttributes.length; i++) {
          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
        }
      }
      return callback.newPasswordRequired(userAttributes, requiredAttributes);
    }
    if (challengeName === "DEVICE_SRP_AUTH") {
      this.Session = dataAuthenticate.Session;
      this.getDeviceResponse(callback);
      return void 0;
    }
    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
    this.challengeName = challengeName;
    this.cacheTokens();
    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
    if (newDeviceMetadata == null) {
      return callback.onSuccess(this.signInUserSession);
    }
    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
      if (errGenHash) {
        return callback.onFailure(errGenHash);
      }
      var deviceSecretVerifierConfig = {
        Salt: import_buffer3.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
        PasswordVerifier: import_buffer3.Buffer.from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
      };
      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
      _this4.randomPassword = authenticationHelper.getRandomPassword();
      _this4.client.request("ConfirmDevice", {
        DeviceKey: newDeviceMetadata.DeviceKey,
        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
        DeviceName: userAgent
      }, function(errConfirm, dataConfirm) {
        if (errConfirm) {
          return callback.onFailure(errConfirm);
        }
        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
        _this4.cacheDeviceKeyAndPassword();
        if (dataConfirm.UserConfirmationNecessary === true) {
          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
        }
        return callback.onSuccess(_this4.signInUserSession);
      });
      return void 0;
    });
    return void 0;
  };
  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
    var _this5 = this;
    if (!newPassword) {
      return callback.onFailure(new Error("New password is required."));
    }
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
    var finalUserAttributes = {};
    if (requiredAttributeData) {
      Object.keys(requiredAttributeData).forEach(function(key) {
        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
      });
    }
    finalUserAttributes.NEW_PASSWORD = newPassword;
    finalUserAttributes.USERNAME = this.username;
    var jsonReq = {
      ChallengeName: "NEW_PASSWORD_REQUIRED",
      ClientId: this.pool.getClientId(),
      ChallengeResponses: finalUserAttributes,
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(errAuthenticate, dataAuthenticate) {
      if (errAuthenticate) {
        return callback.onFailure(errAuthenticate);
      }
      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
    });
    return void 0;
  };
  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
    var _this6 = this;
    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);
    var dateHelper = new DateHelper();
    var authParameters = {};
    authParameters.USERNAME = this.username;
    authParameters.DEVICE_KEY = this.deviceKey;
    authenticationHelper.getLargeAValue(function(errAValue, aValue) {
      if (errAValue) {
        callback.onFailure(errAValue);
      }
      authParameters.SRP_A = aValue.toString(16);
      var jsonReq = {
        ChallengeName: "DEVICE_SRP_AUTH",
        ClientId: _this6.pool.getClientId(),
        ChallengeResponses: authParameters,
        ClientMetadata: clientMetadata,
        Session: _this6.Session
      };
      if (_this6.getUserContextData()) {
        jsonReq.UserContextData = _this6.getUserContextData();
      }
      _this6.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        var challengeParameters = data.ChallengeParameters;
        var serverBValue = new BigInteger_default(challengeParameters.SRP_B, 16);
        var salt = new BigInteger_default(challengeParameters.SALT, 16);
        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function(errHkdf, hkdf) {
          if (errHkdf) {
            return callback.onFailure(errHkdf);
          }
          var dateNow = dateHelper.getNowString();
          var concatBuffer = import_buffer3.Buffer.concat([import_buffer3.Buffer.from(_this6.deviceGroupKey, "utf8"), import_buffer3.Buffer.from(_this6.deviceKey, "utf8"), import_buffer3.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"), import_buffer3.Buffer.from(dateNow, "utf8")]);
          var awsCryptoHash = new import_sha256_js3.Sha256(hkdf);
          awsCryptoHash.update(concatBuffer);
          var resultFromAWSCrypto = awsCryptoHash.digestSync();
          var signatureString = import_buffer3.Buffer.from(resultFromAWSCrypto).toString("base64");
          var challengeResponses = {};
          challengeResponses.USERNAME = _this6.username;
          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
          challengeResponses.TIMESTAMP = dateNow;
          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
          challengeResponses.DEVICE_KEY = _this6.deviceKey;
          var jsonReqResp = {
            ChallengeName: "DEVICE_PASSWORD_VERIFIER",
            ClientId: _this6.pool.getClientId(),
            ChallengeResponses: challengeResponses,
            Session: data.Session
          };
          if (_this6.getUserContextData()) {
            jsonReqResp.UserContextData = _this6.getUserContextData();
          }
          _this6.client.request("RespondToAuthChallenge", jsonReqResp, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) {
              return callback.onFailure(errAuthenticate);
            }
            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
            _this6.cacheTokens();
            return callback.onSuccess(_this6.signInUserSession);
          });
          return void 0;
        });
        return void 0;
      });
    });
  };
  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      ConfirmationCode: confirmationCode,
      Username: this.username,
      ForceAliasCreation: forceAliasCreation,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ConfirmSignUp", jsonReq, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
  };
  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
    var _this7 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.ANSWER = answerChallenge;
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    this.getCachedDeviceKeyAndPassword();
    if (this.deviceKey != null) {
      challengeResponses.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ChallengeName: "CUSTOM_CHALLENGE",
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return _this7.authenticateUserInternal(data, authenticationHelper, callback);
    });
  };
  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
    var _this8 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.SMS_MFA_CODE = confirmationCode;
    var mfaTypeSelection = mfaType || "SMS_MFA";
    if (mfaTypeSelection === "SOFTWARE_TOKEN_MFA") {
      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
    }
    if (this.deviceKey != null) {
      challengeResponses.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ChallengeName: mfaTypeSelection,
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, dataAuthenticate) {
      if (err) {
        return callback.onFailure(err);
      }
      var challengeName = dataAuthenticate.ChallengeName;
      if (challengeName === "DEVICE_SRP_AUTH") {
        _this8.getDeviceResponse(callback);
        return void 0;
      }
      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
      _this8.cacheTokens();
      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {
        return callback.onSuccess(_this8.signInUserSession);
      }
      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolName());
      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
        if (errGenHash) {
          return callback.onFailure(errGenHash);
        }
        var deviceSecretVerifierConfig = {
          Salt: import_buffer3.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
          PasswordVerifier: import_buffer3.Buffer.from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
        };
        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
        _this8.randomPassword = authenticationHelper.getRandomPassword();
        _this8.client.request("ConfirmDevice", {
          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
          DeviceName: userAgent
        }, function(errConfirm, dataConfirm) {
          if (errConfirm) {
            return callback.onFailure(errConfirm);
          }
          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
          _this8.cacheDeviceKeyAndPassword();
          if (dataConfirm.UserConfirmationNecessary === true) {
            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
          }
          return callback.onSuccess(_this8.signInUserSession);
        });
        return void 0;
      });
      return void 0;
    });
  };
  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("ChangePassword", {
      PreviousPassword: oldUserPassword,
      ProposedPassword: newUserPassword,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.enableMFA = function enableMFA(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    var mfaOptions = [];
    var mfaEnabled = {
      DeliveryMedium: "SMS",
      AttributeName: "phone_number"
    };
    mfaOptions.push(mfaEnabled);
    this.client.request("SetUserSettings", {
      MFAOptions: mfaOptions,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("SetUserMFAPreference", {
      SMSMfaSettings: smsMfaSettings,
      SoftwareTokenMfaSettings: softwareTokenMfaSettings,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.disableMFA = function disableMFA(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    var mfaOptions = [];
    this.client.request("SetUserSettings", {
      MFAOptions: mfaOptions,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.deleteUser = function deleteUser(callback, clientMetadata) {
    var _this9 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("DeleteUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      _this9.clearCachedUser();
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
    var _this10 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("UpdateUserAttributes", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      UserAttributes: attributes,
      ClientMetadata: clientMetadata
    }, function(err, result) {
      if (err) {
        return callback(err, null);
      }
      return _this10.getUserData(function() {
        return callback(null, "SUCCESS", result);
      }, {
        bypassCache: true
      });
    });
    return void 0;
  };
  _proto.getUserAttributes = function getUserAttributes(callback) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err, userData) {
      if (err) {
        return callback(err, null);
      }
      var attributeList = [];
      for (var i = 0; i < userData.UserAttributes.length; i++) {
        var attribute = {
          Name: userData.UserAttributes[i].Name,
          Value: userData.UserAttributes[i].Value
        };
        var userAttribute = new CognitoUserAttribute(attribute);
        attributeList.push(userAttribute);
      }
      return callback(null, attributeList);
    });
    return void 0;
  };
  _proto.getMFAOptions = function getMFAOptions(callback) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err, userData) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, userData.MFAOptions);
    });
    return void 0;
  };
  _proto.createGetUserRequest = function createGetUserRequest() {
    return this.client.promisifyRequest("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    });
  };
  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
    var _this11 = this;
    if (options === void 0) {
      options = {};
    }
    return new Promise(function(resolve) {
      var refresh = _this11.signInUserSession.getRefreshToken();
      if (refresh && refresh.getToken()) {
        _this11.refreshSession(refresh, resolve, options.clientMetadata);
      } else {
        resolve();
      }
    });
  };
  _proto.getUserData = function getUserData(callback, params) {
    var _this12 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.clearCachedUserData();
      return callback(new Error("User is not authenticated"), null);
    }
    var userData = this.getUserDataFromCache();
    if (!userData) {
      this.fetchUserData().then(function(data) {
        callback(null, data);
      })["catch"](callback);
      return;
    }
    if (this.isFetchUserDataAndTokenRequired(params)) {
      this.fetchUserData().then(function(data) {
        return _this12.refreshSessionIfPossible(params).then(function() {
          return data;
        });
      }).then(function(data) {
        return callback(null, data);
      })["catch"](callback);
      return;
    }
    try {
      callback(null, JSON.parse(userData));
      return;
    } catch (err) {
      this.clearCachedUserData();
      callback(err, null);
      return;
    }
  };
  _proto.getUserDataFromCache = function getUserDataFromCache() {
    var userData = this.storage.getItem(this.userDataKey);
    return userData;
  };
  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
    var _ref = params || {}, _ref$bypassCache = _ref.bypassCache, bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
    return bypassCache;
  };
  _proto.fetchUserData = function fetchUserData() {
    var _this13 = this;
    return this.createGetUserRequest().then(function(data) {
      _this13.cacheUserData(data);
      return data;
    });
  };
  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
    var _this14 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("DeleteUserAttributes", {
      UserAttributeNames: attributeList,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return _this14.getUserData(function() {
        return callback(null, "SUCCESS");
      }, {
        bypassCache: true
      });
    });
    return void 0;
  };
  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ClientMetadata: clientMetadata
    };
    this.client.request("ResendConfirmationCode", jsonReq, function(err, result) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, result);
    });
  };
  _proto.getSession = function getSession(callback, options) {
    if (options === void 0) {
      options = {};
    }
    if (this.username == null) {
      return callback(new Error("Username is null. Cannot retrieve a new session"), null);
    }
    if (this.signInUserSession != null && this.signInUserSession.isValid()) {
      return callback(null, this.signInUserSession);
    }
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var idTokenKey = keyPrefix + ".idToken";
    var accessTokenKey = keyPrefix + ".accessToken";
    var refreshTokenKey = keyPrefix + ".refreshToken";
    var clockDriftKey = keyPrefix + ".clockDrift";
    if (this.storage.getItem(idTokenKey)) {
      var idToken = new CognitoIdToken({
        IdToken: this.storage.getItem(idTokenKey)
      });
      var accessToken = new CognitoAccessToken({
        AccessToken: this.storage.getItem(accessTokenKey)
      });
      var refreshToken = new CognitoRefreshToken({
        RefreshToken: this.storage.getItem(refreshTokenKey)
      });
      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
      var sessionData = {
        IdToken: idToken,
        AccessToken: accessToken,
        RefreshToken: refreshToken,
        ClockDrift: clockDrift
      };
      var cachedSession = new CognitoUserSession(sessionData);
      if (cachedSession.isValid()) {
        this.signInUserSession = cachedSession;
        return callback(null, this.signInUserSession);
      }
      if (!refreshToken.getToken()) {
        return callback(new Error("Cannot retrieve a new session. Please authenticate."), null);
      }
      this.refreshSession(refreshToken, callback, options.clientMetadata);
    } else {
      callback(new Error("Local storage is missing an ID Token, Please authenticate"), null);
    }
    return void 0;
  };
  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
    var _this15 = this;
    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
    var authParameters = {};
    authParameters.REFRESH_TOKEN = refreshToken.getToken();
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var lastUserKey = keyPrefix + ".LastAuthUser";
    if (this.storage.getItem(lastUserKey)) {
      this.username = this.storage.getItem(lastUserKey);
      var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
      this.deviceKey = this.storage.getItem(deviceKeyKey);
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      AuthFlow: "REFRESH_TOKEN_AUTH",
      AuthParameters: authParameters,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
      if (err) {
        if (err.code === "NotAuthorizedException") {
          _this15.clearCachedUser();
        }
        return wrappedCallback(err, null);
      }
      if (authResult) {
        var authenticationResult = authResult.AuthenticationResult;
        if (!Object.prototype.hasOwnProperty.call(authenticationResult, "RefreshToken")) {
          authenticationResult.RefreshToken = refreshToken.getToken();
        }
        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
        _this15.cacheTokens();
        return wrappedCallback(null, _this15.signInUserSession);
      }
      return void 0;
    });
  };
  _proto.cacheTokens = function cacheTokens() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
    var lastUserKey = keyPrefix + ".LastAuthUser";
    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
    this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
    this.storage.setItem(lastUserKey, this.username);
  };
  _proto.cacheUserData = function cacheUserData(userData) {
    this.storage.setItem(this.userDataKey, JSON.stringify(userData));
  };
  _proto.clearCachedUserData = function clearCachedUserData() {
    this.storage.removeItem(this.userDataKey);
  };
  _proto.clearCachedUser = function clearCachedUser() {
    this.clearCachedTokens();
    this.clearCachedUserData();
  };
  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    this.storage.setItem(deviceKeyKey, this.deviceKey);
    this.storage.setItem(randomPasswordKey, this.randomPassword);
    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
  };
  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    if (this.storage.getItem(deviceKeyKey)) {
      this.deviceKey = this.storage.getItem(deviceKeyKey);
      this.randomPassword = this.storage.getItem(randomPasswordKey);
      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
    }
  };
  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    this.storage.removeItem(deviceKeyKey);
    this.storage.removeItem(randomPasswordKey);
    this.storage.removeItem(deviceGroupKeyKey);
  };
  _proto.clearCachedTokens = function clearCachedTokens() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
    var lastUserKey = keyPrefix + ".LastAuthUser";
    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
    this.storage.removeItem(idTokenKey);
    this.storage.removeItem(accessTokenKey);
    this.storage.removeItem(refreshTokenKey);
    this.storage.removeItem(lastUserKey);
    this.storage.removeItem(clockDriftKey);
  };
  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
    var idToken = new CognitoIdToken(authResult);
    var accessToken = new CognitoAccessToken(authResult);
    var refreshToken = new CognitoRefreshToken(authResult);
    var sessionData = {
      IdToken: idToken,
      AccessToken: accessToken,
      RefreshToken: refreshToken
    };
    return new CognitoUserSession(sessionData);
  };
  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ForgotPassword", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      if (typeof callback.inputVerificationCode === "function") {
        return callback.inputVerificationCode(data);
      }
      return callback.onSuccess(data);
    });
  };
  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ConfirmationCode: confirmationCode,
      Password: newPassword,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ConfirmForgotPassword", jsonReq, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
  };
  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GetUserAttributeVerificationCode", {
      AttributeName: attributeName,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      if (typeof callback.inputVerificationCode === "function") {
        return callback.inputVerificationCode(data);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("VerifyUserAttribute", {
      AttributeName: attributeName,
      Code: confirmationCode,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.getDevice = function getDevice(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GetDevice", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey
    }, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess(data);
    });
    return void 0;
  };
  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("ForgetDevice", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: deviceKey
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.forgetDevice = function forgetDevice(callback) {
    var _this16 = this;
    this.forgetSpecificDevice(this.deviceKey, {
      onFailure: callback.onFailure,
      onSuccess: function onSuccess(result) {
        _this16.deviceKey = null;
        _this16.deviceGroupKey = null;
        _this16.randomPassword = null;
        _this16.clearCachedDeviceKeyAndPassword();
        return callback.onSuccess(result);
      }
    });
  };
  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("UpdateDeviceStatus", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey,
      DeviceRememberedStatus: "remembered"
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("UpdateDeviceStatus", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey,
      DeviceRememberedStatus: "not_remembered"
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.listDevices = function listDevices(limit, paginationToken, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    var requestParams = {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      Limit: limit
    };
    if (paginationToken) {
      requestParams.PaginationToken = paginationToken;
    }
    this.client.request("ListDevices", requestParams, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess(data);
    });
    return void 0;
  };
  _proto.globalSignOut = function globalSignOut(callback) {
    var _this17 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GlobalSignOut", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      _this17.clearCachedUser();
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.signOut = function signOut(revokeTokenCallback) {
    var _this18 = this;
    if (!revokeTokenCallback || typeof revokeTokenCallback !== "function") {
      this.cleanClientData();
      return;
    }
    this.getSession(function(error, _session) {
      if (error) {
        return revokeTokenCallback(error);
      }
      _this18.revokeTokens(function(err) {
        _this18.cleanClientData();
        revokeTokenCallback(err);
      });
    });
  };
  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
    if (revokeTokenCallback === void 0) {
      revokeTokenCallback = function revokeTokenCallback2() {
      };
    }
    if (typeof revokeTokenCallback !== "function") {
      throw new Error("Invalid revokeTokenCallback. It should be a function.");
    }
    var tokensToBeRevoked = [];
    if (!this.signInUserSession) {
      var error = new Error("User is not authenticated");
      return revokeTokenCallback(error);
    }
    if (!this.signInUserSession.getAccessToken()) {
      var _error = new Error("No Access token available");
      return revokeTokenCallback(_error);
    }
    var refreshToken = this.signInUserSession.getRefreshToken().getToken();
    var accessToken = this.signInUserSession.getAccessToken();
    if (this.isSessionRevocable(accessToken)) {
      if (refreshToken) {
        return this.revokeToken({
          token: refreshToken,
          callback: revokeTokenCallback
        });
      }
    }
    revokeTokenCallback();
  };
  _proto.isSessionRevocable = function isSessionRevocable(token) {
    if (token && typeof token.decodePayload === "function") {
      try {
        var _token$decodePayload = token.decodePayload(), origin_jti = _token$decodePayload.origin_jti;
        return !!origin_jti;
      } catch (err) {
      }
    }
    return false;
  };
  _proto.cleanClientData = function cleanClientData() {
    this.signInUserSession = null;
    this.clearCachedUser();
  };
  _proto.revokeToken = function revokeToken(_ref2) {
    var token = _ref2.token, callback = _ref2.callback;
    this.client.requestWithRetry("RevokeToken", {
      Token: token,
      ClientId: this.pool.getClientId()
    }, function(err) {
      if (err) {
        return callback(err);
      }
      callback();
    });
  };
  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
    var _this19 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.ANSWER = answerChallenge;
    var jsonReq = {
      ChallengeName: "SELECT_MFA_TYPE",
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      _this19.Session = data.Session;
      if (answerChallenge === "SMS_MFA") {
        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
      }
      if (answerChallenge === "SOFTWARE_TOKEN_MFA") {
        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
      }
      return void 0;
    });
  };
  _proto.getUserContextData = function getUserContextData() {
    var pool = this.pool;
    return pool.getUserContextData(this.username);
  };
  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
    var _this20 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.client.request("AssociateSoftwareToken", {
        Session: this.Session
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        _this20.Session = data.Session;
        return callback.associateSecretCode(data.SecretCode);
      });
    } else {
      this.client.request("AssociateSoftwareToken", {
        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        return callback.associateSecretCode(data.SecretCode);
      });
    }
  };
  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
    var _this21 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.client.request("VerifySoftwareToken", {
        Session: this.Session,
        UserCode: totpCode,
        FriendlyDeviceName: friendlyDeviceName
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        _this21.Session = data.Session;
        var challengeResponses = {};
        challengeResponses.USERNAME = _this21.username;
        var jsonReq = {
          ChallengeName: "MFA_SETUP",
          ClientId: _this21.pool.getClientId(),
          ChallengeResponses: challengeResponses,
          Session: _this21.Session
        };
        if (_this21.getUserContextData()) {
          jsonReq.UserContextData = _this21.getUserContextData();
        }
        _this21.client.request("RespondToAuthChallenge", jsonReq, function(errRespond, dataRespond) {
          if (errRespond) {
            return callback.onFailure(errRespond);
          }
          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);
          _this21.cacheTokens();
          return callback.onSuccess(_this21.signInUserSession);
        });
        return void 0;
      });
    } else {
      this.client.request("VerifySoftwareToken", {
        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
        UserCode: totpCode,
        FriendlyDeviceName: friendlyDeviceName
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        return callback.onSuccess(data);
      });
    }
  };
  return CognitoUser2;
}();

// node_modules/amazon-cognito-identity-js/es/Client.js
var import_isomorphic_unfetch2 = __toESM(require_browser());

// node_modules/amazon-cognito-identity-js/es/UserAgent.js
function UserAgent() {
}
UserAgent.prototype.userAgent = getUserAgent();
var appendToCognitoUserAgent = function appendToCognitoUserAgent2(content) {
  if (!content) {
    return;
  }
  if (UserAgent.prototype.userAgent && !UserAgent.prototype.userAgent.includes(content)) {
    UserAgent.prototype.userAgent = UserAgent.prototype.userAgent.concat(" ", content);
  }
  if (!UserAgent.prototype.userAgent || UserAgent.prototype.userAgent === "") {
    UserAgent.prototype.userAgent = content;
  }
};
var UserAgent_default = UserAgent;

// node_modules/amazon-cognito-identity-js/es/Client.js
function _inheritsLoose3(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf3(subClass, superClass);
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf3(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf3(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
var CognitoError = function(_Error) {
  _inheritsLoose3(CognitoError2, _Error);
  function CognitoError2(message, code, name, statusCode) {
    var _this;
    _this = _Error.call(this, message) || this;
    _this.code = code;
    _this.name = name;
    _this.statusCode = statusCode;
    return _this;
  }
  return CognitoError2;
}(_wrapNativeSuper(Error));
var Client2 = function() {
  function Client3(region, endpoint, fetchOptions) {
    this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
    var _ref = fetchOptions || {}, credentials = _ref.credentials;
    this.fetchOptions = credentials ? {
      credentials
    } : {};
  }
  var _proto = Client3.prototype;
  _proto.promisifyRequest = function promisifyRequest(operation, params) {
    var _this2 = this;
    return new Promise(function(resolve, reject) {
      _this2.request(operation, params, function(err, data) {
        if (err) {
          reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
        } else {
          resolve(data);
        }
      });
    });
  };
  _proto.requestWithRetry = function requestWithRetry(operation, params, callback) {
    var _this3 = this;
    var MAX_DELAY_IN_MILLIS = 5 * 1e3;
    jitteredExponentialRetry2(function(p) {
      return new Promise(function(res, rej) {
        _this3.request(operation, p, function(error, result) {
          if (error) {
            rej(error);
          } else {
            res(result);
          }
        });
      });
    }, [params], MAX_DELAY_IN_MILLIS).then(function(result) {
      return callback(null, result);
    })["catch"](function(error) {
      return callback(error);
    });
  };
  _proto.request = function request(operation, params, callback) {
    var headers = {
      "Content-Type": "application/x-amz-json-1.1",
      "X-Amz-Target": "AWSCognitoIdentityProviderService." + operation,
      "X-Amz-User-Agent": UserAgent_default.prototype.userAgent,
      "Cache-Control": "no-store"
    };
    var options = Object.assign({}, this.fetchOptions, {
      headers,
      method: "POST",
      mode: "cors",
      body: JSON.stringify(params)
    });
    var response;
    var responseJsonData;
    fetch(this.endpoint, options).then(function(resp) {
      response = resp;
      return resp;
    }, function(err) {
      if (err instanceof TypeError) {
        throw new Error("Network error");
      }
      throw err;
    }).then(function(resp) {
      return resp.json()["catch"](function() {
        return {};
      });
    }).then(function(data) {
      if (response.ok)
        return callback(null, data);
      responseJsonData = data;
      var code = (data.__type || data.code).split("#").pop();
      var error = new Error(data.message || data.Message || null);
      error.name = code;
      error.code = code;
      return callback(error);
    })["catch"](function(err) {
      if (response && response.headers && response.headers.get("x-amzn-errortype")) {
        try {
          var code = response.headers.get("x-amzn-errortype").split(":")[0];
          var error = new Error(response.status ? response.status.toString() : null);
          error.code = code;
          error.name = code;
          error.statusCode = response.status;
          return callback(error);
        } catch (ex) {
          return callback(err);
        }
      } else if (err instanceof Error && err.message === "Network error") {
        err.code = "NetworkError";
      }
      return callback(err);
    });
  };
  return Client3;
}();
var logger12 = {
  debug: function debug() {
  }
};
var NonRetryableError2 = function(_Error2) {
  _inheritsLoose3(NonRetryableError3, _Error2);
  function NonRetryableError3(message) {
    var _this4;
    _this4 = _Error2.call(this, message) || this;
    _this4.nonRetryable = true;
    return _this4;
  }
  return NonRetryableError3;
}(_wrapNativeSuper(Error));
var isNonRetryableError2 = function isNonRetryableError3(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry2(functionToRetry, args, delayFn, attempt) {
  if (attempt === void 0) {
    attempt = 1;
  }
  if (typeof functionToRetry !== "function") {
    throw Error("functionToRetry must be a function");
  }
  logger12.debug(functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args));
  return functionToRetry.apply(void 0, args)["catch"](function(err) {
    logger12.debug("error on " + functionToRetry.name, err);
    if (isNonRetryableError2(err)) {
      logger12.debug(functionToRetry.name + " non retryable error", err);
      throw err;
    }
    var retryIn = delayFn(attempt, args, err);
    logger12.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
    if (retryIn !== false) {
      return new Promise(function(res) {
        return setTimeout(res, retryIn);
      }).then(function() {
        return retry2(functionToRetry, args, delayFn, attempt + 1);
      });
    } else {
      throw err;
    }
  });
}
function jitteredBackoff3(maxDelayMs) {
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var MAX_DELAY_MS2 = 5 * 60 * 1e3;
function jitteredExponentialRetry2(functionToRetry, args, maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS2;
  }
  return retry2(functionToRetry, args, jitteredBackoff3(maxDelayMs));
}

// node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js
var USER_POOL_ID_MAX_LENGTH = 55;
var CognitoUserPool = function() {
  function CognitoUserPool2(data, wrapRefreshSessionCallback) {
    var _ref = data || {}, UserPoolId = _ref.UserPoolId, ClientId = _ref.ClientId, endpoint = _ref.endpoint, fetchOptions = _ref.fetchOptions, AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
    if (!UserPoolId || !ClientId) {
      throw new Error("Both UserPoolId and ClientId are required.");
    }
    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {
      throw new Error("Invalid UserPoolId format.");
    }
    var region = UserPoolId.split("_")[0];
    this.userPoolId = UserPoolId;
    this.clientId = ClientId;
    this.client = new Client2(region, endpoint, fetchOptions);
    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
    this.storage = data.Storage || new StorageHelper2().getStorage();
    if (wrapRefreshSessionCallback) {
      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
    }
  }
  var _proto = CognitoUserPool2.prototype;
  _proto.getUserPoolId = function getUserPoolId() {
    return this.userPoolId;
  };
  _proto.getUserPoolName = function getUserPoolName() {
    return this.getUserPoolId().split("_")[1];
  };
  _proto.getClientId = function getClientId() {
    return this.clientId;
  };
  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {
    var _this = this;
    var jsonReq = {
      ClientId: this.clientId,
      Username: username,
      Password: password,
      UserAttributes: userAttributes,
      ValidationData: validationData,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData(username)) {
      jsonReq.UserContextData = this.getUserContextData(username);
    }
    this.client.request("SignUp", jsonReq, function(err, data) {
      if (err) {
        return callback(err, null);
      }
      var cognitoUser = {
        Username: username,
        Pool: _this,
        Storage: _this.storage
      };
      var returnData = {
        user: new CognitoUser(cognitoUser),
        userConfirmed: data.UserConfirmed,
        userSub: data.UserSub,
        codeDeliveryDetails: data.CodeDeliveryDetails
      };
      return callback(null, returnData);
    });
  };
  _proto.getCurrentUser = function getCurrentUser() {
    var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
    var lastAuthUser = this.storage.getItem(lastUserKey);
    if (lastAuthUser) {
      var cognitoUser = {
        Username: lastAuthUser,
        Pool: this,
        Storage: this.storage
      };
      return new CognitoUser(cognitoUser);
    }
    return null;
  };
  _proto.getUserContextData = function getUserContextData(username) {
    if (typeof AmazonCognitoAdvancedSecurityData === "undefined") {
      return void 0;
    }
    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
    if (this.advancedSecurityDataCollectionFlag) {
      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);
      if (advancedSecurityData) {
        var userContextData = {
          EncodedData: advancedSecurityData
        };
        return userContextData;
      }
    }
    return {};
  };
  return CognitoUserPool2;
}();

// node_modules/amazon-cognito-identity-js/es/CookieStorage.js
var Cookies2 = __toESM(require_js_cookie());
var CookieStorage = function() {
  function CookieStorage2(data) {
    if (data === void 0) {
      data = {};
    }
    if (data.domain) {
      this.domain = data.domain;
    }
    if (data.path) {
      this.path = data.path;
    } else {
      this.path = "/";
    }
    if (Object.prototype.hasOwnProperty.call(data, "expires")) {
      this.expires = data.expires;
    } else {
      this.expires = 365;
    }
    if (Object.prototype.hasOwnProperty.call(data, "secure")) {
      this.secure = data.secure;
    } else {
      this.secure = true;
    }
    if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
      if (!["strict", "lax", "none"].includes(data.sameSite)) {
        throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
      }
      if (data.sameSite === "none" && !this.secure) {
        throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");
      }
      this.sameSite = data.sameSite;
    } else {
      this.sameSite = null;
    }
  }
  var _proto = CookieStorage2.prototype;
  _proto.setItem = function setItem(key, value) {
    var options = {
      path: this.path,
      expires: this.expires,
      domain: this.domain,
      secure: this.secure
    };
    if (this.sameSite) {
      options.sameSite = this.sameSite;
    }
    Cookies2.set(key, value, options);
    return Cookies2.get(key);
  };
  _proto.getItem = function getItem(key) {
    return Cookies2.get(key);
  };
  _proto.removeItem = function removeItem(key) {
    var options = {
      path: this.path,
      expires: this.expires,
      domain: this.domain,
      secure: this.secure
    };
    if (this.sameSite) {
      options.sameSite = this.sameSite;
    }
    return Cookies2.remove(key, options);
  };
  _proto.clear = function clear() {
    var cookies = Cookies2.get();
    var numKeys = Object.keys(cookies).length;
    for (var index = 0; index < numKeys; ++index) {
      this.removeItem(Object.keys(cookies)[index]);
    }
    return {};
  };
  return CookieStorage2;
}();

// node_modules/@aws-amplify/auth/lib-esm/Auth.js
var import_url2 = __toESM(require_url());

// node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
var import_url = __toESM(require_url());

// node_modules/@aws-amplify/auth/lib-esm/OAuth/urlOpener.js
var SELF = "_self";
var launchUri = function(url) {
  var windowProxy = window.open(url, SELF);
  if (windowProxy) {
    return Promise.resolve(windowProxy);
  } else {
    return Promise.reject();
  }
};

// node_modules/@aws-amplify/auth/lib-esm/OAuth/oauthStorage.js
var setState = function(state) {
  window.sessionStorage.setItem("oauth_state", state);
};
var getState = function() {
  var oauth_state = window.sessionStorage.getItem("oauth_state");
  window.sessionStorage.removeItem("oauth_state");
  return oauth_state;
};
var setPKCE = function(private_key) {
  window.sessionStorage.setItem("ouath_pkce_key", private_key);
};
var getPKCE = function() {
  var ouath_pkce_key = window.sessionStorage.getItem("ouath_pkce_key");
  window.sessionStorage.removeItem("ouath_pkce_key");
  return ouath_pkce_key;
};

// node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
var import_buffer4 = __toESM(require_buffer());
var import_sha256_js4 = __toESM(require_build2());
var AMPLIFY_SYMBOL3 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent = function(event, data, message) {
  Hub.dispatch("auth", { event, data, message }, "Auth", AMPLIFY_SYMBOL3);
};
var logger13 = new ConsoleLogger("OAuth");
var OAuth = (
  /** @class */
  function() {
    function OAuth2(_a) {
      var config = _a.config, cognitoClientId = _a.cognitoClientId, _b = _a.scopes, scopes = _b === void 0 ? [] : _b;
      this._urlOpener = config.urlOpener || launchUri;
      this._config = config;
      this._cognitoClientId = cognitoClientId;
      if (!this.isValidScopes(scopes))
        throw Error("scopes must be a String Array");
      this._scopes = scopes;
    }
    OAuth2.prototype.isValidScopes = function(scopes) {
      return Array.isArray(scopes) && scopes.every(function(scope) {
        return typeof scope === "string";
      });
    };
    OAuth2.prototype.oauthSignIn = function(responseType, domain, redirectSignIn, clientId, provider, customState) {
      if (responseType === void 0) {
        responseType = "code";
      }
      if (provider === void 0) {
        provider = CognitoHostedUIIdentityProvider.Cognito;
      }
      var generatedState = this._generateState(32);
      var state = customState ? generatedState + "-" + urlSafeEncode(customState) : generatedState;
      setState(state);
      var pkce_key = this._generateRandom(128);
      setPKCE(pkce_key);
      var code_challenge = this._generateChallenge(pkce_key);
      var code_challenge_method = "S256";
      var scopesString = this._scopes.join(" ");
      var queryString = Object.entries(__assign(__assign({ redirect_uri: redirectSignIn, response_type: responseType, client_id: clientId, identity_provider: provider, scope: scopesString, state }, responseType === "code" ? { code_challenge } : {}), responseType === "code" ? { code_challenge_method } : {})).map(function(_a) {
        var _b = __read(_a, 2), k = _b[0], v = _b[1];
        return encodeURIComponent(k) + "=" + encodeURIComponent(v);
      }).join("&");
      var URL2 = "https://" + domain + "/oauth2/authorize?" + queryString;
      logger13.debug("Redirecting to " + URL2);
      this._urlOpener(URL2, redirectSignIn);
    };
    OAuth2.prototype._handleCodeFlow = function(currentUrl) {
      return __awaiter(this, void 0, void 0, function() {
        var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, _a, access_token, refresh_token, id_token, error;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              code = ((0, import_url.parse)(currentUrl).query || "").split("&").map(function(pairings) {
                return pairings.split("=");
              }).reduce(function(accum, _a2) {
                var _b2;
                var _c = __read(_a2, 2), k = _c[0], v = _c[1];
                return __assign(__assign({}, accum), (_b2 = {}, _b2[k] = v, _b2));
              }, { code: void 0 }).code;
              currentUrlPathname = (0, import_url.parse)(currentUrl).pathname || "/";
              redirectSignInPathname = (0, import_url.parse)(this._config.redirectSignIn).pathname || "/";
              if (!code || currentUrlPathname !== redirectSignInPathname) {
                return [
                  2
                  /*return*/
                ];
              }
              oAuthTokenEndpoint = "https://" + this._config.domain + "/oauth2/token";
              dispatchAuthEvent("codeFlow", {}, "Retrieving tokens from " + oAuthTokenEndpoint);
              client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.clientID;
              redirect_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignIn : this._config.redirectUri;
              code_verifier = getPKCE();
              oAuthTokenBody = __assign({
                grant_type: "authorization_code",
                code,
                client_id,
                redirect_uri
              }, code_verifier ? { code_verifier } : {});
              logger13.debug("Calling token endpoint: " + oAuthTokenEndpoint + " with", oAuthTokenBody);
              body = Object.entries(oAuthTokenBody).map(function(_a2) {
                var _b2 = __read(_a2, 2), k = _b2[0], v = _b2[1];
                return encodeURIComponent(k) + "=" + encodeURIComponent(v);
              }).join("&");
              return [4, fetch(oAuthTokenEndpoint, {
                method: "POST",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded"
                },
                body
              })];
            case 1:
              return [4, _b.sent().json()];
            case 2:
              _a = _b.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;
              if (error) {
                throw new Error(error);
              }
              return [2, {
                accessToken: access_token,
                refreshToken: refresh_token,
                idToken: id_token
              }];
          }
        });
      });
    };
    OAuth2.prototype._handleImplicitFlow = function(currentUrl) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, id_token, access_token;
        return __generator(this, function(_b) {
          _a = ((0, import_url.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(pairings) {
            return pairings.split("=");
          }).reduce(function(accum, _a2) {
            var _b2;
            var _c = __read(_a2, 2), k = _c[0], v = _c[1];
            return __assign(__assign({}, accum), (_b2 = {}, _b2[k] = v, _b2));
          }, {
            id_token: void 0,
            access_token: void 0
          }), id_token = _a.id_token, access_token = _a.access_token;
          dispatchAuthEvent("implicitFlow", {}, "Got tokens from " + currentUrl);
          logger13.debug("Retrieving implicit tokens from " + currentUrl + " with");
          return [2, {
            accessToken: access_token,
            idToken: id_token,
            refreshToken: null
          }];
        });
      });
    };
    OAuth2.prototype.handleAuthResponse = function(currentUrl) {
      return __awaiter(this, void 0, void 0, function() {
        var urlParams, error, error_description, state, _a, _b, e_1;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              _c.trys.push([0, 5, , 6]);
              urlParams = currentUrl ? __assign(__assign({}, ((0, import_url.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                return entry.split("=");
              }).reduce(function(acc, _a2) {
                var _b2 = __read(_a2, 2), k = _b2[0], v = _b2[1];
                return acc[k] = v, acc;
              }, {})), ((0, import_url.parse)(currentUrl).query || "").split("&").map(function(entry) {
                return entry.split("=");
              }).reduce(function(acc, _a2) {
                var _b2 = __read(_a2, 2), k = _b2[0], v = _b2[1];
                return acc[k] = v, acc;
              }, {})) : {};
              error = urlParams.error, error_description = urlParams.error_description;
              if (error) {
                throw new Error(error_description);
              }
              state = this._validateState(urlParams);
              logger13.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
              if (!(this._config.responseType === "code"))
                return [3, 2];
              _a = [{}];
              return [4, this._handleCodeFlow(currentUrl)];
            case 1:
              return [2, __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_c.sent()])), { state }])];
            case 2:
              _b = [{}];
              return [4, this._handleImplicitFlow(currentUrl)];
            case 3:
              return [2, __assign.apply(void 0, [__assign.apply(void 0, _b.concat([_c.sent()])), { state }])];
            case 4:
              return [3, 6];
            case 5:
              e_1 = _c.sent();
              logger13.debug("Error handling auth response.", e_1);
              throw e_1;
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    OAuth2.prototype._validateState = function(urlParams) {
      if (!urlParams) {
        return;
      }
      var savedState = getState();
      var returnedState = urlParams.state;
      if (savedState && savedState !== returnedState) {
        throw new Error("Invalid state in OAuth flow");
      }
      return returnedState;
    };
    OAuth2.prototype.signOut = function() {
      return __awaiter(this, void 0, void 0, function() {
        var oAuthLogoutEndpoint, client_id, signout_uri;
        return __generator(this, function(_a) {
          oAuthLogoutEndpoint = "https://" + this._config.domain + "/logout?";
          client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.oauth.clientID;
          signout_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignOut : this._config.returnTo;
          oAuthLogoutEndpoint += Object.entries({
            client_id,
            logout_uri: encodeURIComponent(signout_uri)
          }).map(function(_a2) {
            var _b = __read(_a2, 2), k = _b[0], v = _b[1];
            return k + "=" + v;
          }).join("&");
          dispatchAuthEvent("oAuthSignOut", { oAuth: "signOut" }, "Signing out from " + oAuthLogoutEndpoint);
          logger13.debug("Signing out from " + oAuthLogoutEndpoint);
          return [2, this._urlOpener(oAuthLogoutEndpoint, signout_uri)];
        });
      });
    };
    OAuth2.prototype._generateState = function(length) {
      var result = "";
      var i = length;
      var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      for (; i > 0; --i)
        result += chars[Math.round(Math.random() * (chars.length - 1))];
      return result;
    };
    OAuth2.prototype._generateChallenge = function(code) {
      var awsCryptoHash = new import_sha256_js4.Sha256();
      awsCryptoHash.update(code);
      var resultFromAWSCrypto = awsCryptoHash.digestSync();
      var b64 = import_buffer4.Buffer.from(resultFromAWSCrypto).toString("base64");
      var base64URLFromAWSCrypto = this._base64URL(b64);
      return base64URLFromAWSCrypto;
    };
    OAuth2.prototype._base64URL = function(string) {
      return string.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    };
    OAuth2.prototype._generateRandom = function(size) {
      var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
      var buffer = new Uint8Array(size);
      if (typeof window !== "undefined" && !!window.crypto) {
        window.crypto.getRandomValues(buffer);
      } else {
        for (var i = 0; i < size; i += 1) {
          buffer[i] = Math.random() * CHARSET.length | 0;
        }
      }
      return this._bufferToString(buffer);
    };
    OAuth2.prototype._bufferToString = function(buffer) {
      var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var state = [];
      for (var i = 0; i < buffer.byteLength; i += 1) {
        var index = buffer[i] % CHARSET.length;
        state.push(CHARSET[index]);
      }
      return state.join("");
    };
    return OAuth2;
  }()
);
var OAuth_default = OAuth;

// node_modules/@aws-amplify/auth/lib-esm/urlListener.js
var urlListener_default = function(callback) {
  if (browserOrNode().isBrowser && window.location) {
    var url = window.location.href;
    callback({ url });
  } else if (browserOrNode().isNode) {
    (function() {
    });
  } else {
    throw new Error("Not supported");
  }
};

// node_modules/@aws-amplify/auth/lib-esm/common/AuthErrorStrings.js
var AuthErrorStrings;
(function(AuthErrorStrings2) {
  AuthErrorStrings2["DEFAULT_MSG"] = "Authentication Error";
  AuthErrorStrings2["EMPTY_EMAIL"] = "Email cannot be empty";
  AuthErrorStrings2["EMPTY_PHONE"] = "Phone number cannot be empty";
  AuthErrorStrings2["EMPTY_USERNAME"] = "Username cannot be empty";
  AuthErrorStrings2["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
  AuthErrorStrings2["EMPTY_PASSWORD"] = "Password cannot be empty";
  AuthErrorStrings2["EMPTY_CODE"] = "Confirmation code cannot be empty";
  AuthErrorStrings2["SIGN_UP_ERROR"] = "Error creating account";
  AuthErrorStrings2["NO_MFA"] = "No valid MFA method provided";
  AuthErrorStrings2["INVALID_MFA"] = "Invalid MFA type";
  AuthErrorStrings2["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
  AuthErrorStrings2["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
  AuthErrorStrings2["NETWORK_ERROR"] = "Network Error";
  AuthErrorStrings2["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
  AuthErrorStrings2["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
})(AuthErrorStrings || (AuthErrorStrings = {}));

// node_modules/@aws-amplify/auth/lib-esm/Errors.js
var logger14 = new ConsoleLogger("AuthError");
var AuthError = (
  /** @class */
  function(_super) {
    __extends(AuthError2, _super);
    function AuthError2(type) {
      var _this = this;
      var _a = authErrorMessages[type], message = _a.message, log = _a.log;
      _this = _super.call(this, message) || this;
      _this.constructor = AuthError2;
      Object.setPrototypeOf(_this, AuthError2.prototype);
      _this.name = "AuthError";
      _this.log = log || message;
      logger14.error(_this.log);
      return _this;
    }
    return AuthError2;
  }(Error)
);
var NoUserPoolError = (
  /** @class */
  function(_super) {
    __extends(NoUserPoolError2, _super);
    function NoUserPoolError2(type) {
      var _this = _super.call(this, type) || this;
      _this.constructor = NoUserPoolError2;
      Object.setPrototypeOf(_this, NoUserPoolError2.prototype);
      _this.name = "NoUserPoolError";
      return _this;
    }
    return NoUserPoolError2;
  }(AuthError)
);
var authErrorMessages = {
  noConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        "
  },
  missingAuthConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        "
  },
  emptyUsername: {
    message: AuthErrorStrings.EMPTY_USERNAME
  },
  // TODO: should include a list of valid sign-in types
  invalidUsername: {
    message: AuthErrorStrings.INVALID_USERNAME
  },
  emptyPassword: {
    message: AuthErrorStrings.EMPTY_PASSWORD
  },
  emptyCode: {
    message: AuthErrorStrings.EMPTY_CODE
  },
  signUpError: {
    message: AuthErrorStrings.SIGN_UP_ERROR,
    log: "The first parameter should either be non-null string or object"
  },
  noMFA: {
    message: AuthErrorStrings.NO_MFA
  },
  invalidMFA: {
    message: AuthErrorStrings.INVALID_MFA
  },
  emptyChallengeResponse: {
    message: AuthErrorStrings.EMPTY_CHALLENGE
  },
  noUserSession: {
    message: AuthErrorStrings.NO_USER_SESSION
  },
  deviceConfig: {
    message: AuthErrorStrings.DEVICE_CONFIG
  },
  networkError: {
    message: AuthErrorStrings.NETWORK_ERROR
  },
  autoSignInError: {
    message: AuthErrorStrings.AUTOSIGNIN_ERROR
  },
  default: {
    message: AuthErrorStrings.DEFAULT_MSG
  }
};

// node_modules/@aws-amplify/auth/lib-esm/Auth.js
var logger15 = new ConsoleLogger("AuthClass");
var USER_ADMIN_SCOPE = "aws.cognito.signin.user.admin";
var OAUTH_FLOW_MS_TIMEOUT = 10 * 1e3;
var AMPLIFY_SYMBOL4 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent2 = function(event, data, message) {
  Hub.dispatch("auth", { event, data, message }, "Auth", AMPLIFY_SYMBOL4);
};
var MAX_DEVICES = 60;
var MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1e3;
var AuthClass = (
  /** @class */
  function() {
    function AuthClass2(config) {
      var _this = this;
      this.userPool = null;
      this.user = null;
      this.oAuthFlowInProgress = false;
      this.autoSignInInitiated = false;
      this.inflightSessionPromise = null;
      this.inflightSessionPromiseCounter = 0;
      this.Credentials = Credentials;
      this.wrapRefreshSessionCallback = function(callback) {
        var wrapped = function(error, data) {
          if (data) {
            dispatchAuthEvent2("tokenRefresh", void 0, "New token retrieved");
          } else {
            dispatchAuthEvent2("tokenRefresh_failure", error, "Failed to retrieve new token");
          }
          return callback(error, data);
        };
        return wrapped;
      };
      this.configure(config);
      this.currentCredentials = this.currentCredentials.bind(this);
      this.currentUserCredentials = this.currentUserCredentials.bind(this);
      Hub.listen("auth", function(_a) {
        var payload = _a.payload;
        var event = payload.event;
        switch (event) {
          case "verify":
          case "signIn":
            _this._storage.setItem("amplify-signin-with-hostedUI", "false");
            break;
          case "signOut":
            _this._storage.removeItem("amplify-signin-with-hostedUI");
            break;
          case "cognitoHostedUI":
            _this._storage.setItem("amplify-signin-with-hostedUI", "true");
            break;
        }
      });
    }
    AuthClass2.prototype.getModuleName = function() {
      return "Auth";
    };
    AuthClass2.prototype.configure = function(config) {
      var _this = this;
      if (!config)
        return this._config || {};
      logger15.debug("configure Auth");
      var conf = Object.assign({}, this._config, parseAWSExports(config).Auth, config);
      this._config = conf;
      var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint, storage = _a.storage;
      if (!storage) {
        if (cookieStorage)
          this._storage = new CookieStorage(cookieStorage);
        else {
          this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();
        }
      } else {
        if (!this._isValidAuthStorage(storage)) {
          logger15.error("The storage in the Auth config is not valid!");
          throw new Error("Empty storage object");
        }
        this._storage = storage;
      }
      this._storageSync = Promise.resolve();
      if (typeof this._storage["sync"] === "function") {
        this._storageSync = this._storage["sync"]();
      }
      if (userPoolId) {
        var userPoolData = {
          UserPoolId: userPoolId,
          ClientId: userPoolWebClientId,
          endpoint
        };
        userPoolData.Storage = this._storage;
        this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);
      }
      this.Credentials.configure({
        mandatorySignIn,
        region,
        userPoolId,
        identityPoolId,
        refreshHandlers,
        storage: this._storage,
        identityPoolRegion
      });
      var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : void 0;
      if (cognitoHostedUIConfig) {
        var cognitoAuthParams = Object.assign({
          cognitoClientId: userPoolWebClientId,
          UserPoolId: userPoolId,
          domain: cognitoHostedUIConfig["domain"],
          scopes: cognitoHostedUIConfig["scope"],
          redirectSignIn: cognitoHostedUIConfig["redirectSignIn"],
          redirectSignOut: cognitoHostedUIConfig["redirectSignOut"],
          responseType: cognitoHostedUIConfig["responseType"],
          Storage: this._storage,
          urlOpener: cognitoHostedUIConfig["urlOpener"],
          clientMetadata
        }, cognitoHostedUIConfig["options"]);
        this._oAuthHandler = new OAuth_default({
          scopes: cognitoAuthParams.scopes,
          config: cognitoAuthParams,
          cognitoClientId: cognitoAuthParams.cognitoClientId
        });
        var usedResponseUrls_1 = {};
        urlListener_default(function(_a2) {
          var url = _a2.url;
          if (usedResponseUrls_1[url]) {
            return;
          }
          usedResponseUrls_1[url] = true;
          _this._handleAuthResponse(url);
        });
      }
      dispatchAuthEvent2("configured", null, "The Auth category has been configured successfully");
      if (!this.autoSignInInitiated && typeof this._storage["getItem"] === "function") {
        var pollingInitiated = this.isTrueStorageValue("amplify-polling-started");
        if (pollingInitiated) {
          dispatchAuthEvent2("autoSignIn_failure", null, AuthErrorTypes.AutoSignInError);
          this._storage.removeItem("amplify-auto-sign-in");
        }
        this._storage.removeItem("amplify-polling-started");
      }
      return this._config;
    };
    AuthClass2.prototype.signUp = function(params) {
      var _this = this;
      var restOfAttrs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        restOfAttrs[_i - 1] = arguments[_i];
      }
      var _a, _b, _c;
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      var username = null;
      var password = null;
      var attributes = [];
      var validationData = null;
      var clientMetadata;
      var autoSignIn = { enabled: false };
      var autoSignInValidationData = {};
      var autoSignInClientMetaData = {};
      if (params && typeof params === "string") {
        username = params;
        password = restOfAttrs ? restOfAttrs[0] : null;
        var email = restOfAttrs ? restOfAttrs[1] : null;
        var phone_number = restOfAttrs ? restOfAttrs[2] : null;
        if (email)
          attributes.push(new CognitoUserAttribute({ Name: "email", Value: email }));
        if (phone_number)
          attributes.push(new CognitoUserAttribute({
            Name: "phone_number",
            Value: phone_number
          }));
      } else if (params && typeof params === "object") {
        username = params["username"];
        password = params["password"];
        if (params && params.clientMetadata) {
          clientMetadata = params.clientMetadata;
        } else if (this._config.clientMetadata) {
          clientMetadata = this._config.clientMetadata;
        }
        var attrs_1 = params["attributes"];
        if (attrs_1) {
          Object.keys(attrs_1).map(function(key) {
            attributes.push(new CognitoUserAttribute({ Name: key, Value: attrs_1[key] }));
          });
        }
        var validationDataObject_1 = params["validationData"];
        if (validationDataObject_1) {
          validationData = [];
          Object.keys(validationDataObject_1).map(function(key) {
            validationData.push(new CognitoUserAttribute({
              Name: key,
              Value: validationDataObject_1[key]
            }));
          });
        }
        autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : { enabled: false };
        if (autoSignIn.enabled) {
          this._storage.setItem("amplify-auto-sign-in", "true");
          autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};
          autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};
        }
      } else {
        return this.rejectAuthError(AuthErrorTypes.SignUpError);
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      if (!password) {
        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
      }
      logger15.debug("signUp attrs:", attributes);
      logger15.debug("signUp validation data:", validationData);
      return new Promise(function(resolve, reject) {
        _this.userPool.signUp(username, password, attributes, validationData, function(err, data) {
          if (err) {
            dispatchAuthEvent2("signUp_failure", err, username + " failed to signup");
            reject(err);
          } else {
            dispatchAuthEvent2("signUp", data, username + " has signed up successfully");
            if (autoSignIn.enabled) {
              _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);
            }
            resolve(data);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.handleAutoSignIn = function(username, password, validationData, clientMetadata, data) {
      this.autoSignInInitiated = true;
      var authDetails = new AuthenticationDetails({
        Username: username,
        Password: password,
        ValidationData: validationData,
        ClientMetadata: clientMetadata
      });
      if (data.userConfirmed) {
        this.signInAfterUserConfirmed(authDetails);
      } else if (this._config.signUpVerificationMethod === "link") {
        this.handleLinkAutoSignIn(authDetails);
      } else {
        this.handleCodeAutoSignIn(authDetails);
      }
    };
    AuthClass2.prototype.handleCodeAutoSignIn = function(authDetails) {
      var _this = this;
      var listenEvent = function(_a) {
        var payload = _a.payload;
        if (payload.event === "confirmSignUp") {
          _this.signInAfterUserConfirmed(authDetails, listenEvent);
        }
      };
      Hub.listen("auth", listenEvent);
    };
    AuthClass2.prototype.handleLinkAutoSignIn = function(authDetails) {
      var _this = this;
      this._storage.setItem("amplify-polling-started", "true");
      var start = Date.now();
      var autoSignInPollingIntervalId = setInterval(function() {
        if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {
          clearInterval(autoSignInPollingIntervalId);
          dispatchAuthEvent2("autoSignIn_failure", null, "Please confirm your account and use your credentials to sign in.");
          _this._storage.removeItem("amplify-auto-sign-in");
        } else {
          _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);
        }
      }, 5e3);
    };
    AuthClass2.prototype.signInAfterUserConfirmed = function(authDetails, listenEvent, autoSignInPollingIntervalId) {
      return __awaiter(this, void 0, void 0, function() {
        var user, error_1;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              user = this.createCognitoUser(authDetails.getUsername());
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, user.authenticateUser(authDetails, this.authCallbacks(user, function(value) {
                dispatchAuthEvent2("autoSignIn", value, authDetails.getUsername() + " has signed in successfully");
                if (listenEvent) {
                  Hub.remove("auth", listenEvent);
                }
                if (autoSignInPollingIntervalId) {
                  clearInterval(autoSignInPollingIntervalId);
                  _this._storage.removeItem("amplify-polling-started");
                }
                _this._storage.removeItem("amplify-auto-sign-in");
              }, function(error) {
                logger15.error(error);
                _this._storage.removeItem("amplify-auto-sign-in");
              }))];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              error_1 = _a.sent();
              logger15.error(error_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.confirmSignUp = function(username, code, options) {
      var _this = this;
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      var user = this.createCognitoUser(username);
      var forceAliasCreation = options && typeof options.forceAliasCreation === "boolean" ? options.forceAliasCreation : true;
      var clientMetadata;
      if (options && options.clientMetadata) {
        clientMetadata = options.clientMetadata;
      } else if (this._config.clientMetadata) {
        clientMetadata = this._config.clientMetadata;
      }
      return new Promise(function(resolve, reject) {
        user.confirmRegistration(code, forceAliasCreation, function(err, data) {
          if (err) {
            reject(err);
          } else {
            dispatchAuthEvent2("confirmSignUp", data, username + " has been confirmed successfully");
            var autoSignIn = _this.isTrueStorageValue("amplify-auto-sign-in");
            if (autoSignIn && !_this.autoSignInInitiated) {
              dispatchAuthEvent2("autoSignIn_failure", null, AuthErrorTypes.AutoSignInError);
              _this._storage.removeItem("amplify-auto-sign-in");
            }
            resolve(data);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.isTrueStorageValue = function(value) {
      var item = this._storage.getItem(value);
      return item ? item === "true" : false;
    };
    AuthClass2.prototype.resendSignUp = function(username, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      var user = this.createCognitoUser(username);
      return new Promise(function(resolve, reject) {
        user.resendConfirmationCode(function(err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.signIn = function(usernameOrSignInOpts, pw, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      var username = null;
      var password = null;
      var validationData = {};
      if (typeof usernameOrSignInOpts === "string") {
        username = usernameOrSignInOpts;
        password = pw;
      } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {
        if (typeof pw !== "undefined") {
          logger15.warn("The password should be defined under the first parameter object!");
        }
        username = usernameOrSignInOpts.username;
        password = usernameOrSignInOpts.password;
        validationData = usernameOrSignInOpts.validationData;
      } else {
        return this.rejectAuthError(AuthErrorTypes.InvalidUsername);
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      var authDetails = new AuthenticationDetails({
        Username: username,
        Password: password,
        ValidationData: validationData,
        ClientMetadata: clientMetadata
      });
      if (password) {
        return this.signInWithPassword(authDetails);
      } else {
        return this.signInWithoutPassword(authDetails);
      }
    };
    AuthClass2.prototype.authCallbacks = function(user, resolve, reject) {
      var _this = this;
      var that = this;
      return {
        onSuccess: function(session) {
          return __awaiter(_this, void 0, void 0, function() {
            var cred, e_1, currentUser, e_2;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  logger15.debug(session);
                  delete user["challengeName"];
                  delete user["challengeParam"];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 4, 5, 9]);
                  return [4, this.Credentials.clear()];
                case 2:
                  _a.sent();
                  return [4, this.Credentials.set(session, "session")];
                case 3:
                  cred = _a.sent();
                  logger15.debug("succeed to get cognito credentials", cred);
                  return [3, 9];
                case 4:
                  e_1 = _a.sent();
                  logger15.debug("cannot get cognito credentials", e_1);
                  return [3, 9];
                case 5:
                  _a.trys.push([5, 7, , 8]);
                  return [4, this.currentUserPoolUser()];
                case 6:
                  currentUser = _a.sent();
                  that.user = currentUser;
                  dispatchAuthEvent2("signIn", currentUser, "A user " + user.getUsername() + " has been signed in");
                  resolve(currentUser);
                  return [3, 8];
                case 7:
                  e_2 = _a.sent();
                  logger15.error("Failed to get the signed in user", e_2);
                  reject(e_2);
                  return [3, 8];
                case 8:
                  return [
                    7
                    /*endfinally*/
                  ];
                case 9:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        },
        onFailure: function(err) {
          logger15.debug("signIn failure", err);
          dispatchAuthEvent2("signIn_failure", err, user.getUsername() + " failed to signin");
          reject(err);
        },
        customChallenge: function(challengeParam) {
          logger15.debug("signIn custom challenge answer required");
          user["challengeName"] = "CUSTOM_CHALLENGE";
          user["challengeParam"] = challengeParam;
          resolve(user);
        },
        mfaRequired: function(challengeName, challengeParam) {
          logger15.debug("signIn MFA required");
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve(user);
        },
        mfaSetup: function(challengeName, challengeParam) {
          logger15.debug("signIn mfa setup", challengeName);
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve(user);
        },
        newPasswordRequired: function(userAttributes, requiredAttributes) {
          logger15.debug("signIn new password");
          user["challengeName"] = "NEW_PASSWORD_REQUIRED";
          user["challengeParam"] = {
            userAttributes,
            requiredAttributes
          };
          resolve(user);
        },
        totpRequired: function(challengeName, challengeParam) {
          logger15.debug("signIn totpRequired");
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve(user);
        },
        selectMFAType: function(challengeName, challengeParam) {
          logger15.debug("signIn selectMFAType", challengeName);
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve(user);
        }
      };
    };
    AuthClass2.prototype.signInWithPassword = function(authDetails) {
      var _this = this;
      if (this.pendingSignIn) {
        throw new Error("Pending sign-in attempt already in progress");
      }
      var user = this.createCognitoUser(authDetails.getUsername());
      this.pendingSignIn = new Promise(function(resolve, reject) {
        user.authenticateUser(authDetails, _this.authCallbacks(user, function(value) {
          _this.pendingSignIn = null;
          resolve(value);
        }, function(error) {
          _this.pendingSignIn = null;
          reject(error);
        }));
      });
      return this.pendingSignIn;
    };
    AuthClass2.prototype.signInWithoutPassword = function(authDetails) {
      var _this = this;
      var user = this.createCognitoUser(authDetails.getUsername());
      user.setAuthenticationFlowType("CUSTOM_AUTH");
      return new Promise(function(resolve, reject) {
        user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));
      });
    };
    AuthClass2.prototype.getMFAOptions = function(user) {
      return new Promise(function(res, rej) {
        user.getMFAOptions(function(err, mfaOptions) {
          if (err) {
            logger15.debug("get MFA Options failed", err);
            rej(err);
            return;
          }
          logger15.debug("get MFA options success", mfaOptions);
          res(mfaOptions);
          return;
        });
      });
    };
    AuthClass2.prototype.getPreferredMFA = function(user, params) {
      var _this = this;
      var that = this;
      return new Promise(function(res, rej) {
        var clientMetadata = _this._config.clientMetadata;
        var bypassCache = params ? params.bypassCache : false;
        user.getUserData(function(err, data) {
          return __awaiter(_this, void 0, void 0, function() {
            var cleanUpError_1, mfaType;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!err)
                    return [3, 5];
                  logger15.debug("getting preferred mfa failed", err);
                  if (!this.isSessionInvalid(err))
                    return [3, 4];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this.cleanUpInvalidSession(user)];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  cleanUpError_1 = _a.sent();
                  rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_1.message));
                  return [
                    2
                    /*return*/
                  ];
                case 4:
                  rej(err);
                  return [
                    2
                    /*return*/
                  ];
                case 5:
                  mfaType = that._getMfaTypeFromUserData(data);
                  if (!mfaType) {
                    rej("invalid MFA Type");
                    return [
                      2
                      /*return*/
                    ];
                  } else {
                    res(mfaType);
                    return [
                      2
                      /*return*/
                    ];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, { bypassCache, clientMetadata });
      });
    };
    AuthClass2.prototype._getMfaTypeFromUserData = function(data) {
      var ret = null;
      var preferredMFA = data.PreferredMfaSetting;
      if (preferredMFA) {
        ret = preferredMFA;
      } else {
        var mfaList = data.UserMFASettingList;
        if (!mfaList) {
          var MFAOptions = data.MFAOptions;
          if (MFAOptions) {
            ret = "SMS_MFA";
          } else {
            ret = "NOMFA";
          }
        } else if (mfaList.length === 0) {
          ret = "NOMFA";
        } else {
          logger15.debug("invalid case for getPreferredMFA", data);
        }
      }
      return ret;
    };
    AuthClass2.prototype._getUserData = function(user, params) {
      var _this = this;
      return new Promise(function(res, rej) {
        user.getUserData(function(err, data) {
          return __awaiter(_this, void 0, void 0, function() {
            var cleanUpError_2;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!err)
                    return [3, 5];
                  logger15.debug("getting user data failed", err);
                  if (!this.isSessionInvalid(err))
                    return [3, 4];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this.cleanUpInvalidSession(user)];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  cleanUpError_2 = _a.sent();
                  rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_2.message));
                  return [
                    2
                    /*return*/
                  ];
                case 4:
                  rej(err);
                  return [
                    2
                    /*return*/
                  ];
                case 5:
                  res(data);
                  _a.label = 6;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, params);
      });
    };
    AuthClass2.prototype.setPreferredMFA = function(user, mfaMethod) {
      return __awaiter(this, void 0, void 0, function() {
        var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientMetadata = this._config.clientMetadata;
              return [4, this._getUserData(user, {
                bypassCache: true,
                clientMetadata
              })];
            case 1:
              userData = _b.sent();
              smsMfaSettings = null;
              totpMfaSettings = null;
              _a = mfaMethod;
              switch (_a) {
                case "TOTP":
                  return [3, 2];
                case "SOFTWARE_TOKEN_MFA":
                  return [3, 2];
                case "SMS":
                  return [3, 3];
                case "SMS_MFA":
                  return [3, 3];
                case "NOMFA":
                  return [3, 4];
              }
              return [3, 6];
            case 2:
              totpMfaSettings = {
                PreferredMfa: true,
                Enabled: true
              };
              return [3, 7];
            case 3:
              smsMfaSettings = {
                PreferredMfa: true,
                Enabled: true
              };
              return [3, 7];
            case 4:
              mfaList = userData["UserMFASettingList"];
              return [4, this._getMfaTypeFromUserData(userData)];
            case 5:
              currentMFAType = _b.sent();
              if (currentMFAType === "NOMFA") {
                return [2, Promise.resolve("No change for mfa type")];
              } else if (currentMFAType === "SMS_MFA") {
                smsMfaSettings = {
                  PreferredMfa: false,
                  Enabled: false
                };
              } else if (currentMFAType === "SOFTWARE_TOKEN_MFA") {
                totpMfaSettings = {
                  PreferredMfa: false,
                  Enabled: false
                };
              } else {
                return [2, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];
              }
              if (mfaList && mfaList.length !== 0) {
                mfaList.forEach(function(mfaType) {
                  if (mfaType === "SMS_MFA") {
                    smsMfaSettings = {
                      PreferredMfa: false,
                      Enabled: false
                    };
                  } else if (mfaType === "SOFTWARE_TOKEN_MFA") {
                    totpMfaSettings = {
                      PreferredMfa: false,
                      Enabled: false
                    };
                  }
                });
              }
              return [3, 7];
            case 6:
              logger15.debug("no validmfa method provided");
              return [2, this.rejectAuthError(AuthErrorTypes.NoMFA)];
            case 7:
              that = this;
              return [2, new Promise(function(res, rej) {
                user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function(err, result) {
                  if (err) {
                    logger15.debug("Set user mfa preference error", err);
                    return rej(err);
                  }
                  logger15.debug("Set user mfa success", result);
                  logger15.debug("Caching the latest user data into local");
                  user.getUserData(function(err2, data) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var cleanUpError_3;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            if (!err2)
                              return [3, 5];
                            logger15.debug("getting user data failed", err2);
                            if (!this.isSessionInvalid(err2))
                              return [3, 4];
                            _a2.label = 1;
                          case 1:
                            _a2.trys.push([1, 3, , 4]);
                            return [4, this.cleanUpInvalidSession(user)];
                          case 2:
                            _a2.sent();
                            return [3, 4];
                          case 3:
                            cleanUpError_3 = _a2.sent();
                            rej(new Error("Session is invalid due to: " + err2.message + " and failed to clean up invalid session: " + cleanUpError_3.message));
                            return [
                              2
                              /*return*/
                            ];
                          case 4:
                            return [2, rej(err2)];
                          case 5:
                            return [2, res(result)];
                        }
                      });
                    });
                  }, {
                    bypassCache: true,
                    clientMetadata
                  });
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.disableSMS = function(user) {
      return new Promise(function(res, rej) {
        user.disableMFA(function(err, data) {
          if (err) {
            logger15.debug("disable mfa failed", err);
            rej(err);
            return;
          }
          logger15.debug("disable mfa succeed", data);
          res(data);
          return;
        });
      });
    };
    AuthClass2.prototype.enableSMS = function(user) {
      return new Promise(function(res, rej) {
        user.enableMFA(function(err, data) {
          if (err) {
            logger15.debug("enable mfa failed", err);
            rej(err);
            return;
          }
          logger15.debug("enable mfa succeed", data);
          res(data);
          return;
        });
      });
    };
    AuthClass2.prototype.setupTOTP = function(user) {
      return new Promise(function(res, rej) {
        user.associateSoftwareToken({
          onFailure: function(err) {
            logger15.debug("associateSoftwareToken failed", err);
            rej(err);
            return;
          },
          associateSecretCode: function(secretCode) {
            logger15.debug("associateSoftwareToken success", secretCode);
            res(secretCode);
            return;
          }
        });
      });
    };
    AuthClass2.prototype.verifyTotpToken = function(user, challengeAnswer) {
      logger15.debug("verification totp token", user, challengeAnswer);
      var signInUserSession;
      if (user && typeof user.getSignInUserSession === "function") {
        signInUserSession = user.getSignInUserSession();
      }
      var isLoggedIn = signInUserSession === null || signInUserSession === void 0 ? void 0 : signInUserSession.isValid();
      return new Promise(function(res, rej) {
        user.verifySoftwareToken(challengeAnswer, "My TOTP device", {
          onFailure: function(err) {
            logger15.debug("verifyTotpToken failed", err);
            rej(err);
            return;
          },
          onSuccess: function(data) {
            if (!isLoggedIn) {
              dispatchAuthEvent2("signIn", user, "A user " + user.getUsername() + " has been signed in");
            }
            dispatchAuthEvent2("verify", user, "A user " + user.getUsername() + " has been verified");
            logger15.debug("verifyTotpToken success", data);
            res(data);
            return;
          }
        });
      });
    };
    AuthClass2.prototype.confirmSignIn = function(user, code, mfaType, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      var that = this;
      return new Promise(function(resolve, reject) {
        user.sendMFACode(code, {
          onSuccess: function(session) {
            return __awaiter(_this, void 0, void 0, function() {
              var cred, e_3, currentUser, e_4;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    logger15.debug(session);
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 4, 5, 10]);
                    return [4, this.Credentials.clear()];
                  case 2:
                    _a.sent();
                    return [4, this.Credentials.set(session, "session")];
                  case 3:
                    cred = _a.sent();
                    logger15.debug("succeed to get cognito credentials", cred);
                    return [3, 10];
                  case 4:
                    e_3 = _a.sent();
                    logger15.debug("cannot get cognito credentials", e_3);
                    return [3, 10];
                  case 5:
                    that.user = user;
                    _a.label = 6;
                  case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4, this.currentUserPoolUser()];
                  case 7:
                    currentUser = _a.sent();
                    user.attributes = currentUser.attributes;
                    return [3, 9];
                  case 8:
                    e_4 = _a.sent();
                    logger15.debug("cannot get updated Cognito User", e_4);
                    return [3, 9];
                  case 9:
                    dispatchAuthEvent2("signIn", user, "A user " + user.getUsername() + " has been signed in");
                    resolve(user);
                    return [
                      7
                      /*endfinally*/
                    ];
                  case 10:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          },
          onFailure: function(err) {
            logger15.debug("confirm signIn failure", err);
            reject(err);
          }
        }, mfaType, clientMetadata);
      });
    };
    AuthClass2.prototype.completeNewPassword = function(user, password, requiredAttributes, clientMetadata) {
      var _this = this;
      if (requiredAttributes === void 0) {
        requiredAttributes = {};
      }
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!password) {
        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
      }
      var that = this;
      return new Promise(function(resolve, reject) {
        user.completeNewPasswordChallenge(password, requiredAttributes, {
          onSuccess: function(session) {
            return __awaiter(_this, void 0, void 0, function() {
              var cred, e_5;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    logger15.debug(session);
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 4, 5, 6]);
                    return [4, this.Credentials.clear()];
                  case 2:
                    _a.sent();
                    return [4, this.Credentials.set(session, "session")];
                  case 3:
                    cred = _a.sent();
                    logger15.debug("succeed to get cognito credentials", cred);
                    return [3, 6];
                  case 4:
                    e_5 = _a.sent();
                    logger15.debug("cannot get cognito credentials", e_5);
                    return [3, 6];
                  case 5:
                    that.user = user;
                    dispatchAuthEvent2("signIn", user, "A user " + user.getUsername() + " has been signed in");
                    resolve(user);
                    return [
                      7
                      /*endfinally*/
                    ];
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          },
          onFailure: function(err) {
            logger15.debug("completeNewPassword failure", err);
            dispatchAuthEvent2("completeNewPassword_failure", err, _this.user + " failed to complete the new password flow");
            reject(err);
          },
          mfaRequired: function(challengeName, challengeParam) {
            logger15.debug("signIn MFA required");
            user["challengeName"] = challengeName;
            user["challengeParam"] = challengeParam;
            resolve(user);
          },
          mfaSetup: function(challengeName, challengeParam) {
            logger15.debug("signIn mfa setup", challengeName);
            user["challengeName"] = challengeName;
            user["challengeParam"] = challengeParam;
            resolve(user);
          },
          totpRequired: function(challengeName, challengeParam) {
            logger15.debug("signIn mfa setup", challengeName);
            user["challengeName"] = challengeName;
            user["challengeParam"] = challengeParam;
            resolve(user);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.sendCustomChallengeAnswer = function(user, challengeResponses, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!challengeResponses) {
        return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);
      }
      var that = this;
      return new Promise(function(resolve, reject) {
        user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);
      });
    };
    AuthClass2.prototype.deleteUserAttributes = function(user, attributeNames) {
      var that = this;
      return new Promise(function(resolve, reject) {
        that.userSession(user).then(function(session) {
          user.deleteAttributes(attributeNames, function(err, result) {
            if (err) {
              return reject(err);
            } else {
              return resolve(result);
            }
          });
        });
      });
    };
    AuthClass2.prototype.deleteUser = function() {
      return __awaiter(this, void 0, void 0, function() {
        var e_6, isSignedInHostedUI;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this._storageSync];
            case 1:
              _a.sent();
              return [3, 3];
            case 2:
              e_6 = _a.sent();
              logger15.debug("Failed to sync cache info into memory", e_6);
              throw new Error(e_6);
            case 3:
              isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
              return [2, new Promise(function(res, rej) {
                return __awaiter(_this, void 0, void 0, function() {
                  var user_1;
                  var _this2 = this;
                  return __generator(this, function(_a2) {
                    if (this.userPool) {
                      user_1 = this.userPool.getCurrentUser();
                      if (!user_1) {
                        logger15.debug("Failed to get user from user pool");
                        return [2, rej(new Error("No current user."))];
                      } else {
                        user_1.getSession(function(err, session) {
                          return __awaiter(_this2, void 0, void 0, function() {
                            var cleanUpError_4;
                            var _this3 = this;
                            return __generator(this, function(_a3) {
                              switch (_a3.label) {
                                case 0:
                                  if (!err)
                                    return [3, 5];
                                  logger15.debug("Failed to get the user session", err);
                                  if (!this.isSessionInvalid(err))
                                    return [3, 4];
                                  _a3.label = 1;
                                case 1:
                                  _a3.trys.push([1, 3, , 4]);
                                  return [4, this.cleanUpInvalidSession(user_1)];
                                case 2:
                                  _a3.sent();
                                  return [3, 4];
                                case 3:
                                  cleanUpError_4 = _a3.sent();
                                  rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_4.message));
                                  return [
                                    2
                                    /*return*/
                                  ];
                                case 4:
                                  return [2, rej(err)];
                                case 5:
                                  user_1.deleteUser(function(err2, result) {
                                    if (err2) {
                                      rej(err2);
                                    } else {
                                      dispatchAuthEvent2("userDeleted", result, "The authenticated user has been deleted.");
                                      user_1.signOut();
                                      _this3.user = null;
                                      try {
                                        _this3.cleanCachedItems();
                                      } catch (e) {
                                        logger15.debug("failed to clear cached items");
                                      }
                                      if (isSignedInHostedUI) {
                                        _this3.oAuthSignOutRedirect(res, rej);
                                      } else {
                                        dispatchAuthEvent2("signOut", _this3.user, "A user has been signed out");
                                        res(result);
                                      }
                                    }
                                  });
                                  _a3.label = 6;
                                case 6:
                                  return [
                                    2
                                    /*return*/
                                  ];
                              }
                            });
                          });
                        });
                      }
                    } else {
                      logger15.debug("no Congito User pool");
                      rej(new Error("Cognito User pool does not exist"));
                    }
                    return [
                      2
                      /*return*/
                    ];
                  });
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.updateUserAttributes = function(user, attributes, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      var attributeList = [];
      var that = this;
      return new Promise(function(resolve, reject) {
        that.userSession(user).then(function(session) {
          for (var key in attributes) {
            if (key !== "sub" && key.indexOf("_verified") < 0) {
              var attr = {
                Name: key,
                Value: attributes[key]
              };
              attributeList.push(attr);
            }
          }
          user.updateAttributes(attributeList, function(err, result, details) {
            if (err) {
              dispatchAuthEvent2("updateUserAttributes_failure", err, "Failed to update attributes");
              return reject(err);
            } else {
              var attrs = _this.createUpdateAttributesResultList(attributes, details === null || details === void 0 ? void 0 : details.CodeDeliveryDetailsList);
              dispatchAuthEvent2("updateUserAttributes", attrs, "Attributes successfully updated");
              return resolve(result);
            }
          }, clientMetadata);
        });
      });
    };
    AuthClass2.prototype.createUpdateAttributesResultList = function(attributes, codeDeliveryDetailsList) {
      var attrs = {};
      Object.keys(attributes).forEach(function(key) {
        attrs[key] = {
          isUpdated: true
        };
        var codeDeliveryDetails = codeDeliveryDetailsList === null || codeDeliveryDetailsList === void 0 ? void 0 : codeDeliveryDetailsList.find(function(value) {
          return value.AttributeName === key;
        });
        if (codeDeliveryDetails) {
          attrs[key].isUpdated = false;
          attrs[key].codeDeliveryDetails = codeDeliveryDetails;
        }
      });
      return attrs;
    };
    AuthClass2.prototype.userAttributes = function(user) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        _this.userSession(user).then(function(session) {
          user.getUserAttributes(function(err, attributes) {
            if (err) {
              reject(err);
            } else {
              resolve(attributes);
            }
          });
        });
      });
    };
    AuthClass2.prototype.verifiedContact = function(user) {
      var that = this;
      return this.userAttributes(user).then(function(attributes) {
        var attrs = that.attributesToObject(attributes);
        var unverified = {};
        var verified = {};
        if (attrs["email"]) {
          if (attrs["email_verified"]) {
            verified["email"] = attrs["email"];
          } else {
            unverified["email"] = attrs["email"];
          }
        }
        if (attrs["phone_number"]) {
          if (attrs["phone_number_verified"]) {
            verified["phone_number"] = attrs["phone_number"];
          } else {
            unverified["phone_number"] = attrs["phone_number"];
          }
        }
        return {
          verified,
          unverified
        };
      });
    };
    AuthClass2.prototype.isErrorWithMessage = function(err) {
      return typeof err === "object" && Object.prototype.hasOwnProperty.call(err, "message");
    };
    AuthClass2.prototype.isTokenRevokedError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "Access Token has been revoked";
    };
    AuthClass2.prototype.isRefreshTokenRevokedError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "Refresh Token has been revoked";
    };
    AuthClass2.prototype.isUserDisabledError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "User is disabled.";
    };
    AuthClass2.prototype.isUserDoesNotExistError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "User does not exist.";
    };
    AuthClass2.prototype.isRefreshTokenExpiredError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "Refresh Token has expired";
    };
    AuthClass2.prototype.isSignedInHostedUI = function() {
      return this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
    };
    AuthClass2.prototype.isSessionInvalid = function(err) {
      return this.isUserDisabledError(err) || this.isUserDoesNotExistError(err) || this.isTokenRevokedError(err) || this.isRefreshTokenRevokedError(err) || this.isRefreshTokenExpiredError(err);
    };
    AuthClass2.prototype.cleanUpInvalidSession = function(user) {
      return __awaiter(this, void 0, void 0, function() {
        var e_7;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              user.signOut();
              this.user = null;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.cleanCachedItems()];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_7 = _a.sent();
              logger15.debug("failed to clear cached items");
              return [3, 4];
            case 4:
              if (this.isSignedInHostedUI()) {
                return [2, new Promise(function(res, rej) {
                  _this.oAuthSignOutRedirect(res, rej);
                })];
              } else {
                dispatchAuthEvent2("signOut", this.user, "A user has been signed out");
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.currentUserPoolUser = function(params) {
      var _this = this;
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      return new Promise(function(res, rej) {
        _this._storageSync.then(function() {
          return __awaiter(_this, void 0, void 0, function() {
            var user, session, bypassCache, clientMetadata, _a, scope, err_1;
            var _this2 = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!this.isOAuthInProgress())
                    return [3, 2];
                  logger15.debug("OAuth signIn in progress, waiting for resolution...");
                  return [4, new Promise(function(res2) {
                    var timeoutId = setTimeout(function() {
                      logger15.debug("OAuth signIn in progress timeout");
                      Hub.remove("auth", hostedUISignCallback);
                      res2();
                    }, OAUTH_FLOW_MS_TIMEOUT);
                    Hub.listen("auth", hostedUISignCallback);
                    function hostedUISignCallback(_a2) {
                      var payload = _a2.payload;
                      var event = payload.event;
                      if (event === "cognitoHostedUI" || event === "cognitoHostedUI_failure") {
                        logger15.debug("OAuth signIn resolved: " + event);
                        clearTimeout(timeoutId);
                        Hub.remove("auth", hostedUISignCallback);
                        res2();
                      }
                    }
                  })];
                case 1:
                  _b.sent();
                  _b.label = 2;
                case 2:
                  user = this.userPool.getCurrentUser();
                  if (!user) {
                    logger15.debug("Failed to get user from user pool");
                    rej("No current user");
                    return [
                      2
                      /*return*/
                    ];
                  }
                  _b.label = 3;
                case 3:
                  _b.trys.push([3, 7, , 8]);
                  return [4, this._userSession(user)];
                case 4:
                  session = _b.sent();
                  bypassCache = params ? params.bypassCache : false;
                  if (!bypassCache)
                    return [3, 6];
                  return [4, this.Credentials.clear()];
                case 5:
                  _b.sent();
                  _b.label = 6;
                case 6:
                  clientMetadata = this._config.clientMetadata;
                  _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? "" : _a;
                  if (scope.split(" ").includes(USER_ADMIN_SCOPE)) {
                    user.getUserData(function(err, data) {
                      return __awaiter(_this2, void 0, void 0, function() {
                        var cleanUpError_5, preferredMFA, attributeList, i, attribute, userAttribute, attributes;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              if (!err)
                                return [3, 7];
                              logger15.debug("getting user data failed", err);
                              if (!this.isSessionInvalid(err))
                                return [3, 5];
                              _a2.label = 1;
                            case 1:
                              _a2.trys.push([1, 3, , 4]);
                              return [4, this.cleanUpInvalidSession(user)];
                            case 2:
                              _a2.sent();
                              return [3, 4];
                            case 3:
                              cleanUpError_5 = _a2.sent();
                              rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_5.message));
                              return [
                                2
                                /*return*/
                              ];
                            case 4:
                              rej(err);
                              return [3, 6];
                            case 5:
                              res(user);
                              _a2.label = 6;
                            case 6:
                              return [
                                2
                                /*return*/
                              ];
                            case 7:
                              preferredMFA = data.PreferredMfaSetting || "NOMFA";
                              attributeList = [];
                              for (i = 0; i < data.UserAttributes.length; i++) {
                                attribute = {
                                  Name: data.UserAttributes[i].Name,
                                  Value: data.UserAttributes[i].Value
                                };
                                userAttribute = new CognitoUserAttribute(attribute);
                                attributeList.push(userAttribute);
                              }
                              attributes = this.attributesToObject(attributeList);
                              Object.assign(user, { attributes, preferredMFA });
                              return [2, res(user)];
                          }
                        });
                      });
                    }, { bypassCache, clientMetadata });
                  } else {
                    logger15.debug("Unable to get the user data because the " + USER_ADMIN_SCOPE + " is not in the scopes of the access token");
                    return [2, res(user)];
                  }
                  return [3, 8];
                case 7:
                  err_1 = _b.sent();
                  rej(err_1);
                  return [3, 8];
                case 8:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }).catch(function(e) {
          logger15.debug("Failed to sync cache info into memory", e);
          return rej(e);
        });
      });
    };
    AuthClass2.prototype.isOAuthInProgress = function() {
      return this.oAuthFlowInProgress;
    };
    AuthClass2.prototype.currentAuthenticatedUser = function(params) {
      return __awaiter(this, void 0, void 0, function() {
        var federatedUser, e_8, federatedInfo, user, e_9;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger15.debug("getting current authenticated user");
              federatedUser = null;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_8 = _a.sent();
              logger15.debug("Failed to sync cache info into memory", e_8);
              throw e_8;
            case 4:
              try {
                federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
                if (federatedInfo) {
                  federatedUser = __assign(__assign({}, federatedInfo.user), { token: federatedInfo.token });
                }
              } catch (e) {
                logger15.debug("cannot load federated user from auth storage");
              }
              if (!federatedUser)
                return [3, 5];
              this.user = federatedUser;
              logger15.debug("get current authenticated federated user", this.user);
              return [2, this.user];
            case 5:
              logger15.debug("get current authenticated userpool user");
              user = null;
              _a.label = 6;
            case 6:
              _a.trys.push([6, 8, , 9]);
              return [4, this.currentUserPoolUser(params)];
            case 7:
              user = _a.sent();
              return [3, 9];
            case 8:
              e_9 = _a.sent();
              if (e_9 === "No userPool") {
                logger15.error("Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID");
              }
              logger15.debug("The user is not authenticated by the error", e_9);
              return [2, Promise.reject("The user is not authenticated")];
            case 9:
              this.user = user;
              return [2, this.user];
          }
        });
      });
    };
    AuthClass2.prototype.currentSession = function() {
      var that = this;
      logger15.debug("Getting current session");
      if (!this.userPool) {
        return Promise.reject(new Error("No User Pool in the configuration."));
      }
      return new Promise(function(res, rej) {
        that.currentUserPoolUser().then(function(user) {
          that.userSession(user).then(function(session) {
            res(session);
            return;
          }).catch(function(e) {
            logger15.debug("Failed to get the current session", e);
            rej(e);
            return;
          });
        }).catch(function(e) {
          logger15.debug("Failed to get the current user", e);
          rej(e);
          return;
        });
      });
    };
    AuthClass2.prototype._userSession = function(user) {
      return __awaiter(this, void 0, void 0, function() {
        var clientMetadata, userSession;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!user) {
                logger15.debug("the user is null");
                return [2, this.rejectAuthError(AuthErrorTypes.NoUserSession)];
              }
              clientMetadata = this._config.clientMetadata;
              if (this.inflightSessionPromiseCounter === 0) {
                this.inflightSessionPromise = new Promise(function(res, rej) {
                  user.getSession(function(err, session) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var cleanUpError_6;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            if (!err)
                              return [3, 5];
                            logger15.debug("Failed to get the session from user", user);
                            if (!this.isSessionInvalid(err))
                              return [3, 4];
                            _a2.label = 1;
                          case 1:
                            _a2.trys.push([1, 3, , 4]);
                            return [4, this.cleanUpInvalidSession(user)];
                          case 2:
                            _a2.sent();
                            return [3, 4];
                          case 3:
                            cleanUpError_6 = _a2.sent();
                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_6.message));
                            return [
                              2
                              /*return*/
                            ];
                          case 4:
                            rej(err);
                            return [
                              2
                              /*return*/
                            ];
                          case 5:
                            logger15.debug("Succeed to get the user session", session);
                            res(session);
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }, { clientMetadata });
                });
              }
              this.inflightSessionPromiseCounter++;
              _a.label = 1;
            case 1:
              _a.trys.push([1, , 3, 4]);
              return [4, this.inflightSessionPromise];
            case 2:
              userSession = _a.sent();
              user.signInUserSession = userSession;
              return [2, userSession];
            case 3:
              this.inflightSessionPromiseCounter--;
              return [
                7
                /*endfinally*/
              ];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.userSession = function(user) {
      return this._userSession(user);
    };
    AuthClass2.prototype.currentUserCredentials = function() {
      return __awaiter(this, void 0, void 0, function() {
        var e_10, federatedInfo;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger15.debug("Getting current user credentials");
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_10 = _a.sent();
              logger15.debug("Failed to sync cache info into memory", e_10);
              throw e_10;
            case 4:
              federatedInfo = null;
              try {
                federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
              } catch (e) {
                logger15.debug("failed to get or parse item aws-amplify-federatedInfo", e);
              }
              if (federatedInfo) {
                return [2, this.Credentials.refreshFederatedToken(federatedInfo)];
              } else {
                return [2, this.currentSession().then(function(session) {
                  logger15.debug("getting session success", session);
                  return _this.Credentials.set(session, "session");
                }).catch(function() {
                  logger15.debug("getting guest credentials");
                  return _this.Credentials.set(null, "guest");
                })];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.currentCredentials = function() {
      logger15.debug("getting current credentials");
      return this.Credentials.get();
    };
    AuthClass2.prototype.verifyUserAttribute = function(user, attr, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      return new Promise(function(resolve, reject) {
        user.getAttributeVerificationCode(attr, {
          onSuccess: function(success) {
            return resolve(success);
          },
          onFailure: function(err) {
            return reject(err);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.verifyUserAttributeSubmit = function(user, attr, code) {
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      return new Promise(function(resolve, reject) {
        user.verifyAttribute(attr, code, {
          onSuccess: function(data) {
            resolve(data);
            return;
          },
          onFailure: function(err) {
            reject(err);
            return;
          }
        });
      });
    };
    AuthClass2.prototype.verifyCurrentUserAttribute = function(attr) {
      var that = this;
      return that.currentUserPoolUser().then(function(user) {
        return that.verifyUserAttribute(user, attr);
      });
    };
    AuthClass2.prototype.verifyCurrentUserAttributeSubmit = function(attr, code) {
      var that = this;
      return that.currentUserPoolUser().then(function(user) {
        return that.verifyUserAttributeSubmit(user, attr, code);
      });
    };
    AuthClass2.prototype.cognitoIdentitySignOut = function(opts, user) {
      return __awaiter(this, void 0, void 0, function() {
        var e_11, isSignedInHostedUI;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this._storageSync];
            case 1:
              _a.sent();
              return [3, 3];
            case 2:
              e_11 = _a.sent();
              logger15.debug("Failed to sync cache info into memory", e_11);
              throw e_11;
            case 3:
              isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
              return [2, new Promise(function(res, rej) {
                if (opts && opts.global) {
                  logger15.debug("user global sign out", user);
                  var clientMetadata = _this._config.clientMetadata;
                  user.getSession(function(err, result) {
                    return __awaiter(_this, void 0, void 0, function() {
                      var cleanUpError_7;
                      var _this2 = this;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            if (!err)
                              return [3, 5];
                            logger15.debug("failed to get the user session", err);
                            if (!this.isSessionInvalid(err))
                              return [3, 4];
                            _a2.label = 1;
                          case 1:
                            _a2.trys.push([1, 3, , 4]);
                            return [4, this.cleanUpInvalidSession(user)];
                          case 2:
                            _a2.sent();
                            return [3, 4];
                          case 3:
                            cleanUpError_7 = _a2.sent();
                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_7.message));
                            return [
                              2
                              /*return*/
                            ];
                          case 4:
                            return [2, rej(err)];
                          case 5:
                            user.globalSignOut({
                              onSuccess: function(data) {
                                logger15.debug("global sign out success");
                                if (isSignedInHostedUI) {
                                  _this2.oAuthSignOutRedirect(res, rej);
                                } else {
                                  return res();
                                }
                              },
                              onFailure: function(err2) {
                                logger15.debug("global sign out failed", err2);
                                return rej(err2);
                              }
                            });
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }, { clientMetadata });
                } else {
                  logger15.debug("user sign out", user);
                  user.signOut(function() {
                    if (isSignedInHostedUI) {
                      _this.oAuthSignOutRedirect(res, rej);
                    } else {
                      return res();
                    }
                  });
                }
              })];
          }
        });
      });
    };
    AuthClass2.prototype.oAuthSignOutRedirect = function(resolve, reject) {
      var isBrowser2 = browserOrNode().isBrowser;
      if (isBrowser2) {
        this.oAuthSignOutRedirectOrReject(reject);
      } else {
        this.oAuthSignOutAndResolve(resolve);
      }
    };
    AuthClass2.prototype.oAuthSignOutAndResolve = function(resolve) {
      this._oAuthHandler.signOut();
      resolve();
    };
    AuthClass2.prototype.oAuthSignOutRedirectOrReject = function(reject) {
      this._oAuthHandler.signOut();
      setTimeout(function() {
        return reject(Error("Signout timeout fail"));
      }, 3e3);
    };
    AuthClass2.prototype.signOut = function(opts) {
      return __awaiter(this, void 0, void 0, function() {
        var e_12, user;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.cleanCachedItems()];
            case 1:
              _a.sent();
              return [3, 3];
            case 2:
              e_12 = _a.sent();
              logger15.debug("failed to clear cached items");
              return [3, 3];
            case 3:
              if (!this.userPool)
                return [3, 7];
              user = this.userPool.getCurrentUser();
              if (!user)
                return [3, 5];
              return [4, this.cognitoIdentitySignOut(opts, user)];
            case 4:
              _a.sent();
              return [3, 6];
            case 5:
              logger15.debug("no current Cognito user");
              _a.label = 6;
            case 6:
              return [3, 8];
            case 7:
              logger15.debug("no Cognito User pool");
              _a.label = 8;
            case 8:
              dispatchAuthEvent2("signOut", this.user, "A user has been signed out");
              this.user = null;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.cleanCachedItems = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.Credentials.clear()];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.changePassword = function(user, oldPassword, newPassword, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      return new Promise(function(resolve, reject) {
        _this.userSession(user).then(function(session) {
          user.changePassword(oldPassword, newPassword, function(err, data) {
            if (err) {
              logger15.debug("change password failure", err);
              return reject(err);
            } else {
              return resolve(data);
            }
          }, clientMetadata);
        });
      });
    };
    AuthClass2.prototype.forgotPassword = function(username, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      var user = this.createCognitoUser(username);
      return new Promise(function(resolve, reject) {
        user.forgotPassword({
          onSuccess: function() {
            resolve();
            return;
          },
          onFailure: function(err) {
            logger15.debug("forgot password failure", err);
            dispatchAuthEvent2("forgotPassword_failure", err, username + " forgotPassword failed");
            reject(err);
            return;
          },
          inputVerificationCode: function(data) {
            dispatchAuthEvent2("forgotPassword", user, username + " has initiated forgot password flow");
            resolve(data);
            return;
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.forgotPasswordSubmit = function(username, code, password, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      if (!password) {
        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
      }
      var user = this.createCognitoUser(username);
      return new Promise(function(resolve, reject) {
        user.confirmPassword(code, password, {
          onSuccess: function(success) {
            dispatchAuthEvent2("forgotPasswordSubmit", user, username + " forgotPasswordSubmit successful");
            resolve(success);
            return;
          },
          onFailure: function(err) {
            dispatchAuthEvent2("forgotPasswordSubmit_failure", err, username + " forgotPasswordSubmit failed");
            reject(err);
            return;
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.currentUserInfo = function() {
      return __awaiter(this, void 0, void 0, function() {
        var source, user, attributes, userAttrs, credentials, e_13, info, err_2, user;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              source = this.Credentials.getCredSource();
              if (!(!source || source === "aws" || source === "userPool"))
                return [3, 9];
              return [4, this.currentUserPoolUser().catch(function(err) {
                return logger15.error(err);
              })];
            case 1:
              user = _a.sent();
              if (!user) {
                return [2, null];
              }
              _a.label = 2;
            case 2:
              _a.trys.push([2, 8, , 9]);
              return [4, this.userAttributes(user)];
            case 3:
              attributes = _a.sent();
              userAttrs = this.attributesToObject(attributes);
              credentials = null;
              _a.label = 4;
            case 4:
              _a.trys.push([4, 6, , 7]);
              return [4, this.currentCredentials()];
            case 5:
              credentials = _a.sent();
              return [3, 7];
            case 6:
              e_13 = _a.sent();
              logger15.debug("Failed to retrieve credentials while getting current user info", e_13);
              return [3, 7];
            case 7:
              info = {
                id: credentials ? credentials.identityId : void 0,
                username: user.getUsername(),
                attributes: userAttrs
              };
              return [2, info];
            case 8:
              err_2 = _a.sent();
              logger15.error("currentUserInfo error", err_2);
              return [2, {}];
            case 9:
              if (source === "federated") {
                user = this.user;
                return [2, user ? user : {}];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.federatedSignIn = function(providerOrOptions, response, user) {
      return __awaiter(this, void 0, void 0, function() {
        var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this._config.identityPoolId && !this._config.userPoolId) {
                throw new Error("Federation requires either a User Pool or Identity Pool in config");
              }
              if (typeof providerOrOptions === "undefined") {
                if (this._config.identityPoolId && !this._config.userPoolId) {
                  throw new Error("Federation with Identity Pools requires tokens passed as arguments");
                }
              }
              if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === "undefined"))
                return [3, 1];
              options = providerOrOptions || {
                provider: CognitoHostedUIIdentityProvider.Cognito
              };
              provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;
              customState = isFederatedSignInOptions(options) ? options.customState : options.customState;
              if (this._config.userPoolId) {
                client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;
                redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;
                this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);
              }
              return [3, 4];
            case 1:
              provider = providerOrOptions;
              try {
                loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")).user);
                if (loggedInUser) {
                  logger15.warn("There is already a signed in user: " + loggedInUser + " in your app.\n																	You should not call Auth.federatedSignIn method again as it may cause unexpected behavior.");
                }
              } catch (e) {
              }
              token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;
              return [4, this.Credentials.set({ provider, token, identity_id, user, expires_at }, "federation")];
            case 2:
              credentials = _a.sent();
              return [4, this.currentAuthenticatedUser()];
            case 3:
              currentUser = _a.sent();
              dispatchAuthEvent2("signIn", currentUser, "A user " + currentUser.username + " has been signed in");
              logger15.debug("federated sign in credentials", credentials);
              return [2, credentials];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype._handleAuthResponse = function(URL2) {
      return __awaiter(this, void 0, void 0, function() {
        var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_3;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (this.oAuthFlowInProgress) {
                logger15.debug("Skipping URL " + URL2 + " current flow in progress");
                return [
                  2
                  /*return*/
                ];
              }
              _b.label = 1;
            case 1:
              _b.trys.push([1, , 8, 9]);
              this.oAuthFlowInProgress = true;
              if (!this._config.userPoolId) {
                throw new Error("OAuth responses require a User Pool defined in config");
              }
              dispatchAuthEvent2("parsingCallbackUrl", { url: URL2 }, "The callback url is being parsed");
              currentUrl = URL2 || (browserOrNode().isBrowser ? window.location.href : "");
              hasCodeOrError = !!((0, import_url2.parse)(currentUrl).query || "").split("&").map(function(entry) {
                return entry.split("=");
              }).find(function(_a2) {
                var _b2 = __read(_a2, 1), k = _b2[0];
                return k === "code" || k === "error";
              });
              hasTokenOrError = !!((0, import_url2.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                return entry.split("=");
              }).find(function(_a2) {
                var _b2 = __read(_a2, 1), k = _b2[0];
                return k === "access_token" || k === "error";
              });
              if (!(hasCodeOrError || hasTokenOrError))
                return [3, 7];
              this._storage.setItem("amplify-redirected-from-hosted-ui", "true");
              _b.label = 2;
            case 2:
              _b.trys.push([2, 6, , 7]);
              return [4, this._oAuthHandler.handleAuthResponse(currentUrl)];
            case 3:
              _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;
              session = new CognitoUserSession({
                IdToken: new CognitoIdToken({ IdToken: idToken }),
                RefreshToken: new CognitoRefreshToken({
                  RefreshToken: refreshToken
                }),
                AccessToken: new CognitoAccessToken({
                  AccessToken: accessToken
                })
              });
              credentials = void 0;
              if (!this._config.identityPoolId)
                return [3, 5];
              return [4, this.Credentials.set(session, "session")];
            case 4:
              credentials = _b.sent();
              logger15.debug("AWS credentials", credentials);
              _b.label = 5;
            case 5:
              isCustomStateIncluded = /-/.test(state);
              currentUser = this.createCognitoUser(session.getIdToken().decodePayload()["cognito:username"]);
              currentUser.setSignInUserSession(session);
              if (window && typeof window.history !== "undefined") {
                window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
              }
              dispatchAuthEvent2("signIn", currentUser, "A user " + currentUser.getUsername() + " has been signed in");
              dispatchAuthEvent2("cognitoHostedUI", currentUser, "A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI");
              if (isCustomStateIncluded) {
                customState = state.split("-").splice(1).join("-");
                dispatchAuthEvent2("customOAuthState", urlSafeDecode(customState), "State for user " + currentUser.getUsername());
              }
              return [2, credentials];
            case 6:
              err_3 = _b.sent();
              logger15.debug("Error in cognito hosted auth response", err_3);
              if (window && typeof window.history !== "undefined") {
                window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
              }
              dispatchAuthEvent2("signIn_failure", err_3, "The OAuth response flow failed");
              dispatchAuthEvent2("cognitoHostedUI_failure", err_3, "A failure occurred when returning to the Cognito Hosted UI");
              dispatchAuthEvent2("customState_failure", err_3, "A failure occurred when returning state");
              return [3, 7];
            case 7:
              return [3, 9];
            case 8:
              this.oAuthFlowInProgress = false;
              return [
                7
                /*endfinally*/
              ];
            case 9:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.essentialCredentials = function(credentials) {
      return {
        accessKeyId: credentials.accessKeyId,
        sessionToken: credentials.sessionToken,
        secretAccessKey: credentials.secretAccessKey,
        identityId: credentials.identityId,
        authenticated: credentials.authenticated
      };
    };
    AuthClass2.prototype.attributesToObject = function(attributes) {
      var _this = this;
      var obj = {};
      if (attributes) {
        attributes.map(function(attribute) {
          if (attribute.Name === "email_verified" || attribute.Name === "phone_number_verified") {
            obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;
          } else {
            obj[attribute.Name] = attribute.Value;
          }
        });
      }
      return obj;
    };
    AuthClass2.prototype.isTruthyString = function(value) {
      return typeof value.toLowerCase === "function" && value.toLowerCase() === "true";
    };
    AuthClass2.prototype.createCognitoUser = function(username) {
      var userData = {
        Username: username,
        Pool: this.userPool
      };
      userData.Storage = this._storage;
      var authenticationFlowType = this._config.authenticationFlowType;
      var user = new CognitoUser(userData);
      if (authenticationFlowType) {
        user.setAuthenticationFlowType(authenticationFlowType);
      }
      return user;
    };
    AuthClass2.prototype._isValidAuthStorage = function(obj) {
      return !!obj && typeof obj.getItem === "function" && typeof obj.setItem === "function" && typeof obj.removeItem === "function" && typeof obj.clear === "function";
    };
    AuthClass2.prototype.noUserPoolErrorHandler = function(config) {
      if (config) {
        if (!config.userPoolId || !config.identityPoolId) {
          return AuthErrorTypes.MissingAuthConfig;
        }
      }
      return AuthErrorTypes.NoConfig;
    };
    AuthClass2.prototype.rejectAuthError = function(type) {
      return Promise.reject(new AuthError(type));
    };
    AuthClass2.prototype.rejectNoUserPool = function() {
      var type = this.noUserPoolErrorHandler(this._config);
      return Promise.reject(new NoUserPoolError(type));
    };
    AuthClass2.prototype.rememberDevice = function() {
      return __awaiter(this, void 0, void 0, function() {
        var currUser, error_2;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.currentUserPoolUser()];
            case 1:
              currUser = _a.sent();
              return [3, 3];
            case 2:
              error_2 = _a.sent();
              logger15.debug("The user is not authenticated by the error", error_2);
              return [2, Promise.reject("The user is not authenticated")];
            case 3:
              currUser.getCachedDeviceKeyAndPassword();
              return [2, new Promise(function(res, rej) {
                currUser.setDeviceStatusRemembered({
                  onSuccess: function(data) {
                    res(data);
                  },
                  onFailure: function(err) {
                    if (err.code === "InvalidParameterException") {
                      rej(new AuthError(AuthErrorTypes.DeviceConfig));
                    } else if (err.code === "NetworkError") {
                      rej(new AuthError(AuthErrorTypes.NetworkError));
                    } else {
                      rej(err);
                    }
                  }
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.forgetDevice = function() {
      return __awaiter(this, void 0, void 0, function() {
        var currUser, error_3;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.currentUserPoolUser()];
            case 1:
              currUser = _a.sent();
              return [3, 3];
            case 2:
              error_3 = _a.sent();
              logger15.debug("The user is not authenticated by the error", error_3);
              return [2, Promise.reject("The user is not authenticated")];
            case 3:
              currUser.getCachedDeviceKeyAndPassword();
              return [2, new Promise(function(res, rej) {
                currUser.forgetDevice({
                  onSuccess: function(data) {
                    res(data);
                  },
                  onFailure: function(err) {
                    if (err.code === "InvalidParameterException") {
                      rej(new AuthError(AuthErrorTypes.DeviceConfig));
                    } else if (err.code === "NetworkError") {
                      rej(new AuthError(AuthErrorTypes.NetworkError));
                    } else {
                      rej(err);
                    }
                  }
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.fetchDevices = function() {
      return __awaiter(this, void 0, void 0, function() {
        var currUser, error_4;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.currentUserPoolUser()];
            case 1:
              currUser = _a.sent();
              return [3, 3];
            case 2:
              error_4 = _a.sent();
              logger15.debug("The user is not authenticated by the error", error_4);
              throw new Error("The user is not authenticated");
            case 3:
              currUser.getCachedDeviceKeyAndPassword();
              return [2, new Promise(function(res, rej) {
                var cb = {
                  onSuccess: function(data) {
                    var deviceList = data.Devices.map(function(device) {
                      var deviceName = device.DeviceAttributes.find(function(_a2) {
                        var Name = _a2.Name;
                        return Name === "device_name";
                      }) || {};
                      var deviceInfo = {
                        id: device.DeviceKey,
                        name: deviceName.Value
                      };
                      return deviceInfo;
                    });
                    res(deviceList);
                  },
                  onFailure: function(err) {
                    if (err.code === "InvalidParameterException") {
                      rej(new AuthError(AuthErrorTypes.DeviceConfig));
                    } else if (err.code === "NetworkError") {
                      rej(new AuthError(AuthErrorTypes.NetworkError));
                    } else {
                      rej(err);
                    }
                  }
                };
                currUser.listDevices(MAX_DEVICES, null, cb);
              })];
          }
        });
      });
    };
    return AuthClass2;
  }()
);
var Auth = new AuthClass(null);
Amplify.register(Auth);

// node_modules/@aws-amplify/auth/lib-esm/index.js
var lib_esm_default = Auth;
export {
  Auth,
  AuthErrorStrings,
  CognitoHostedUIIdentityProvider,
  CognitoUser,
  CookieStorage,
  GRAPHQL_AUTH_MODE,
  appendToCognitoUserAgent,
  lib_esm_default as default
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <http://feross.org>
   * @license  MIT
   *)

js-cookie/src/js.cookie.js:
  (*!
   * JavaScript Cookie v2.2.1
   * https://github.com/js-cookie/js-cookie
   *
   * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
   * Released under the MIT license
   *)

punycode/punycode.js:
  (*! https://mths.be/punycode v1.3.2 by @mathias *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@aws-amplify/core/lib-esm/Util/Mutex.js:
  (*!
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

bowser/src/bowser.js:
  (*!
   * Bowser - a browser detector
   * https://github.com/lancedikson/bowser
   * MIT License | (c) Dustin Diaz 2012-2015
   * MIT License | (c) Denis Demchenko 2015-2019
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

amazon-cognito-identity-js/es/AuthenticationDetails.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/AuthenticationHelper.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoJwtToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoAccessToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoIdToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoRefreshToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/Platform/index.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUserSession.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/DateHelper.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUserAttribute.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/StorageHelper.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUser.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUserPool.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/index.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=@aws-amplify_auth.js.map
